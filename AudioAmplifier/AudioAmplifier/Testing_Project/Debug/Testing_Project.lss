
Testing_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a08  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000812  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065c  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000467  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000291  00000000  00000000  000022fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  78:	0c 94 94 01 	jmp	0x328	; 0x328 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Init_Pot_Meter>:
 
#include <avr/io.h>
#include "Dig_Pot_Lib.h"
#include "SPI_Lib.h"

void Init_Pot_Meter() {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	SPI_Init_Master();
  88:	0e 94 ab 00 	call	0x156	; 0x156 <SPI_Init_Master>
	CS_D |= (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
  8c:	84 e2       	ldi	r24, 0x24	; 36
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	24 e2       	ldi	r18, 0x24	; 36
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	20 81       	ld	r18, Z
  98:	27 60       	ori	r18, 0x07	; 7
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	CS |= (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
  9e:	85 e2       	ldi	r24, 0x25	; 37
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	25 e2       	ldi	r18, 0x25	; 37
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	27 60       	ori	r18, 0x07	; 7
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
}
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <Write_Pot_Meter>:

void Write_Pot_Meter(uint8_t value, uint8_t CS_pin) {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	00 d0       	rcall	.+0      	; 0xbc <Write_Pot_Meter+0x6>
  bc:	00 d0       	rcall	.+0      	; 0xbe <Write_Pot_Meter+0x8>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	8b 83       	std	Y+3, r24	; 0x03
  c4:	6c 83       	std	Y+4, r22	; 0x04
	CS &= ~(1 << CS_pin);
  c6:	85 e2       	ldi	r24, 0x25	; 37
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	25 e2       	ldi	r18, 0x25	; 37
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	62 2f       	mov	r22, r18
  d4:	2c 81       	ldd	r18, Y+4	; 0x04
  d6:	42 2f       	mov	r20, r18
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Write_Pot_Meter+0x2e>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	4a 95       	dec	r20
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <Write_Pot_Meter+0x2a>
  e8:	20 95       	com	r18
  ea:	26 23       	and	r18, r22
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
	uint8_t data[2] = {0b00000000, value};
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	8a 83       	std	Y+2, r24	; 0x02
	SPI_Send_Large_Data(data);
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_Send_Large_Data>
	CS |= (1 << CS_pin);
  fe:	85 e2       	ldi	r24, 0x25	; 37
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	25 e2       	ldi	r18, 0x25	; 37
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	62 2f       	mov	r22, r18
 10c:	2c 81       	ldd	r18, Y+4	; 0x04
 10e:	42 2f       	mov	r20, r18
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <Write_Pot_Meter+0x66>
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	4a 95       	dec	r20
 11e:	e2 f7       	brpl	.-8      	; 0x118 <Write_Pot_Meter+0x62>
 120:	26 2b       	or	r18, r22
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
} 
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <main>:
#include "Dig_Pot_Lib.h"
#include "std_lib.h"


int main(void)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
// 	//PORTB &= ~(1 << PINB5);
// 	PORTB |= (1 << PINB0);
// 	//PORTD &= ~(1 << PIND0);
// 	/* Enable SPI */
// 	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
	Init_Pot_Meter();
 13c:	0e 94 40 00 	call	0x80	; 0x80 <Init_Pot_Meter>

    while (1) {
		Write_Pot_Meter(255, CS_3);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <Write_Pot_Meter>
		delay(300);
 148:	6c e2       	ldi	r22, 0x2C	; 44
 14a:	71 e0       	ldi	r23, 0x01	; 1
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 41 01 	call	0x282	; 0x282 <delay>
    }
 154:	f5 cf       	rjmp	.-22     	; 0x140 <main+0xc>

00000156 <SPI_Init_Master>:
//MISO == "Master In Slave Out" || SPI
//SCK == SPI Clock Line			|| SCK
//SS == "Slave Select			|| CS == "Chip Select"
 
 
void SPI_Init_Master() {
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	/* Set the MOSI & SCK as Output lines */
	DDRB |= (1 << PINB3) | (1 << PINB5);
 15e:	84 e2       	ldi	r24, 0x24	; 36
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	24 e2       	ldi	r18, 0x24	; 36
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	20 81       	ld	r18, Z
 16a:	28 62       	ori	r18, 0x28	; 40
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
	/* Set the SCK pin to low */
	PORTB &= ~(1 << PINB5);
 170:	85 e2       	ldi	r24, 0x25	; 37
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	25 e2       	ldi	r18, 0x25	; 37
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	f9 01       	movw	r30, r18
 17a:	20 81       	ld	r18, Z
 17c:	2f 7d       	andi	r18, 0xDF	; 223
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18
	
	/* Enable SPI */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0); 
 182:	8c e4       	ldi	r24, 0x4C	; 76
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	2c e4       	ldi	r18, 0x4C	; 76
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	f9 01       	movw	r30, r18
 18c:	20 81       	ld	r18, Z
 18e:	21 65       	ori	r18, 0x51	; 81
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <SPI_Send_Data>:

void SPI_Send_Data(uint8_t data) {
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	1f 92       	push	r1
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	89 83       	std	Y+1, r24	; 0x01
	/* Place the data in the transmitter buffer */
	SPDR = data;
 1a6:	8e e4       	ldi	r24, 0x4E	; 78
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	29 81       	ldd	r18, Y+1	; 0x01
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18

	/* Wait for the transmitter to complete */
	while(!(SPSR & (1 << SPIF)));
 1b0:	00 00       	nop
 1b2:	8d e4       	ldi	r24, 0x4D	; 77
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	fc 01       	movw	r30, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	88 23       	and	r24, r24
 1bc:	d4 f7       	brge	.-12     	; 0x1b2 <SPI_Send_Data+0x18>
}
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <SPI_Send_Large_Data>:

void SPI_Send_Large_Data(uint8_t *data) {
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	2a 97       	sbiw	r28, 0x0a	; 10
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	9a 87       	std	Y+10, r25	; 0x0a
 1e4:	89 87       	std	Y+9, r24	; 0x09
	uint16_t len = 2;
	uint8_t spi_data[len];
	for(int i = 0; i < len; i++) {
		SPI_Send_Data(data[i]);
	}
 1e6:	0d b7       	in	r16, 0x3d	; 61
 1e8:	1e b7       	in	r17, 0x3e	; 62
 1ea:	8d b7       	in	r24, 0x3d	; 61
 1ec:	9e b7       	in	r25, 0x3e	; 62
 1ee:	7c 01       	movw	r14, r24
	while(!(SPSR & (1 << SPIF)));
}

void SPI_Send_Large_Data(uint8_t *data) {
	/* Find the length of the data array */
	uint16_t len = 2;
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	9c 83       	std	Y+4, r25	; 0x04
 1f6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t spi_data[len];
 1f8:	8b 81       	ldd	r24, Y+3	; 0x03
 1fa:	9c 81       	ldd	r25, Y+4	; 0x04
 1fc:	9c 01       	movw	r18, r24
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	31 09       	sbc	r19, r1
 202:	3e 83       	std	Y+6, r19	; 0x06
 204:	2d 83       	std	Y+5, r18	; 0x05
 206:	2d b7       	in	r18, 0x3d	; 61
 208:	3e b7       	in	r19, 0x3e	; 62
 20a:	28 1b       	sub	r18, r24
 20c:	39 0b       	sbc	r19, r25
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	3e bf       	out	0x3e, r19	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	2d bf       	out	0x3d, r18	; 61
 218:	8d b7       	in	r24, 0x3d	; 61
 21a:	9e b7       	in	r25, 0x3e	; 62
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	98 87       	std	Y+8, r25	; 0x08
 220:	8f 83       	std	Y+7, r24	; 0x07
	for(int i = 0; i < len; i++) {
 222:	1a 82       	std	Y+2, r1	; 0x02
 224:	19 82       	std	Y+1, r1	; 0x01
 226:	0f c0       	rjmp	.+30     	; 0x246 <SPI_Send_Large_Data+0x80>
		SPI_Send_Data(data[i]);
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	9a 81       	ldd	r25, Y+2	; 0x02
 22c:	29 85       	ldd	r18, Y+9	; 0x09
 22e:	3a 85       	ldd	r19, Y+10	; 0x0a
 230:	82 0f       	add	r24, r18
 232:	93 1f       	adc	r25, r19
 234:	fc 01       	movw	r30, r24
 236:	80 81       	ld	r24, Z
 238:	0e 94 cd 00 	call	0x19a	; 0x19a <SPI_Send_Data>

void SPI_Send_Large_Data(uint8_t *data) {
	/* Find the length of the data array */
	uint16_t len = 2;
	uint8_t spi_data[len];
	for(int i = 0; i < len; i++) {
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	9a 81       	ldd	r25, Y+2	; 0x02
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	9a 83       	std	Y+2, r25	; 0x02
 244:	89 83       	std	Y+1, r24	; 0x01
 246:	29 81       	ldd	r18, Y+1	; 0x01
 248:	3a 81       	ldd	r19, Y+2	; 0x02
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	9c 81       	ldd	r25, Y+4	; 0x04
 24e:	28 17       	cp	r18, r24
 250:	39 07       	cpc	r19, r25
 252:	50 f3       	brcs	.-44     	; 0x228 <SPI_Send_Large_Data+0x62>
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	fe be       	out	0x3e, r15	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	ed be       	out	0x3d, r14	; 61
		SPI_Send_Data(data[i]);
	}
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	f8 94       	cli
 262:	1e bf       	out	0x3e, r17	; 62
 264:	0f be       	out	0x3f, r0	; 63
 266:	0d bf       	out	0x3d, r16	; 61
 268:	2a 96       	adiw	r28, 0x0a	; 10
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	08 95       	ret

00000282 <delay>:
	}

}

/* Delay function by Farzad */
void delay(uint32_t ms) {
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	28 97       	sbiw	r28, 0x08	; 8
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	6d 83       	std	Y+5, r22	; 0x05
 298:	7e 83       	std	Y+6, r23	; 0x06
 29a:	8f 83       	std	Y+7, r24	; 0x07
 29c:	98 87       	std	Y+8, r25	; 0x08
	uint32_t i = ms * 480;
 29e:	2d 81       	ldd	r18, Y+5	; 0x05
 2a0:	3e 81       	ldd	r19, Y+6	; 0x06
 2a2:	4f 81       	ldd	r20, Y+7	; 0x07
 2a4:	58 85       	ldd	r21, Y+8	; 0x08
 2a6:	80 ee       	ldi	r24, 0xE0	; 224
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	dc 01       	movw	r26, r24
 2ac:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__muluhisi3>
 2b0:	dc 01       	movw	r26, r24
 2b2:	cb 01       	movw	r24, r22
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	9a 83       	std	Y+2, r25	; 0x02
 2b8:	ab 83       	std	Y+3, r26	; 0x03
 2ba:	bc 83       	std	Y+4, r27	; 0x04
	while(--i > 0);
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	9a 81       	ldd	r25, Y+2	; 0x02
 2c0:	ab 81       	ldd	r26, Y+3	; 0x03
 2c2:	bc 81       	ldd	r27, Y+4	; 0x04
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	a1 09       	sbc	r26, r1
 2c8:	b1 09       	sbc	r27, r1
 2ca:	89 83       	std	Y+1, r24	; 0x01
 2cc:	9a 83       	std	Y+2, r25	; 0x02
 2ce:	ab 83       	std	Y+3, r26	; 0x03
 2d0:	bc 83       	std	Y+4, r27	; 0x04
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	9a 81       	ldd	r25, Y+2	; 0x02
 2d6:	ab 81       	ldd	r26, Y+3	; 0x03
 2d8:	bc 81       	ldd	r27, Y+4	; 0x04
 2da:	89 2b       	or	r24, r25
 2dc:	8a 2b       	or	r24, r26
 2de:	8b 2b       	or	r24, r27
 2e0:	69 f7       	brne	.-38     	; 0x2bc <delay+0x3a>
 2e2:	28 96       	adiw	r28, 0x08	; 8
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <__muluhisi3>:
 2f4:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 2f8:	a5 9f       	mul	r26, r21
 2fa:	90 0d       	add	r25, r0
 2fc:	b4 9f       	mul	r27, r20
 2fe:	90 0d       	add	r25, r0
 300:	a4 9f       	mul	r26, r20
 302:	80 0d       	add	r24, r0
 304:	91 1d       	adc	r25, r1
 306:	11 24       	eor	r1, r1
 308:	08 95       	ret

0000030a <__umulhisi3>:
 30a:	a2 9f       	mul	r26, r18
 30c:	b0 01       	movw	r22, r0
 30e:	b3 9f       	mul	r27, r19
 310:	c0 01       	movw	r24, r0
 312:	a3 9f       	mul	r26, r19
 314:	70 0d       	add	r23, r0
 316:	81 1d       	adc	r24, r1
 318:	11 24       	eor	r1, r1
 31a:	91 1d       	adc	r25, r1
 31c:	b2 9f       	mul	r27, r18
 31e:	70 0d       	add	r23, r0
 320:	81 1d       	adc	r24, r1
 322:	11 24       	eor	r1, r1
 324:	91 1d       	adc	r25, r1
 326:	08 95       	ret

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
