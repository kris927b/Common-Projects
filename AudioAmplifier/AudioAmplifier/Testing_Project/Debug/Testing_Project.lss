
Testing_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ff  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ae  00000000  00000000  00000ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c2  00000000  00000000  00001175  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d2  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000110  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "Dig_Pot_Lib.h"
#include "std_lib.h"


int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	/* Set the MOSI & SCK as Output lines */
	DDRB |= (1 << PINB3) | (1 << PINB5) | (1 << PINB0);
  88:	84 e2       	ldi	r24, 0x24	; 36
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	24 e2       	ldi	r18, 0x24	; 36
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f9 01       	movw	r30, r18
  92:	20 81       	ld	r18, Z
  94:	29 62       	ori	r18, 0x29	; 41
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18
	//DDRB &= ~(1 << PINB4);
	//DDRD |= (1 << PIND0);
	/* Set the SCK pin to low */
	//PORTB &= ~(1 << PINB5);
	PORTB |= (1 << PINB0);
  9a:	85 e2       	ldi	r24, 0x25	; 37
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	25 e2       	ldi	r18, 0x25	; 37
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	f9 01       	movw	r30, r18
  a4:	20 81       	ld	r18, Z
  a6:	21 60       	ori	r18, 0x01	; 1
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
	//PORTD &= ~(1 << PIND0);
	/* Enable SPI */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
  ac:	8c e4       	ldi	r24, 0x4C	; 76
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2c e4       	ldi	r18, 0x4C	; 76
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	21 65       	ori	r18, 0x51	; 81
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18

    while (1) {
		PORTB &= ~(1 << PINB0);
  be:	85 e2       	ldi	r24, 0x25	; 37
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	25 e2       	ldi	r18, 0x25	; 37
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	20 81       	ld	r18, Z
  ca:	2e 7f       	andi	r18, 0xFE	; 254
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
		SPDR = 0b00100100;
  d0:	8e e4       	ldi	r24, 0x4E	; 78
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	24 e2       	ldi	r18, 0x24	; 36
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
		while(!(SPSR & (1 << SPIF)));
  da:	00 00       	nop
  dc:	8d e4       	ldi	r24, 0x4D	; 77
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	fc 01       	movw	r30, r24
  e2:	80 81       	ld	r24, Z
  e4:	88 23       	and	r24, r24
  e6:	d4 f7       	brge	.-12     	; 0xdc <main+0x5c>
		PORTB |= (1 << PINB0);
  e8:	85 e2       	ldi	r24, 0x25	; 37
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	25 e2       	ldi	r18, 0x25	; 37
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	21 60       	ori	r18, 0x01	; 1
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
		delay(300);
  fa:	6c e2       	ldi	r22, 0x2C	; 44
  fc:	71 e0       	ldi	r23, 0x01	; 1
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 84 00 	call	0x108	; 0x108 <delay>
    }
 106:	db cf       	rjmp	.-74     	; 0xbe <main+0x3e>

00000108 <delay>:
	}

}

/* Delay function by Farzad */
void delay(uint32_t ms) {
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	28 97       	sbiw	r28, 0x08	; 8
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	6d 83       	std	Y+5, r22	; 0x05
 11e:	7e 83       	std	Y+6, r23	; 0x06
 120:	8f 83       	std	Y+7, r24	; 0x07
 122:	98 87       	std	Y+8, r25	; 0x08
	uint32_t i = ms * 480;
 124:	2d 81       	ldd	r18, Y+5	; 0x05
 126:	3e 81       	ldd	r19, Y+6	; 0x06
 128:	4f 81       	ldd	r20, Y+7	; 0x07
 12a:	58 85       	ldd	r21, Y+8	; 0x08
 12c:	80 ee       	ldi	r24, 0xE0	; 224
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	dc 01       	movw	r26, r24
 132:	0e 94 bd 00 	call	0x17a	; 0x17a <__muluhisi3>
 136:	dc 01       	movw	r26, r24
 138:	cb 01       	movw	r24, r22
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	9a 83       	std	Y+2, r25	; 0x02
 13e:	ab 83       	std	Y+3, r26	; 0x03
 140:	bc 83       	std	Y+4, r27	; 0x04
	while(--i > 0);
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	9a 81       	ldd	r25, Y+2	; 0x02
 146:	ab 81       	ldd	r26, Y+3	; 0x03
 148:	bc 81       	ldd	r27, Y+4	; 0x04
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	a1 09       	sbc	r26, r1
 14e:	b1 09       	sbc	r27, r1
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	9a 83       	std	Y+2, r25	; 0x02
 154:	ab 83       	std	Y+3, r26	; 0x03
 156:	bc 83       	std	Y+4, r27	; 0x04
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	9a 81       	ldd	r25, Y+2	; 0x02
 15c:	ab 81       	ldd	r26, Y+3	; 0x03
 15e:	bc 81       	ldd	r27, Y+4	; 0x04
 160:	89 2b       	or	r24, r25
 162:	8a 2b       	or	r24, r26
 164:	8b 2b       	or	r24, r27
 166:	69 f7       	brne	.-38     	; 0x142 <delay+0x3a>
 168:	28 96       	adiw	r28, 0x08	; 8
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <__muluhisi3>:
 17a:	0e 94 c8 00 	call	0x190	; 0x190 <__umulhisi3>
 17e:	a5 9f       	mul	r26, r21
 180:	90 0d       	add	r25, r0
 182:	b4 9f       	mul	r27, r20
 184:	90 0d       	add	r25, r0
 186:	a4 9f       	mul	r26, r20
 188:	80 0d       	add	r24, r0
 18a:	91 1d       	adc	r25, r1
 18c:	11 24       	eor	r1, r1
 18e:	08 95       	ret

00000190 <__umulhisi3>:
 190:	a2 9f       	mul	r26, r18
 192:	b0 01       	movw	r22, r0
 194:	b3 9f       	mul	r27, r19
 196:	c0 01       	movw	r24, r0
 198:	a3 9f       	mul	r26, r19
 19a:	70 0d       	add	r23, r0
 19c:	81 1d       	adc	r24, r1
 19e:	11 24       	eor	r1, r1
 1a0:	91 1d       	adc	r25, r1
 1a2:	b2 9f       	mul	r27, r18
 1a4:	70 0d       	add	r23, r0
 1a6:	81 1d       	adc	r24, r1
 1a8:	11 24       	eor	r1, r1
 1aa:	91 1d       	adc	r25, r1
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
