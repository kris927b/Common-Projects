
Testing_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000860  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000738  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000390  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000189  00000000  00000000  00001b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  78:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Init_Pot_Meter>:
 
#include <avr/io.h>
#include "Dig_Pot_Lib.h"
#include "SPI_Lib.h"

void Init_Pot_Meter() {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	SPI_Init_Master();
  88:	0e 94 a6 00 	call	0x14c	; 0x14c <SPI_Init_Master>
	CS_D |= (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
  8c:	84 e2       	ldi	r24, 0x24	; 36
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	24 e2       	ldi	r18, 0x24	; 36
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	20 81       	ld	r18, Z
  98:	27 60       	ori	r18, 0x07	; 7
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	CS |= (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
  9e:	85 e2       	ldi	r24, 0x25	; 37
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	25 e2       	ldi	r18, 0x25	; 37
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	27 60       	ori	r18, 0x07	; 7
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
}
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <Write_Pot_Meter>:

void Write_Pot_Meter(uint8_t value, uint8_t CS_pin) {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	00 d0       	rcall	.+0      	; 0xbc <Write_Pot_Meter+0x6>
  bc:	00 d0       	rcall	.+0      	; 0xbe <Write_Pot_Meter+0x8>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	8b 83       	std	Y+3, r24	; 0x03
  c4:	6c 83       	std	Y+4, r22	; 0x04
	CS &= ~(1 << CS_pin);
  c6:	85 e2       	ldi	r24, 0x25	; 37
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	25 e2       	ldi	r18, 0x25	; 37
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	62 2f       	mov	r22, r18
  d4:	2c 81       	ldd	r18, Y+4	; 0x04
  d6:	42 2f       	mov	r20, r18
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Write_Pot_Meter+0x2e>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	4a 95       	dec	r20
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <Write_Pot_Meter+0x2a>
  e8:	20 95       	com	r18
  ea:	26 23       	and	r18, r22
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
	uint8_t data[2] = {0b00100000, value};
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	8a 83       	std	Y+2, r24	; 0x02
	SPI_Send_Large_Data(data);
  f8:	ce 01       	movw	r24, r28
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_Send_Large_Data>
	CS |= (1 << CS_pin);
 100:	85 e2       	ldi	r24, 0x25	; 37
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	25 e2       	ldi	r18, 0x25	; 37
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	62 2f       	mov	r22, r18
 10e:	2c 81       	ldd	r18, Y+4	; 0x04
 110:	42 2f       	mov	r20, r18
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <Write_Pot_Meter+0x68>
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	4a 95       	dec	r20
 120:	e2 f7       	brpl	.-8      	; 0x11a <Write_Pot_Meter+0x64>
 122:	26 2b       	or	r18, r22
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
} 
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <main>:
#include "Dig_Pot_Lib.h"
#include "std_lib.h"


int main(void)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	Init_Pot_Meter();
 13e:	0e 94 40 00 	call	0x80	; 0x80 <Init_Pot_Meter>
	Write_Pot_Meter(10, CS_1);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	8a e0       	ldi	r24, 0x0A	; 10
 146:	0e 94 5b 00 	call	0xb6	; 0xb6 <Write_Pot_Meter>
    /* Replace with your application code */
    while (1) 
    {
    }
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x14>

0000014c <SPI_Init_Master>:
//MISO == "Master In Slave Out" || SPI
//SCK == SPI Clock Line			|| SCK
//SS == "Slave Select			|| CS == "Chip Select"
 
 
void SPI_Init_Master() {
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	/* Set the MOSI & SCK as Output lines */
	DDRB |= (1 << PINB3) | (1 << PINB5);
 154:	84 e2       	ldi	r24, 0x24	; 36
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	24 e2       	ldi	r18, 0x24	; 36
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	28 62       	ori	r18, 0x28	; 40
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
	/* Set the SCK pin to low */
	PORTB &= ~(1 << PINB5);
 166:	85 e2       	ldi	r24, 0x25	; 37
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	25 e2       	ldi	r18, 0x25	; 37
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	2f 7d       	andi	r18, 0xDF	; 223
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
	
	/* Enable SPI */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0); 
 178:	8c e4       	ldi	r24, 0x4C	; 76
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	2c e4       	ldi	r18, 0x4C	; 76
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	21 65       	ori	r18, 0x51	; 81
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <SPI_Send_Data>:

void SPI_Send_Data(char data) {
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	1f 92       	push	r1
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	89 83       	std	Y+1, r24	; 0x01
	/* Place the data in the transmitter buffer */
	SPDR = data;
 19c:	8e e4       	ldi	r24, 0x4E	; 78
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	29 81       	ldd	r18, Y+1	; 0x01
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18

	/* Wait for the transmitter to complete */
	while(!(SPSR & (1 << SPIF)));
 1a6:	00 00       	nop
 1a8:	8d e4       	ldi	r24, 0x4D	; 77
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	88 23       	and	r24, r24
 1b2:	d4 f7       	brge	.-12     	; 0x1a8 <SPI_Send_Data+0x18>
}
 1b4:	0f 90       	pop	r0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <SPI_Send_Large_Data>:

void SPI_Send_Large_Data(char *data) {
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <SPI_Send_Large_Data+0x6>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <SPI_Send_Large_Data+0x8>
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <SPI_Send_Large_Data+0xa>
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	9e 83       	std	Y+6, r25	; 0x06
 1cc:	8d 83       	std	Y+5, r24	; 0x05
	/* Find the length of the data array */
	uint16_t len = 2;
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	9c 83       	std	Y+4, r25	; 0x04
 1d4:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 0; i < len; i++) {
 1d6:	1a 82       	std	Y+2, r1	; 0x02
 1d8:	19 82       	std	Y+1, r1	; 0x01
 1da:	0f c0       	rjmp	.+30     	; 0x1fa <SPI_Send_Large_Data+0x3e>
		SPI_Send_Data(data[i]);
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	9a 81       	ldd	r25, Y+2	; 0x02
 1e0:	2d 81       	ldd	r18, Y+5	; 0x05
 1e2:	3e 81       	ldd	r19, Y+6	; 0x06
 1e4:	82 0f       	add	r24, r18
 1e6:	93 1f       	adc	r25, r19
 1e8:	fc 01       	movw	r30, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	0e 94 c8 00 	call	0x190	; 0x190 <SPI_Send_Data>
}

void SPI_Send_Large_Data(char *data) {
	/* Find the length of the data array */
	uint16_t len = 2;
	for(int i = 0; i < len; i++) {
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	89 83       	std	Y+1, r24	; 0x01
 1fa:	29 81       	ldd	r18, Y+1	; 0x01
 1fc:	3a 81       	ldd	r19, Y+2	; 0x02
 1fe:	8b 81       	ldd	r24, Y+3	; 0x03
 200:	9c 81       	ldd	r25, Y+4	; 0x04
 202:	28 17       	cp	r18, r24
 204:	39 07       	cpc	r19, r25
 206:	50 f3       	brcs	.-44     	; 0x1dc <SPI_Send_Large_Data+0x20>
		SPI_Send_Data(data[i]);
	}


 208:	26 96       	adiw	r28, 0x06	; 6
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
