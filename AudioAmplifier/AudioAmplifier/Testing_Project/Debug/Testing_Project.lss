
Testing_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000041c  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000caa  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000833  00000000  00000000  000012b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ed  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  000024d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004da  00000000  00000000  00002724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000444  00000000  00000000  00002bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00003042  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 84 01 	call	0x308	; 0x308 <main>
  8e:	0c 94 0c 02 	jmp	0x418	; 0x418 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2cInit>:
#include <avr/io.h>
#include "i2cLib.h"

void i2cInit(){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
    TWSR &= ~((1 << TWPS0) | (1 << TWPS1)); //prescaler set to 0
  9e:	89 eb       	ldi	r24, 0xB9	; 185
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	29 eb       	ldi	r18, 0xB9	; 185
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	2c 7f       	andi	r18, 0xFC	; 252
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
    TWBR = 72; //setting the bit rate to 400kHz
  b0:	88 eb       	ldi	r24, 0xB8	; 184
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	28 e4       	ldi	r18, 0x48	; 72
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
    TWCR |= (1 << TWEN); //i2c enable 
  ba:	8c eb       	ldi	r24, 0xBC	; 188
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2c eb       	ldi	r18, 0xBC	; 188
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	24 60       	ori	r18, 0x04	; 4
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <i2cStart>:

void i2cStart(){
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); //setting interrupt pin, generating starting condition and enabling i2c
  da:	8c eb       	ldi	r24, 0xBC	; 188
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	24 ea       	ldi	r18, 0xA4	; 164
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
    while (!(TWCR & (1 << TWINT))); //waiting for the transmission of start condition to end
  e4:	00 00       	nop
  e6:	8c eb       	ldi	r24, 0xBC	; 188
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 23       	and	r24, r24
  f0:	d4 f7       	brge	.-12     	; 0xe6 <i2cStart+0x14>
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <i2cStop>:

void i2cStop(){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); //setting interrupt pin, gen. stopping condition and enabling i2c 
 100:	8c eb       	ldi	r24, 0xBC	; 188
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	24 e9       	ldi	r18, 0x94	; 148
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <i2cWrite>:

void i2cWrite(unsigned char data){
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data; //putting data to data register
 11c:	8b eb       	ldi	r24, 0xBB	; 187
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	29 81       	ldd	r18, Y+1	; 0x01
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
    TWCR = (1 << TWINT) | (1 << TWEN); //setting interrupt pin and enabling i2c
 126:	8c eb       	ldi	r24, 0xBC	; 188
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	24 e8       	ldi	r18, 0x84	; 132
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
	while(!(TWCR & (1 << TWINT)));
 130:	00 00       	nop
 132:	8c eb       	ldi	r24, 0xBC	; 188
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	d4 f7       	brge	.-12     	; 0x132 <i2cWrite+0x22>
}
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <sendCmd>:
#include <string.h>
#include <stdio.h>
#include "LCD_lib.h"


void sendCmd(char data) {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	1f 92       	push	r1
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
 152:	0e 94 69 00 	call	0xd2	; 0xd2 <i2cStart>
    i2cWrite(SLA_W);
 156:	8c e7       	ldi	r24, 0x7C	; 124
 158:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(data);
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cStop();
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cStop>
}
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <sendData>:

void sendData(char data) {
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	1f 92       	push	r1
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
 180:	0e 94 69 00 	call	0xd2	; 0xd2 <i2cStart>
    i2cWrite(SLA_W);
 184:	8c e7       	ldi	r24, 0x7C	; 124
 186:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x40);
 18a:	80 e4       	ldi	r24, 0x40	; 64
 18c:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(data);
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cStop();
 196:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cStop>
}
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <initDisp>:

void initDisp() {
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << DDD3);
 1aa:	8a e2       	ldi	r24, 0x2A	; 42
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	2a e2       	ldi	r18, 0x2A	; 42
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	20 81       	ld	r18, Z
 1b6:	28 60       	ori	r18, 0x08	; 8
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
	PORTD |= (1 << PORTD3);
 1bc:	8b e2       	ldi	r24, 0x2B	; 43
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	2b e2       	ldi	r18, 0x2B	; 43
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	28 60       	ori	r18, 0x08	; 8
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
    i2cStart();
 1ce:	0e 94 69 00 	call	0xd2	; 0xd2 <i2cStart>
    i2cWrite(SLA_W);
 1d2:	8c e7       	ldi	r24, 0x7C	; 124
 1d4:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);//cmd
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x38);//8 bit bus, 2 line disp mode, normal mode
 1de:	88 e3       	ldi	r24, 0x38	; 56
 1e0:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x39);//8 bit bus, 2 line disp mode, extended mode
 1ea:	89 e3       	ldi	r24, 0x39	; 57
 1ec:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x14);//internal OSC freq
 1f0:	84 e1       	ldi	r24, 0x14	; 20
 1f2:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x7F);//contrast setting (Highest)
 1f6:	8f e7       	ldi	r24, 0x7F	; 127
 1f8:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x50);//set ICON address
 1fc:	80 e5       	ldi	r24, 0x50	; 80
 1fe:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x6C);//follower control
 202:	8c e6       	ldi	r24, 0x6C	; 108
 204:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x0C);//display ON
 208:	8c e0       	ldi	r24, 0x0C	; 12
 20a:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x01);//clear disp;ay
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cStop();
 214:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cStop>
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <write_first_line>:

void write_first_line(char *data, uint8_t menu) {
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	6a 97       	sbiw	r28, 0x1a	; 26
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	99 8f       	std	Y+25, r25	; 0x19
 234:	88 8f       	std	Y+24, r24	; 0x18
 236:	6a 8f       	std	Y+26, r22	; 0x1a
	uint16_t len = strlen(data);
 238:	88 8d       	ldd	r24, Y+24	; 0x18
 23a:	99 8d       	ldd	r25, Y+25	; 0x19
 23c:	0e 94 03 02 	call	0x406	; 0x406 <strlen>
 240:	9a 83       	std	Y+2, r25	; 0x02
 242:	89 83       	std	Y+1, r24	; 0x01
	char str[16] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
 244:	80 e1       	ldi	r24, 0x10	; 16
 246:	e0 e0       	ldi	r30, 0x00	; 0
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	de 01       	movw	r26, r28
 24c:	18 96       	adiw	r26, 0x08	; 8
 24e:	01 90       	ld	r0, Z+
 250:	0d 92       	st	X+, r0
 252:	8a 95       	dec	r24
 254:	e1 f7       	brne	.-8      	; 0x24e <write_first_line+0x30>
	uint16_t i = 0;
 256:	1c 82       	std	Y+4, r1	; 0x04
 258:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t j = 0;
 25a:	1e 82       	std	Y+6, r1	; 0x06
 25c:	1d 82       	std	Y+5, r1	; 0x05

	if(menu) {
 25e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 260:	88 23       	and	r24, r24
 262:	59 f0       	breq	.+22     	; 0x27a <write_first_line+0x5c>
		str[0] = '>';
 264:	8e e3       	ldi	r24, 0x3E	; 62
 266:	88 87       	std	Y+8, r24	; 0x08
		i = 1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	9c 83       	std	Y+4, r25	; 0x04
 26e:	8b 83       	std	Y+3, r24	; 0x03
		len++;
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	9a 81       	ldd	r25, Y+2	; 0x02
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	9a 83       	std	Y+2, r25	; 0x02
 278:	89 83       	std	Y+1, r24	; 0x01
	}

	for(i; i < len; i++) {
 27a:	1b c0       	rjmp	.+54     	; 0x2b2 <write_first_line+0x94>
		str[i] = data[j];
 27c:	28 8d       	ldd	r18, Y+24	; 0x18
 27e:	39 8d       	ldd	r19, Y+25	; 0x19
 280:	8d 81       	ldd	r24, Y+5	; 0x05
 282:	9e 81       	ldd	r25, Y+6	; 0x06
 284:	82 0f       	add	r24, r18
 286:	93 1f       	adc	r25, r19
 288:	fc 01       	movw	r30, r24
 28a:	40 81       	ld	r20, Z
 28c:	9e 01       	movw	r18, r28
 28e:	28 5f       	subi	r18, 0xF8	; 248
 290:	3f 4f       	sbci	r19, 0xFF	; 255
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	9c 81       	ldd	r25, Y+4	; 0x04
 296:	82 0f       	add	r24, r18
 298:	93 1f       	adc	r25, r19
 29a:	fc 01       	movw	r30, r24
 29c:	40 83       	st	Z, r20
		j++;
 29e:	8d 81       	ldd	r24, Y+5	; 0x05
 2a0:	9e 81       	ldd	r25, Y+6	; 0x06
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	9e 83       	std	Y+6, r25	; 0x06
 2a6:	8d 83       	std	Y+5, r24	; 0x05
		str[0] = '>';
		i = 1;
		len++;
	}

	for(i; i < len; i++) {
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	9c 81       	ldd	r25, Y+4	; 0x04
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	9c 83       	std	Y+4, r25	; 0x04
 2b0:	8b 83       	std	Y+3, r24	; 0x03
 2b2:	2b 81       	ldd	r18, Y+3	; 0x03
 2b4:	3c 81       	ldd	r19, Y+4	; 0x04
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ba:	28 17       	cp	r18, r24
 2bc:	39 07       	cpc	r19, r25
 2be:	f0 f2       	brcs	.-68     	; 0x27c <write_first_line+0x5e>
		str[i] = data[j];
		j++;
	}

	for (uint8_t i = 0x00; i <= 0x0F; i++){ //0x00-0x27 first line
 2c0:	1f 82       	std	Y+7, r1	; 0x07
 2c2:	16 c0       	rjmp	.+44     	; 0x2f0 <write_first_line+0xd2>
		sendCmd(0x00);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
		sendCmd(0x80 | i);
 2ca:	8f 81       	ldd	r24, Y+7	; 0x07
 2cc:	80 68       	ori	r24, 0x80	; 128
 2ce:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
		sendData(str[i]);
 2d2:	8f 81       	ldd	r24, Y+7	; 0x07
 2d4:	88 2f       	mov	r24, r24
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	9e 01       	movw	r18, r28
 2da:	28 5f       	subi	r18, 0xF8	; 248
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	82 0f       	add	r24, r18
 2e0:	93 1f       	adc	r25, r19
 2e2:	fc 01       	movw	r30, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	0e 94 ba 00 	call	0x174	; 0x174 <sendData>
	for(i; i < len; i++) {
		str[i] = data[j];
		j++;
	}

	for (uint8_t i = 0x00; i <= 0x0F; i++){ //0x00-0x27 first line
 2ea:	8f 81       	ldd	r24, Y+7	; 0x07
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	8f 83       	std	Y+7, r24	; 0x07
 2f0:	8f 81       	ldd	r24, Y+7	; 0x07
 2f2:	80 31       	cpi	r24, 0x10	; 16
 2f4:	38 f3       	brcs	.-50     	; 0x2c4 <write_first_line+0xa6>
		sendCmd(0x00);
		sendCmd(0x80 | i);
		sendData(str[i]);
	}
}
 2f6:	6a 96       	adiw	r28, 0x1a	; 26
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <main>:
#include "i2cLib.h"
#include "std_lib.h"
#include "LCD_lib.h"

int main(void)
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	28 97       	sbiw	r28, 0x08	; 8
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
	i2cInit();
 31c:	0e 94 4b 00 	call	0x96	; 0x96 <i2cInit>
	initDisp();
 320:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <initDisp>

	delay(10);
 324:	6a e0       	ldi	r22, 0x0A	; 10
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 b0 01 	call	0x360	; 0x360 <delay>

	char hello[8] = {72, 69, 76, 76, 79, 0};
 330:	28 e0       	ldi	r18, 0x08	; 8
 332:	ce 01       	movw	r24, r28
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	fc 01       	movw	r30, r24
 338:	32 2f       	mov	r19, r18
 33a:	11 92       	st	Z+, r1
 33c:	3a 95       	dec	r19
 33e:	e9 f7       	brne	.-6      	; 0x33a <main+0x32>
 340:	88 e4       	ldi	r24, 0x48	; 72
 342:	89 83       	std	Y+1, r24	; 0x01
 344:	85 e4       	ldi	r24, 0x45	; 69
 346:	8a 83       	std	Y+2, r24	; 0x02
 348:	8c e4       	ldi	r24, 0x4C	; 76
 34a:	8b 83       	std	Y+3, r24	; 0x03
 34c:	8c e4       	ldi	r24, 0x4C	; 76
 34e:	8c 83       	std	Y+4, r24	; 0x04
 350:	8f e4       	ldi	r24, 0x4F	; 79
 352:	8d 83       	std	Y+5, r24	; 0x05

	write_first_line(hello, 0);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	0e 94 0f 01 	call	0x21e	; 0x21e <write_first_line>

    while (1) {
    }
 35e:	ff cf       	rjmp	.-2      	; 0x35e <main+0x56>

00000360 <delay>:
	}

}

/* Delay function by Farzad */
void delay(uint32_t ms) {
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	28 97       	sbiw	r28, 0x08	; 8
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	6d 83       	std	Y+5, r22	; 0x05
 376:	7e 83       	std	Y+6, r23	; 0x06
 378:	8f 83       	std	Y+7, r24	; 0x07
 37a:	98 87       	std	Y+8, r25	; 0x08
	uint32_t i = ms * 480;
 37c:	2d 81       	ldd	r18, Y+5	; 0x05
 37e:	3e 81       	ldd	r19, Y+6	; 0x06
 380:	4f 81       	ldd	r20, Y+7	; 0x07
 382:	58 85       	ldd	r21, Y+8	; 0x08
 384:	80 ee       	ldi	r24, 0xE0	; 224
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	dc 01       	movw	r26, r24
 38a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__muluhisi3>
 38e:	dc 01       	movw	r26, r24
 390:	cb 01       	movw	r24, r22
 392:	89 83       	std	Y+1, r24	; 0x01
 394:	9a 83       	std	Y+2, r25	; 0x02
 396:	ab 83       	std	Y+3, r26	; 0x03
 398:	bc 83       	std	Y+4, r27	; 0x04
	while(--i > 0);
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	9a 81       	ldd	r25, Y+2	; 0x02
 39e:	ab 81       	ldd	r26, Y+3	; 0x03
 3a0:	bc 81       	ldd	r27, Y+4	; 0x04
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	a1 09       	sbc	r26, r1
 3a6:	b1 09       	sbc	r27, r1
 3a8:	89 83       	std	Y+1, r24	; 0x01
 3aa:	9a 83       	std	Y+2, r25	; 0x02
 3ac:	ab 83       	std	Y+3, r26	; 0x03
 3ae:	bc 83       	std	Y+4, r27	; 0x04
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	9a 81       	ldd	r25, Y+2	; 0x02
 3b4:	ab 81       	ldd	r26, Y+3	; 0x03
 3b6:	bc 81       	ldd	r27, Y+4	; 0x04
 3b8:	89 2b       	or	r24, r25
 3ba:	8a 2b       	or	r24, r26
 3bc:	8b 2b       	or	r24, r27
 3be:	69 f7       	brne	.-38     	; 0x39a <delay+0x3a>
 3c0:	28 96       	adiw	r28, 0x08	; 8
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <__muluhisi3>:
 3d2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__umulhisi3>
 3d6:	a5 9f       	mul	r26, r21
 3d8:	90 0d       	add	r25, r0
 3da:	b4 9f       	mul	r27, r20
 3dc:	90 0d       	add	r25, r0
 3de:	a4 9f       	mul	r26, r20
 3e0:	80 0d       	add	r24, r0
 3e2:	91 1d       	adc	r25, r1
 3e4:	11 24       	eor	r1, r1
 3e6:	08 95       	ret

000003e8 <__umulhisi3>:
 3e8:	a2 9f       	mul	r26, r18
 3ea:	b0 01       	movw	r22, r0
 3ec:	b3 9f       	mul	r27, r19
 3ee:	c0 01       	movw	r24, r0
 3f0:	a3 9f       	mul	r26, r19
 3f2:	70 0d       	add	r23, r0
 3f4:	81 1d       	adc	r24, r1
 3f6:	11 24       	eor	r1, r1
 3f8:	91 1d       	adc	r25, r1
 3fa:	b2 9f       	mul	r27, r18
 3fc:	70 0d       	add	r23, r0
 3fe:	81 1d       	adc	r24, r1
 400:	11 24       	eor	r1, r1
 402:	91 1d       	adc	r25, r1
 404:	08 95       	ret

00000406 <strlen>:
 406:	fc 01       	movw	r30, r24
 408:	01 90       	ld	r0, Z+
 40a:	00 20       	and	r0, r0
 40c:	e9 f7       	brne	.-6      	; 0x408 <strlen+0x2>
 40e:	80 95       	com	r24
 410:	90 95       	com	r25
 412:	8e 0f       	add	r24, r30
 414:	9f 1f       	adc	r25, r31
 416:	08 95       	ret

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>
