
Testing_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a08  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000812  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000670  00000000  00000000  000016c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00001d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000467  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000291  00000000  00000000  0000231f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  78:	0c 94 9c 01 	jmp	0x338	; 0x338 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Init_Pot_Meter>:
 
#include <avr/io.h>
#include "Dig_Pot_Lib.h"
#include "SPI_Lib.h"

void Init_Pot_Meter() {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	SPI_Init_Master();
  88:	0e 94 b3 00 	call	0x166	; 0x166 <SPI_Init_Master>
	CS_D |= (1 << CS_0) | (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
  8c:	84 e2       	ldi	r24, 0x24	; 36
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	24 e2       	ldi	r18, 0x24	; 36
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	20 81       	ld	r18, Z
  98:	27 61       	ori	r18, 0x17	; 23
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	CS |= (1 << CS_0) | (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
  9e:	85 e2       	ldi	r24, 0x25	; 37
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	25 e2       	ldi	r18, 0x25	; 37
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	27 61       	ori	r18, 0x17	; 23
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
}
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <Write_Pot_Meter>:

void Write_Pot_Meter(uint8_t value, uint8_t CS_pin) {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	00 d0       	rcall	.+0      	; 0xbc <Write_Pot_Meter+0x6>
  bc:	00 d0       	rcall	.+0      	; 0xbe <Write_Pot_Meter+0x8>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	8b 83       	std	Y+3, r24	; 0x03
  c4:	6c 83       	std	Y+4, r22	; 0x04
	CS &= ~(1 << CS_pin);
  c6:	85 e2       	ldi	r24, 0x25	; 37
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	25 e2       	ldi	r18, 0x25	; 37
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	62 2f       	mov	r22, r18
  d4:	2c 81       	ldd	r18, Y+4	; 0x04
  d6:	42 2f       	mov	r20, r18
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Write_Pot_Meter+0x2e>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	4a 95       	dec	r20
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <Write_Pot_Meter+0x2a>
  e8:	20 95       	com	r18
  ea:	26 23       	and	r18, r22
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
	uint8_t data[2] = {0b00000000, value};
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	8a 83       	std	Y+2, r24	; 0x02
	SPI_Send_Large_Data(data);
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <SPI_Send_Large_Data>
	CS |= (1 << CS_pin);
  fe:	85 e2       	ldi	r24, 0x25	; 37
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	25 e2       	ldi	r18, 0x25	; 37
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	62 2f       	mov	r22, r18
 10c:	2c 81       	ldd	r18, Y+4	; 0x04
 10e:	42 2f       	mov	r20, r18
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <Write_Pot_Meter+0x66>
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	4a 95       	dec	r20
 11e:	e2 f7       	brpl	.-8      	; 0x118 <Write_Pot_Meter+0x62>
 120:	26 2b       	or	r18, r22
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
} 
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <main>:
#include "Dig_Pot_Lib.h"
#include "std_lib.h"


int main(void)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
	Init_Pot_Meter();
 13c:	0e 94 40 00 	call	0x80	; 0x80 <Init_Pot_Meter>

    while (1) {
		Write_Pot_Meter(255, CS_2);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <Write_Pot_Meter>
		Write_Pot_Meter(0, CS_1);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 5b 00 	call	0xb6	; 0xb6 <Write_Pot_Meter>
		Write_Pot_Meter(90, CS_0);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	8a e5       	ldi	r24, 0x5A	; 90
 154:	0e 94 5b 00 	call	0xb6	; 0xb6 <Write_Pot_Meter>
		delay(300);
 158:	6c e2       	ldi	r22, 0x2C	; 44
 15a:	71 e0       	ldi	r23, 0x01	; 1
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 49 01 	call	0x292	; 0x292 <delay>
    }
 164:	ed cf       	rjmp	.-38     	; 0x140 <main+0xc>

00000166 <SPI_Init_Master>:
//MISO == "Master In Slave Out" || SPI
//SCK == SPI Clock Line			|| SCK
//SS == "Slave Select			|| CS == "Chip Select"
 
 
void SPI_Init_Master() {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	/* Set the MOSI & SCK as Output lines */
	DDRB |= (1 << PINB3) | (1 << PINB5);
 16e:	84 e2       	ldi	r24, 0x24	; 36
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	24 e2       	ldi	r18, 0x24	; 36
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	20 81       	ld	r18, Z
 17a:	28 62       	ori	r18, 0x28	; 40
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
	/* Set the SCK pin to low */
	PORTB &= ~(1 << PINB5);
 180:	85 e2       	ldi	r24, 0x25	; 37
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	25 e2       	ldi	r18, 0x25	; 37
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	20 81       	ld	r18, Z
 18c:	2f 7d       	andi	r18, 0xDF	; 223
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
	
	/* Enable SPI */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0); 
 192:	8c e4       	ldi	r24, 0x4C	; 76
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	2c e4       	ldi	r18, 0x4C	; 76
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	20 81       	ld	r18, Z
 19e:	21 65       	ori	r18, 0x51	; 81
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <SPI_Send_Data>:

void SPI_Send_Data(uint8_t data) {
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	1f 92       	push	r1
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	89 83       	std	Y+1, r24	; 0x01
	/* Place the data in the transmitter buffer */
	SPDR = data;
 1b6:	8e e4       	ldi	r24, 0x4E	; 78
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	29 81       	ldd	r18, Y+1	; 0x01
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18

	/* Wait for the transmitter to complete */
	while(!(SPSR & (1 << SPIF)));
 1c0:	00 00       	nop
 1c2:	8d e4       	ldi	r24, 0x4D	; 77
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	d4 f7       	brge	.-12     	; 0x1c2 <SPI_Send_Data+0x18>
}
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <SPI_Send_Large_Data>:

void SPI_Send_Large_Data(uint8_t *data) {
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	2a 97       	sbiw	r28, 0x0a	; 10
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	9a 87       	std	Y+10, r25	; 0x0a
 1f4:	89 87       	std	Y+9, r24	; 0x09
	uint16_t len = 2;
	uint8_t spi_data[len];
	for(int i = 0; i < len; i++) {
		SPI_Send_Data(data[i]);
	}
 1f6:	0d b7       	in	r16, 0x3d	; 61
 1f8:	1e b7       	in	r17, 0x3e	; 62
 1fa:	8d b7       	in	r24, 0x3d	; 61
 1fc:	9e b7       	in	r25, 0x3e	; 62
 1fe:	7c 01       	movw	r14, r24
	while(!(SPSR & (1 << SPIF)));
}

void SPI_Send_Large_Data(uint8_t *data) {
	/* Find the length of the data array */
	uint16_t len = 2;
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	9c 83       	std	Y+4, r25	; 0x04
 206:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t spi_data[len];
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	9c 81       	ldd	r25, Y+4	; 0x04
 20c:	9c 01       	movw	r18, r24
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	31 09       	sbc	r19, r1
 212:	3e 83       	std	Y+6, r19	; 0x06
 214:	2d 83       	std	Y+5, r18	; 0x05
 216:	2d b7       	in	r18, 0x3d	; 61
 218:	3e b7       	in	r19, 0x3e	; 62
 21a:	28 1b       	sub	r18, r24
 21c:	39 0b       	sbc	r19, r25
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	3e bf       	out	0x3e, r19	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	2d bf       	out	0x3d, r18	; 61
 228:	8d b7       	in	r24, 0x3d	; 61
 22a:	9e b7       	in	r25, 0x3e	; 62
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	98 87       	std	Y+8, r25	; 0x08
 230:	8f 83       	std	Y+7, r24	; 0x07
	for(int i = 0; i < len; i++) {
 232:	1a 82       	std	Y+2, r1	; 0x02
 234:	19 82       	std	Y+1, r1	; 0x01
 236:	0f c0       	rjmp	.+30     	; 0x256 <SPI_Send_Large_Data+0x80>
		SPI_Send_Data(data[i]);
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	9a 81       	ldd	r25, Y+2	; 0x02
 23c:	29 85       	ldd	r18, Y+9	; 0x09
 23e:	3a 85       	ldd	r19, Y+10	; 0x0a
 240:	82 0f       	add	r24, r18
 242:	93 1f       	adc	r25, r19
 244:	fc 01       	movw	r30, r24
 246:	80 81       	ld	r24, Z
 248:	0e 94 d5 00 	call	0x1aa	; 0x1aa <SPI_Send_Data>

void SPI_Send_Large_Data(uint8_t *data) {
	/* Find the length of the data array */
	uint16_t len = 2;
	uint8_t spi_data[len];
	for(int i = 0; i < len; i++) {
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	9a 81       	ldd	r25, Y+2	; 0x02
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	9a 83       	std	Y+2, r25	; 0x02
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	29 81       	ldd	r18, Y+1	; 0x01
 258:	3a 81       	ldd	r19, Y+2	; 0x02
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	9c 81       	ldd	r25, Y+4	; 0x04
 25e:	28 17       	cp	r18, r24
 260:	39 07       	cpc	r19, r25
 262:	50 f3       	brcs	.-44     	; 0x238 <SPI_Send_Large_Data+0x62>
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	fe be       	out	0x3e, r15	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	ed be       	out	0x3d, r14	; 61
		SPI_Send_Data(data[i]);
	}
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	1e bf       	out	0x3e, r17	; 62
 274:	0f be       	out	0x3f, r0	; 63
 276:	0d bf       	out	0x3d, r16	; 61
 278:	2a 96       	adiw	r28, 0x0a	; 10
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	08 95       	ret

00000292 <delay>:
	}

}

/* Delay function by Farzad */
void delay(uint32_t ms) {
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
 29a:	28 97       	sbiw	r28, 0x08	; 8
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	6d 83       	std	Y+5, r22	; 0x05
 2a8:	7e 83       	std	Y+6, r23	; 0x06
 2aa:	8f 83       	std	Y+7, r24	; 0x07
 2ac:	98 87       	std	Y+8, r25	; 0x08
	uint32_t i = ms * 480;
 2ae:	2d 81       	ldd	r18, Y+5	; 0x05
 2b0:	3e 81       	ldd	r19, Y+6	; 0x06
 2b2:	4f 81       	ldd	r20, Y+7	; 0x07
 2b4:	58 85       	ldd	r21, Y+8	; 0x08
 2b6:	80 ee       	ldi	r24, 0xE0	; 224
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	dc 01       	movw	r26, r24
 2bc:	0e 94 82 01 	call	0x304	; 0x304 <__muluhisi3>
 2c0:	dc 01       	movw	r26, r24
 2c2:	cb 01       	movw	r24, r22
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	9a 83       	std	Y+2, r25	; 0x02
 2c8:	ab 83       	std	Y+3, r26	; 0x03
 2ca:	bc 83       	std	Y+4, r27	; 0x04
	while(--i > 0);
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	9a 81       	ldd	r25, Y+2	; 0x02
 2d0:	ab 81       	ldd	r26, Y+3	; 0x03
 2d2:	bc 81       	ldd	r27, Y+4	; 0x04
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	a1 09       	sbc	r26, r1
 2d8:	b1 09       	sbc	r27, r1
 2da:	89 83       	std	Y+1, r24	; 0x01
 2dc:	9a 83       	std	Y+2, r25	; 0x02
 2de:	ab 83       	std	Y+3, r26	; 0x03
 2e0:	bc 83       	std	Y+4, r27	; 0x04
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	ab 81       	ldd	r26, Y+3	; 0x03
 2e8:	bc 81       	ldd	r27, Y+4	; 0x04
 2ea:	89 2b       	or	r24, r25
 2ec:	8a 2b       	or	r24, r26
 2ee:	8b 2b       	or	r24, r27
 2f0:	69 f7       	brne	.-38     	; 0x2cc <delay+0x3a>
 2f2:	28 96       	adiw	r28, 0x08	; 8
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <__muluhisi3>:
 304:	0e 94 8d 01 	call	0x31a	; 0x31a <__umulhisi3>
 308:	a5 9f       	mul	r26, r21
 30a:	90 0d       	add	r25, r0
 30c:	b4 9f       	mul	r27, r20
 30e:	90 0d       	add	r25, r0
 310:	a4 9f       	mul	r26, r20
 312:	80 0d       	add	r24, r0
 314:	91 1d       	adc	r25, r1
 316:	11 24       	eor	r1, r1
 318:	08 95       	ret

0000031a <__umulhisi3>:
 31a:	a2 9f       	mul	r26, r18
 31c:	b0 01       	movw	r22, r0
 31e:	b3 9f       	mul	r27, r19
 320:	c0 01       	movw	r24, r0
 322:	a3 9f       	mul	r26, r19
 324:	70 0d       	add	r23, r0
 326:	81 1d       	adc	r24, r1
 328:	11 24       	eor	r1, r1
 32a:	91 1d       	adc	r25, r1
 32c:	b2 9f       	mul	r27, r18
 32e:	70 0d       	add	r23, r0
 330:	81 1d       	adc	r24, r1
 332:	11 24       	eor	r1, r1
 334:	91 1d       	adc	r25, r1
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
