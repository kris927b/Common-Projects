
Testing_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af5  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000757  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000729  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  00001cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048f  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000363  00000000  00000000  0000232f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002692  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  8e:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2cInit>:
#include <avr/io.h>
#include "i2cLib.h"

void i2cInit(){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
    TWSR &= ~((1 << TWPS0) | (1 << TWPS1)); //prescaler set to 0
  9e:	89 eb       	ldi	r24, 0xB9	; 185
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	29 eb       	ldi	r18, 0xB9	; 185
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	2c 7f       	andi	r18, 0xFC	; 252
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
    TWBR = 12; //setting the bit rate to 400kHz
  b0:	88 eb       	ldi	r24, 0xB8	; 184
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2c e0       	ldi	r18, 0x0C	; 12
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
    TWCR |= (1 << TWEN); //i2c enable 
  ba:	8c eb       	ldi	r24, 0xBC	; 188
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2c eb       	ldi	r18, 0xBC	; 188
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	24 60       	ori	r18, 0x04	; 4
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <i2cStart>:

void i2cStart(){
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); //setting interrupt pin, generating starting condition and enabling i2c
  da:	8c eb       	ldi	r24, 0xBC	; 188
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	24 ea       	ldi	r18, 0xA4	; 164
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
    while (!(TWCR & (1 << TWINT))); //waiting for the transmission of start condition to end
  e4:	00 00       	nop
  e6:	8c eb       	ldi	r24, 0xBC	; 188
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 23       	and	r24, r24
  f0:	d4 f7       	brge	.-12     	; 0xe6 <i2cStart+0x14>
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <i2cStop>:

void i2cStop(){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); //setting interrupt pin, gen. stopping condition and enabling i2c 
 100:	8c eb       	ldi	r24, 0xBC	; 188
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	24 e9       	ldi	r18, 0x94	; 148
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <i2cWrite>:

void i2cWrite(unsigned char data){
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data; //putting data to data register
 11c:	8b eb       	ldi	r24, 0xBB	; 187
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	29 81       	ldd	r18, Y+1	; 0x01
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
    TWCR = (1 << TWINT) | (1 << TWEN); //setting interrupt pin and enabling i2c
 126:	8c eb       	ldi	r24, 0xBC	; 188
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	24 e8       	ldi	r18, 0x84	; 132
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
	while(!(TWCR & (1 << TWINT)));
 130:	00 00       	nop
 132:	8c eb       	ldi	r24, 0xBC	; 188
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	d4 f7       	brge	.-12     	; 0x132 <i2cWrite+0x22>
}
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <initDisp>:
    i2cWrite(0x40);
    i2cWrite(data);
    i2cStop();
}

void initDisp() {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << DDD3);
 14e:	8a e2       	ldi	r24, 0x2A	; 42
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	2a e2       	ldi	r18, 0x2A	; 42
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	28 60       	ori	r18, 0x08	; 8
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
	PORTD |= (1 << PORTD3);
 160:	8b e2       	ldi	r24, 0x2B	; 43
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	2b e2       	ldi	r18, 0x2B	; 43
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	20 81       	ld	r18, Z
 16c:	28 60       	ori	r18, 0x08	; 8
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
    i2cStart();
 172:	0e 94 69 00 	call	0xd2	; 0xd2 <i2cStart>
    i2cWrite(SLA_W);
 176:	8c e7       	ldi	r24, 0x7C	; 124
 178:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);//cmd
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x38);//8 bit bus, 2 line disp mode, normal mode
 182:	88 e3       	ldi	r24, 0x38	; 56
 184:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x39);//8 bit bus, 2 line disp mode, extended mode
 18e:	89 e3       	ldi	r24, 0x39	; 57
 190:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x14);//internal OSC freq
 194:	84 e1       	ldi	r24, 0x14	; 20
 196:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x7F);//contrast setting (Highest)
 19a:	8f e7       	ldi	r24, 0x7F	; 127
 19c:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x50);//set ICON address
 1a0:	80 e5       	ldi	r24, 0x50	; 80
 1a2:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x6C);//follower control
 1a6:	8c e6       	ldi	r24, 0x6C	; 108
 1a8:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x0C);//display ON
 1ac:	8c e0       	ldi	r24, 0x0C	; 12
 1ae:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x01);//clear disp;ay
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cStop();
 1b8:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cStop>
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <main>:
#include "i2cLib.h"
#include "LCD_lib.h"


int main(void)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
	i2cInit();
 1ca:	0e 94 4b 00 	call	0x96	; 0x96 <i2cInit>
	initDisp();
 1ce:	0e 94 a3 00 	call	0x146	; 0x146 <initDisp>

    while (1) {
		
    }
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <main+0x10>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
