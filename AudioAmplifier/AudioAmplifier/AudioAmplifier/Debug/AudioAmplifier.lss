
AudioAmplifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00001630  000016c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001630  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080017c  0080017c  00001740  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001188  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7f  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fcb  00000000  00000000  00003573  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000524  00000000  00000000  00004540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000702  00000000  00000000  00004a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009fe  00000000  00000000  00005166  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005b64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_3>
      10:	0c 94 b3 04 	jmp	0x966	; 0x966 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e3       	ldi	r30, 0x30	; 48
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 37       	cpi	r26, 0x7C	; 124
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e7       	ldi	r26, 0x7C	; 124
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 3a       	cpi	r26, 0xA4	; 164
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <main>
      9e:	0c 94 16 0b 	jmp	0x162c	; 0x162c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init_Pot_Meter>:
 
#include <avr/io.h>
#include "Dig_Pot_Lib.h"
#include "SPI_Lib.h"

void Init_Pot_Meter() {
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	SPI_Init_Master();
      ae:	0e 94 a3 03 	call	0x746	; 0x746 <SPI_Init_Master>
	CS_D |= (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
      b2:	84 e2       	ldi	r24, 0x24	; 36
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	24 e2       	ldi	r18, 0x24	; 36
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	f9 01       	movw	r30, r18
      bc:	20 81       	ld	r18, Z
      be:	27 60       	ori	r18, 0x07	; 7
      c0:	fc 01       	movw	r30, r24
      c2:	20 83       	st	Z, r18
	CS |= (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
      c4:	85 e2       	ldi	r24, 0x25	; 37
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	25 e2       	ldi	r18, 0x25	; 37
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	f9 01       	movw	r30, r18
      ce:	20 81       	ld	r18, Z
      d0:	27 60       	ori	r18, 0x07	; 7
      d2:	fc 01       	movw	r30, r24
      d4:	20 83       	st	Z, r18
}
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <i2cInit>:
#include <avr/io.h>
#include "i2cLib.h"

void i2cInit(){
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
    TWSR &= ~((1 << TWPS0) | (1 << TWPS1)); //prescaler set to 0
      e4:	89 eb       	ldi	r24, 0xB9	; 185
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	29 eb       	ldi	r18, 0xB9	; 185
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	2c 7f       	andi	r18, 0xFC	; 252
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
    TWBR = 12; //setting the bit rate to 400kHz
      f6:	88 eb       	ldi	r24, 0xB8	; 184
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2c e0       	ldi	r18, 0x0C	; 12
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18
    TWCR |= (1 << TWEN); //i2c enable 
     100:	8c eb       	ldi	r24, 0xBC	; 188
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	2c eb       	ldi	r18, 0xBC	; 188
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	24 60       	ori	r18, 0x04	; 4
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
}
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <i2cStart>:

void i2cStart(){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); //setting interrupt pin, generating starting condition and enabling i2c
     120:	8c eb       	ldi	r24, 0xBC	; 188
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	24 ea       	ldi	r18, 0xA4	; 164
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
    while (!(TWCR & (1 << TWINT))); //waiting for the transmission of start condition to end
     12a:	00 00       	nop
     12c:	8c eb       	ldi	r24, 0xBC	; 188
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	fc 01       	movw	r30, r24
     132:	80 81       	ld	r24, Z
     134:	88 23       	and	r24, r24
     136:	d4 f7       	brge	.-12     	; 0x12c <i2cStart+0x14>
}
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <i2cStop>:

void i2cStop(){
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); //setting interrupt pin, gen. stopping condition and enabling i2c 
     146:	8c eb       	ldi	r24, 0xBC	; 188
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	24 e9       	ldi	r18, 0x94	; 148
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
}
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <i2cWrite>:

void i2cWrite(unsigned char data){
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	1f 92       	push	r1
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data; //putting data to data register
     162:	8b eb       	ldi	r24, 0xBB	; 187
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	29 81       	ldd	r18, Y+1	; 0x01
     168:	fc 01       	movw	r30, r24
     16a:	20 83       	st	Z, r18
    TWCR = (1 << TWINT) | (1 << TWEN); //setting interrupt pin and enabling i2c
     16c:	8c eb       	ldi	r24, 0xBC	; 188
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	24 e8       	ldi	r18, 0x84	; 132
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
	while(!(TWCR & (1 << TWINT)));
     176:	00 00       	nop
     178:	8c eb       	ldi	r24, 0xBC	; 188
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	fc 01       	movw	r30, r24
     17e:	80 81       	ld	r24, Z
     180:	88 23       	and	r24, r24
     182:	d4 f7       	brge	.-12     	; 0x178 <i2cWrite+0x22>
}
     184:	0f 90       	pop	r0
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <sendCmd>:
#include <string.h>
#include <stdio.h>
#include "LCD_lib.h"


void sendCmd(char data) {
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	1f 92       	push	r1
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
     198:	0e 94 8c 00 	call	0x118	; 0x118 <i2cStart>
    i2cWrite(SLA_W);
     19c:	8c e7       	ldi	r24, 0x7C	; 124
     19e:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x00);
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(data);
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cStop();
     1ae:	0e 94 9f 00 	call	0x13e	; 0x13e <i2cStop>
}
     1b2:	0f 90       	pop	r0
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <sendData>:

void sendData(char data) {
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	1f 92       	push	r1
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
     1c6:	0e 94 8c 00 	call	0x118	; 0x118 <i2cStart>
    i2cWrite(SLA_W);
     1ca:	8c e7       	ldi	r24, 0x7C	; 124
     1cc:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x40);
     1d0:	80 e4       	ldi	r24, 0x40	; 64
     1d2:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(data);
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cStop();
     1dc:	0e 94 9f 00 	call	0x13e	; 0x13e <i2cStop>
}
     1e0:	0f 90       	pop	r0
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <initDisp>:

void initDisp() {
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << DDD3);
     1f0:	8a e2       	ldi	r24, 0x2A	; 42
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	2a e2       	ldi	r18, 0x2A	; 42
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	f9 01       	movw	r30, r18
     1fa:	20 81       	ld	r18, Z
     1fc:	28 60       	ori	r18, 0x08	; 8
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18
	PORTD |= (1 << PORTD3);
     202:	8b e2       	ldi	r24, 0x2B	; 43
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	2b e2       	ldi	r18, 0x2B	; 43
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	f9 01       	movw	r30, r18
     20c:	20 81       	ld	r18, Z
     20e:	28 60       	ori	r18, 0x08	; 8
     210:	fc 01       	movw	r30, r24
     212:	20 83       	st	Z, r18
    i2cStart();
     214:	0e 94 8c 00 	call	0x118	; 0x118 <i2cStart>
    i2cWrite(SLA_W);
     218:	8c e7       	ldi	r24, 0x7C	; 124
     21a:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x00);//cmd
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x38);//8 bit bus, 2 line disp mode, normal mode
     224:	88 e3       	ldi	r24, 0x38	; 56
     226:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x00);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x39);//8 bit bus, 2 line disp mode, extended mode
     230:	89 e3       	ldi	r24, 0x39	; 57
     232:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x14);//internal OSC freq
     236:	84 e1       	ldi	r24, 0x14	; 20
     238:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x7F);//contrast setting (Highest)
     23c:	8f e7       	ldi	r24, 0x7F	; 127
     23e:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x50);//set ICON address
     242:	80 e5       	ldi	r24, 0x50	; 80
     244:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x6C);//follower control
     248:	8c e6       	ldi	r24, 0x6C	; 108
     24a:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x0C);//display ON
     24e:	8c e0       	ldi	r24, 0x0C	; 12
     250:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cWrite(0x01);//clear disp;ay
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 ab 00 	call	0x156	; 0x156 <i2cWrite>
    i2cStop();
     25a:	0e 94 9f 00 	call	0x13e	; 0x13e <i2cStop>
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <write_first_line>:

void write_first_line(char *data, uint8_t menu) {
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	6a 97       	sbiw	r28, 0x1a	; 26
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	99 8f       	std	Y+25, r25	; 0x19
     27a:	88 8f       	std	Y+24, r24	; 0x18
     27c:	6a 8f       	std	Y+26, r22	; 0x1a
	uint16_t len = strlen(data);
     27e:	88 8d       	ldd	r24, Y+24	; 0x18
     280:	99 8d       	ldd	r25, Y+25	; 0x19
     282:	0e 94 35 08 	call	0x106a	; 0x106a <strlen>
     286:	9a 83       	std	Y+2, r25	; 0x02
     288:	89 83       	std	Y+1, r24	; 0x01
	char str[16] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
     28a:	80 e1       	ldi	r24, 0x10	; 16
     28c:	e8 e1       	ldi	r30, 0x18	; 24
     28e:	f1 e0       	ldi	r31, 0x01	; 1
     290:	de 01       	movw	r26, r28
     292:	18 96       	adiw	r26, 0x08	; 8
     294:	01 90       	ld	r0, Z+
     296:	0d 92       	st	X+, r0
     298:	8a 95       	dec	r24
     29a:	e1 f7       	brne	.-8      	; 0x294 <write_first_line+0x30>
	uint16_t i = 0;
     29c:	1c 82       	std	Y+4, r1	; 0x04
     29e:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t j = 0;
     2a0:	1e 82       	std	Y+6, r1	; 0x06
     2a2:	1d 82       	std	Y+5, r1	; 0x05

	if(menu) {
     2a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     2a6:	88 23       	and	r24, r24
     2a8:	59 f0       	breq	.+22     	; 0x2c0 <write_first_line+0x5c>
		str[0] = '\x7E';
     2aa:	8e e7       	ldi	r24, 0x7E	; 126
     2ac:	88 87       	std	Y+8, r24	; 0x08
		i = 1;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	9c 83       	std	Y+4, r25	; 0x04
     2b4:	8b 83       	std	Y+3, r24	; 0x03
		len++;
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	9a 83       	std	Y+2, r25	; 0x02
     2be:	89 83       	std	Y+1, r24	; 0x01
	}

	for(i; i < len; i++) {
     2c0:	1b c0       	rjmp	.+54     	; 0x2f8 <write_first_line+0x94>
		str[i] = data[j];
     2c2:	28 8d       	ldd	r18, Y+24	; 0x18
     2c4:	39 8d       	ldd	r19, Y+25	; 0x19
     2c6:	8d 81       	ldd	r24, Y+5	; 0x05
     2c8:	9e 81       	ldd	r25, Y+6	; 0x06
     2ca:	82 0f       	add	r24, r18
     2cc:	93 1f       	adc	r25, r19
     2ce:	fc 01       	movw	r30, r24
     2d0:	40 81       	ld	r20, Z
     2d2:	9e 01       	movw	r18, r28
     2d4:	28 5f       	subi	r18, 0xF8	; 248
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	8b 81       	ldd	r24, Y+3	; 0x03
     2da:	9c 81       	ldd	r25, Y+4	; 0x04
     2dc:	82 0f       	add	r24, r18
     2de:	93 1f       	adc	r25, r19
     2e0:	fc 01       	movw	r30, r24
     2e2:	40 83       	st	Z, r20
		j++;
     2e4:	8d 81       	ldd	r24, Y+5	; 0x05
     2e6:	9e 81       	ldd	r25, Y+6	; 0x06
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	9e 83       	std	Y+6, r25	; 0x06
     2ec:	8d 83       	std	Y+5, r24	; 0x05
		str[0] = '\x7E';
		i = 1;
		len++;
	}

	for(i; i < len; i++) {
     2ee:	8b 81       	ldd	r24, Y+3	; 0x03
     2f0:	9c 81       	ldd	r25, Y+4	; 0x04
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	9c 83       	std	Y+4, r25	; 0x04
     2f6:	8b 83       	std	Y+3, r24	; 0x03
     2f8:	2b 81       	ldd	r18, Y+3	; 0x03
     2fa:	3c 81       	ldd	r19, Y+4	; 0x04
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	28 17       	cp	r18, r24
     302:	39 07       	cpc	r19, r25
     304:	f0 f2       	brcs	.-68     	; 0x2c2 <write_first_line+0x5e>
		str[i] = data[j];
		j++;
	}

	for (uint8_t i = 0x00; i <= 0x0F; i++){ //0x00-0x27 first line
     306:	1f 82       	std	Y+7, r1	; 0x07
     308:	16 c0       	rjmp	.+44     	; 0x336 <write_first_line+0xd2>
		sendCmd(0x00);
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	0e 94 c6 00 	call	0x18c	; 0x18c <sendCmd>
		sendCmd(0x80 | i);
     310:	8f 81       	ldd	r24, Y+7	; 0x07
     312:	80 68       	ori	r24, 0x80	; 128
     314:	0e 94 c6 00 	call	0x18c	; 0x18c <sendCmd>
		sendData(str[i]);
     318:	8f 81       	ldd	r24, Y+7	; 0x07
     31a:	88 2f       	mov	r24, r24
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	9e 01       	movw	r18, r28
     320:	28 5f       	subi	r18, 0xF8	; 248
     322:	3f 4f       	sbci	r19, 0xFF	; 255
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
     328:	fc 01       	movw	r30, r24
     32a:	80 81       	ld	r24, Z
     32c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <sendData>
	for(i; i < len; i++) {
		str[i] = data[j];
		j++;
	}

	for (uint8_t i = 0x00; i <= 0x0F; i++){ //0x00-0x27 first line
     330:	8f 81       	ldd	r24, Y+7	; 0x07
     332:	8f 5f       	subi	r24, 0xFF	; 255
     334:	8f 83       	std	Y+7, r24	; 0x07
     336:	8f 81       	ldd	r24, Y+7	; 0x07
     338:	80 31       	cpi	r24, 0x10	; 16
     33a:	38 f3       	brcs	.-50     	; 0x30a <write_first_line+0xa6>
		sendCmd(0x00);
		sendCmd(0x80 | i);
		sendData(str[i]);
	}
}
     33c:	6a 96       	adiw	r28, 0x1a	; 26
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <write_second_line>:

void write_second_line(char *data, uint8_t menu) {
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	6a 97       	sbiw	r28, 0x1a	; 26
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	99 8f       	std	Y+25, r25	; 0x19
     364:	88 8f       	std	Y+24, r24	; 0x18
     366:	6a 8f       	std	Y+26, r22	; 0x1a
	uint16_t len = strlen(data);
     368:	88 8d       	ldd	r24, Y+24	; 0x18
     36a:	99 8d       	ldd	r25, Y+25	; 0x19
     36c:	0e 94 35 08 	call	0x106a	; 0x106a <strlen>
     370:	9a 83       	std	Y+2, r25	; 0x02
     372:	89 83       	std	Y+1, r24	; 0x01
	char str[16] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
     374:	80 e1       	ldi	r24, 0x10	; 16
     376:	e8 e1       	ldi	r30, 0x18	; 24
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	de 01       	movw	r26, r28
     37c:	18 96       	adiw	r26, 0x08	; 8
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <write_second_line+0x30>
	uint16_t i = 0;
     386:	1c 82       	std	Y+4, r1	; 0x04
     388:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t j = 0;
     38a:	1e 82       	std	Y+6, r1	; 0x06
     38c:	1d 82       	std	Y+5, r1	; 0x05

	if(menu) {
     38e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     390:	88 23       	and	r24, r24
     392:	49 f0       	breq	.+18     	; 0x3a6 <write_second_line+0x58>
		i = 1;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	9c 83       	std	Y+4, r25	; 0x04
     39a:	8b 83       	std	Y+3, r24	; 0x03
		len++;
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	9a 81       	ldd	r25, Y+2	; 0x02
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	9a 83       	std	Y+2, r25	; 0x02
     3a4:	89 83       	std	Y+1, r24	; 0x01
	}
	for(i; i < len; i++) {
     3a6:	1b c0       	rjmp	.+54     	; 0x3de <write_second_line+0x90>
		str[i] = data[j];
     3a8:	28 8d       	ldd	r18, Y+24	; 0x18
     3aa:	39 8d       	ldd	r19, Y+25	; 0x19
     3ac:	8d 81       	ldd	r24, Y+5	; 0x05
     3ae:	9e 81       	ldd	r25, Y+6	; 0x06
     3b0:	82 0f       	add	r24, r18
     3b2:	93 1f       	adc	r25, r19
     3b4:	fc 01       	movw	r30, r24
     3b6:	40 81       	ld	r20, Z
     3b8:	9e 01       	movw	r18, r28
     3ba:	28 5f       	subi	r18, 0xF8	; 248
     3bc:	3f 4f       	sbci	r19, 0xFF	; 255
     3be:	8b 81       	ldd	r24, Y+3	; 0x03
     3c0:	9c 81       	ldd	r25, Y+4	; 0x04
     3c2:	82 0f       	add	r24, r18
     3c4:	93 1f       	adc	r25, r19
     3c6:	fc 01       	movw	r30, r24
     3c8:	40 83       	st	Z, r20
		j++;
     3ca:	8d 81       	ldd	r24, Y+5	; 0x05
     3cc:	9e 81       	ldd	r25, Y+6	; 0x06
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	9e 83       	std	Y+6, r25	; 0x06
     3d2:	8d 83       	std	Y+5, r24	; 0x05

	if(menu) {
		i = 1;
		len++;
	}
	for(i; i < len; i++) {
     3d4:	8b 81       	ldd	r24, Y+3	; 0x03
     3d6:	9c 81       	ldd	r25, Y+4	; 0x04
     3d8:	01 96       	adiw	r24, 0x01	; 1
     3da:	9c 83       	std	Y+4, r25	; 0x04
     3dc:	8b 83       	std	Y+3, r24	; 0x03
     3de:	2b 81       	ldd	r18, Y+3	; 0x03
     3e0:	3c 81       	ldd	r19, Y+4	; 0x04
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	28 17       	cp	r18, r24
     3e8:	39 07       	cpc	r19, r25
     3ea:	f0 f2       	brcs	.-68     	; 0x3a8 <write_second_line+0x5a>
		str[i] = data[j];
		j++;
	}


	for (uint8_t i = 0x40; i <= 0x4F; i++){ //0x40-0x67 second line
     3ec:	80 e4       	ldi	r24, 0x40	; 64
     3ee:	8f 83       	std	Y+7, r24	; 0x07
     3f0:	18 c0       	rjmp	.+48     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		sendCmd(0x00);
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	0e 94 c6 00 	call	0x18c	; 0x18c <sendCmd>
		sendCmd(0x80 | i);
     3f8:	8f 81       	ldd	r24, Y+7	; 0x07
     3fa:	80 68       	ori	r24, 0x80	; 128
     3fc:	0e 94 c6 00 	call	0x18c	; 0x18c <sendCmd>
		sendData(str[i-0x40]);
     400:	8f 81       	ldd	r24, Y+7	; 0x07
     402:	88 2f       	mov	r24, r24
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	80 54       	subi	r24, 0x40	; 64
     408:	91 09       	sbc	r25, r1
     40a:	9e 01       	movw	r18, r28
     40c:	28 5f       	subi	r18, 0xF8	; 248
     40e:	3f 4f       	sbci	r19, 0xFF	; 255
     410:	82 0f       	add	r24, r18
     412:	93 1f       	adc	r25, r19
     414:	fc 01       	movw	r30, r24
     416:	80 81       	ld	r24, Z
     418:	0e 94 dd 00 	call	0x1ba	; 0x1ba <sendData>
		str[i] = data[j];
		j++;
	}


	for (uint8_t i = 0x40; i <= 0x4F; i++){ //0x40-0x67 second line
     41c:	8f 81       	ldd	r24, Y+7	; 0x07
     41e:	8f 5f       	subi	r24, 0xFF	; 255
     420:	8f 83       	std	Y+7, r24	; 0x07
     422:	8f 81       	ldd	r24, Y+7	; 0x07
     424:	80 35       	cpi	r24, 0x50	; 80
     426:	28 f3       	brcs	.-54     	; 0x3f2 <write_second_line+0xa4>
		sendCmd(0x00);
		sendCmd(0x80 | i);
		sendData(str[i-0x40]);
	}
}
     428:	6a 96       	adiw	r28, 0x1a	; 26
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <write_volume_control>:

void write_volume_control(char name[], uint8_t value) {
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	ad 97       	sbiw	r28, 0x2d	; 45
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	9c a7       	std	Y+44, r25	; 0x2c
     450:	8b a7       	std	Y+43, r24	; 0x2b
     452:	6d a7       	std	Y+45, r22	; 0x2d
	char line_1[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
     454:	81 e1       	ldi	r24, 0x11	; 17
     456:	ec e2       	ldi	r30, 0x2C	; 44
     458:	f1 e0       	ldi	r31, 0x01	; 1
     45a:	de 01       	movw	r26, r28
     45c:	16 96       	adiw	r26, 0x06	; 6
     45e:	01 90       	ld	r0, Z+
     460:	0d 92       	st	X+, r0
     462:	8a 95       	dec	r24
     464:	e1 f7       	brne	.-8      	; 0x45e <write_volume_control+0x24>
	char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
     466:	81 e1       	ldi	r24, 0x11	; 17
     468:	ec e2       	ldi	r30, 0x2C	; 44
     46a:	f1 e0       	ldi	r31, 0x01	; 1
     46c:	de 01       	movw	r26, r28
     46e:	57 96       	adiw	r26, 0x17	; 23
     470:	01 90       	ld	r0, Z+
     472:	0d 92       	st	X+, r0
     474:	8a 95       	dec	r24
     476:	e1 f7       	brne	.-8      	; 0x470 <write_volume_control+0x36>
	uint8_t size = strlen(name);
     478:	8b a5       	ldd	r24, Y+43	; 0x2b
     47a:	9c a5       	ldd	r25, Y+44	; 0x2c
     47c:	0e 94 35 08 	call	0x106a	; 0x106a <strlen>
     480:	8c 83       	std	Y+4, r24	; 0x04

	for (uint8_t i = 0; i < size; i++){
     482:	19 82       	std	Y+1, r1	; 0x01
     484:	16 c0       	rjmp	.+44     	; 0x4b2 <write_volume_control+0x78>
		line_1[i] = name[i];
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	88 2f       	mov	r24, r24
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	29 81       	ldd	r18, Y+1	; 0x01
     48e:	22 2f       	mov	r18, r18
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	4b a5       	ldd	r20, Y+43	; 0x2b
     494:	5c a5       	ldd	r21, Y+44	; 0x2c
     496:	24 0f       	add	r18, r20
     498:	35 1f       	adc	r19, r21
     49a:	f9 01       	movw	r30, r18
     49c:	40 81       	ld	r20, Z
     49e:	9e 01       	movw	r18, r28
     4a0:	2a 5f       	subi	r18, 0xFA	; 250
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	82 0f       	add	r24, r18
     4a6:	93 1f       	adc	r25, r19
     4a8:	fc 01       	movw	r30, r24
     4aa:	40 83       	st	Z, r20
void write_volume_control(char name[], uint8_t value) {
	char line_1[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
	char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
	uint8_t size = strlen(name);

	for (uint8_t i = 0; i < size; i++){
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	8f 5f       	subi	r24, 0xFF	; 255
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	99 81       	ldd	r25, Y+1	; 0x01
     4b4:	8c 81       	ldd	r24, Y+4	; 0x04
     4b6:	98 17       	cp	r25, r24
     4b8:	30 f3       	brcs	.-52     	; 0x486 <write_volume_control+0x4c>
		line_1[i] = name[i];
	}

	char str[3];
	sprintf(str, "%3d", value);
     4ba:	8d a5       	ldd	r24, Y+45	; 0x2d
     4bc:	88 2f       	mov	r24, r24
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	29 2f       	mov	r18, r25
     4c2:	2f 93       	push	r18
     4c4:	8f 93       	push	r24
     4c6:	88 e2       	ldi	r24, 0x28	; 40
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	89 2f       	mov	r24, r25
     4cc:	8f 93       	push	r24
     4ce:	88 e2       	ldi	r24, 0x28	; 40
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	8f 93       	push	r24
     4d4:	ce 01       	movw	r24, r28
     4d6:	88 96       	adiw	r24, 0x28	; 40
     4d8:	29 2f       	mov	r18, r25
     4da:	2f 93       	push	r18
     4dc:	8f 93       	push	r24
     4de:	0e 94 3e 08 	call	0x107c	; 0x107c <sprintf>
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0

	for (uint8_t i = 13; i < 16; i++) {
     4ee:	8d e0       	ldi	r24, 0x0D	; 13
     4f0:	8a 83       	std	Y+2, r24	; 0x02
     4f2:	19 c0       	rjmp	.+50     	; 0x526 <write_volume_control+0xec>
		line_1[i] = str[i - 13];
     4f4:	8a 81       	ldd	r24, Y+2	; 0x02
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	22 2f       	mov	r18, r18
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	2d 50       	subi	r18, 0x0D	; 13
     502:	31 09       	sbc	r19, r1
     504:	ae 01       	movw	r20, r28
     506:	48 5d       	subi	r20, 0xD8	; 216
     508:	5f 4f       	sbci	r21, 0xFF	; 255
     50a:	24 0f       	add	r18, r20
     50c:	35 1f       	adc	r19, r21
     50e:	f9 01       	movw	r30, r18
     510:	40 81       	ld	r20, Z
     512:	9e 01       	movw	r18, r28
     514:	2a 5f       	subi	r18, 0xFA	; 250
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	82 0f       	add	r24, r18
     51a:	93 1f       	adc	r25, r19
     51c:	fc 01       	movw	r30, r24
     51e:	40 83       	st	Z, r20
	}

	char str[3];
	sprintf(str, "%3d", value);

	for (uint8_t i = 13; i < 16; i++) {
     520:	8a 81       	ldd	r24, Y+2	; 0x02
     522:	8f 5f       	subi	r24, 0xFF	; 255
     524:	8a 83       	std	Y+2, r24	; 0x02
     526:	8a 81       	ldd	r24, Y+2	; 0x02
     528:	80 31       	cpi	r24, 0x10	; 16
     52a:	20 f3       	brcs	.-56     	; 0x4f4 <write_volume_control+0xba>
		line_1[i] = str[i - 13];
	}

	uint8_t vol_size = volume_size(value);
     52c:	8d a5       	ldd	r24, Y+45	; 0x2d
     52e:	0e 94 c1 02 	call	0x582	; 0x582 <volume_size>
     532:	8d 83       	std	Y+5, r24	; 0x05

	for(uint8_t i = 0; i < vol_size; i++) {
     534:	1b 82       	std	Y+3, r1	; 0x03
     536:	0e c0       	rjmp	.+28     	; 0x554 <write_volume_control+0x11a>
		line_2[i] = '#';
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	88 2f       	mov	r24, r24
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	9e 01       	movw	r18, r28
     540:	29 5e       	subi	r18, 0xE9	; 233
     542:	3f 4f       	sbci	r19, 0xFF	; 255
     544:	82 0f       	add	r24, r18
     546:	93 1f       	adc	r25, r19
     548:	23 e2       	ldi	r18, 0x23	; 35
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18
		line_1[i] = str[i - 13];
	}

	uint8_t vol_size = volume_size(value);

	for(uint8_t i = 0; i < vol_size; i++) {
     54e:	8b 81       	ldd	r24, Y+3	; 0x03
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	8b 83       	std	Y+3, r24	; 0x03
     554:	9b 81       	ldd	r25, Y+3	; 0x03
     556:	8d 81       	ldd	r24, Y+5	; 0x05
     558:	98 17       	cp	r25, r24
     55a:	70 f3       	brcs	.-36     	; 0x538 <write_volume_control+0xfe>
		line_2[i] = '#';
	}

	write_first_line(line_1, 0);
     55c:	ce 01       	movw	r24, r28
     55e:	06 96       	adiw	r24, 0x06	; 6
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	0e 94 32 01 	call	0x264	; 0x264 <write_first_line>
	write_second_line(line_2, 0);
     566:	ce 01       	movw	r24, r28
     568:	47 96       	adiw	r24, 0x17	; 23
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	0e 94 a7 01 	call	0x34e	; 0x34e <write_second_line>
}
     570:	ad 96       	adiw	r28, 0x2d	; 45
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <volume_size>:

uint8_t volume_size(uint8_t value) {
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	1f 92       	push	r1
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	89 83       	std	Y+1, r24	; 0x01
	switch(value) {
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	88 2f       	mov	r24, r24
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	80 31       	cpi	r24, 0x10	; 16
     596:	91 05       	cpc	r25, r1
     598:	09 f4       	brne	.+2      	; 0x59c <volume_size+0x1a>
     59a:	4a c0       	rjmp	.+148    	; 0x630 <volume_size+0xae>
     59c:	81 31       	cpi	r24, 0x11	; 17
     59e:	91 05       	cpc	r25, r1
     5a0:	cc f4       	brge	.+50     	; 0x5d4 <volume_size+0x52>
     5a2:	84 30       	cpi	r24, 0x04	; 4
     5a4:	91 05       	cpc	r25, r1
     5a6:	09 f4       	brne	.+2      	; 0x5aa <volume_size+0x28>
     5a8:	3b c0       	rjmp	.+118    	; 0x620 <volume_size+0x9e>
     5aa:	85 30       	cpi	r24, 0x05	; 5
     5ac:	91 05       	cpc	r25, r1
     5ae:	4c f4       	brge	.+18     	; 0x5c2 <volume_size+0x40>
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	91 05       	cpc	r25, r1
     5b4:	89 f1       	breq	.+98     	; 0x618 <volume_size+0x96>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	91 05       	cpc	r25, r1
     5ba:	81 f1       	breq	.+96     	; 0x61c <volume_size+0x9a>
     5bc:	89 2b       	or	r24, r25
     5be:	51 f1       	breq	.+84     	; 0x614 <volume_size+0x92>
     5c0:	49 c0       	rjmp	.+146    	; 0x654 <volume_size+0xd2>
     5c2:	88 30       	cpi	r24, 0x08	; 8
     5c4:	91 05       	cpc	r25, r1
     5c6:	81 f1       	breq	.+96     	; 0x628 <volume_size+0xa6>
     5c8:	8c 30       	cpi	r24, 0x0C	; 12
     5ca:	91 05       	cpc	r25, r1
     5cc:	79 f1       	breq	.+94     	; 0x62c <volume_size+0xaa>
     5ce:	06 97       	sbiw	r24, 0x06	; 6
     5d0:	49 f1       	breq	.+82     	; 0x624 <volume_size+0xa2>
     5d2:	40 c0       	rjmp	.+128    	; 0x654 <volume_size+0xd2>
     5d4:	80 34       	cpi	r24, 0x40	; 64
     5d6:	91 05       	cpc	r25, r1
     5d8:	99 f1       	breq	.+102    	; 0x640 <volume_size+0xbe>
     5da:	81 34       	cpi	r24, 0x41	; 65
     5dc:	91 05       	cpc	r25, r1
     5de:	4c f4       	brge	.+18     	; 0x5f2 <volume_size+0x70>
     5e0:	80 32       	cpi	r24, 0x20	; 32
     5e2:	91 05       	cpc	r25, r1
     5e4:	49 f1       	breq	.+82     	; 0x638 <volume_size+0xb6>
     5e6:	80 33       	cpi	r24, 0x30	; 48
     5e8:	91 05       	cpc	r25, r1
     5ea:	41 f1       	breq	.+80     	; 0x63c <volume_size+0xba>
     5ec:	48 97       	sbiw	r24, 0x18	; 24
     5ee:	11 f1       	breq	.+68     	; 0x634 <volume_size+0xb2>
     5f0:	31 c0       	rjmp	.+98     	; 0x654 <volume_size+0xd2>
     5f2:	80 38       	cpi	r24, 0x80	; 128
     5f4:	91 05       	cpc	r25, r1
     5f6:	41 f1       	breq	.+80     	; 0x648 <volume_size+0xc6>
     5f8:	81 38       	cpi	r24, 0x81	; 129
     5fa:	91 05       	cpc	r25, r1
     5fc:	24 f4       	brge	.+8      	; 0x606 <volume_size+0x84>
     5fe:	80 36       	cpi	r24, 0x60	; 96
     600:	91 05       	cpc	r25, r1
     602:	01 f1       	breq	.+64     	; 0x644 <volume_size+0xc2>
     604:	27 c0       	rjmp	.+78     	; 0x654 <volume_size+0xd2>
     606:	80 3c       	cpi	r24, 0xC0	; 192
     608:	91 05       	cpc	r25, r1
     60a:	01 f1       	breq	.+64     	; 0x64c <volume_size+0xca>
     60c:	8f 3f       	cpi	r24, 0xFF	; 255
     60e:	91 05       	cpc	r25, r1
     610:	f9 f0       	breq	.+62     	; 0x650 <volume_size+0xce>
     612:	20 c0       	rjmp	.+64     	; 0x654 <volume_size+0xd2>
		case 0:
			return 1;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	1e c0       	rjmp	.+60     	; 0x654 <volume_size+0xd2>
			break;
		case 1:
			return 2;
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	1c c0       	rjmp	.+56     	; 0x654 <volume_size+0xd2>
			break;
		case 2:
			return 3;
     61c:	83 e0       	ldi	r24, 0x03	; 3
     61e:	1a c0       	rjmp	.+52     	; 0x654 <volume_size+0xd2>
			break;
		case 4:
			return 4;
     620:	84 e0       	ldi	r24, 0x04	; 4
     622:	18 c0       	rjmp	.+48     	; 0x654 <volume_size+0xd2>
			break;
		case 6:
			return 5;
     624:	85 e0       	ldi	r24, 0x05	; 5
     626:	16 c0       	rjmp	.+44     	; 0x654 <volume_size+0xd2>
			break;
		case 8:
			return 6;
     628:	86 e0       	ldi	r24, 0x06	; 6
     62a:	14 c0       	rjmp	.+40     	; 0x654 <volume_size+0xd2>
			break;
		case 12:
			return 7;
     62c:	87 e0       	ldi	r24, 0x07	; 7
     62e:	12 c0       	rjmp	.+36     	; 0x654 <volume_size+0xd2>
			break;
		case 16:
			return 8;
     630:	88 e0       	ldi	r24, 0x08	; 8
     632:	10 c0       	rjmp	.+32     	; 0x654 <volume_size+0xd2>
			break;
		case 24:
			return 9;
     634:	89 e0       	ldi	r24, 0x09	; 9
     636:	0e c0       	rjmp	.+28     	; 0x654 <volume_size+0xd2>
			break;
		case 32:
			return 10;
     638:	8a e0       	ldi	r24, 0x0A	; 10
     63a:	0c c0       	rjmp	.+24     	; 0x654 <volume_size+0xd2>
			break;
		case 48:
			return 11;
     63c:	8b e0       	ldi	r24, 0x0B	; 11
     63e:	0a c0       	rjmp	.+20     	; 0x654 <volume_size+0xd2>
			break;
		case 64:
			return 12;
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	08 c0       	rjmp	.+16     	; 0x654 <volume_size+0xd2>
			break;
		case 96:
			return 13;
     644:	8d e0       	ldi	r24, 0x0D	; 13
     646:	06 c0       	rjmp	.+12     	; 0x654 <volume_size+0xd2>
			break;
		case 128:
			return 14;
     648:	8e e0       	ldi	r24, 0x0E	; 14
     64a:	04 c0       	rjmp	.+8      	; 0x654 <volume_size+0xd2>
			break;
		case 192:
			return 15;
     64c:	8f e0       	ldi	r24, 0x0F	; 15
     64e:	02 c0       	rjmp	.+4      	; 0x654 <volume_size+0xd2>
			break;
		case 255:
			return 16;
     650:	80 e1       	ldi	r24, 0x10	; 16
     652:	00 c0       	rjmp	.+0      	; 0x654 <volume_size+0xd2>
			break;
	}
}
     654:	0f 90       	pop	r0
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <write_menu_items>:

void write_menu_items(char item_1[], char item_2[]) {
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	aa 97       	sbiw	r28, 0x2a	; 42
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	98 a7       	std	Y+40, r25	; 0x28
     672:	8f a3       	std	Y+39, r24	; 0x27
     674:	7a a7       	std	Y+42, r23	; 0x2a
     676:	69 a7       	std	Y+41, r22	; 0x29
	char line_1[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
     678:	81 e1       	ldi	r24, 0x11	; 17
     67a:	ec e2       	ldi	r30, 0x2C	; 44
     67c:	f1 e0       	ldi	r31, 0x01	; 1
     67e:	de 01       	movw	r26, r28
     680:	15 96       	adiw	r26, 0x05	; 5
     682:	01 90       	ld	r0, Z+
     684:	0d 92       	st	X+, r0
     686:	8a 95       	dec	r24
     688:	e1 f7       	brne	.-8      	; 0x682 <write_menu_items+0x26>
	char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
     68a:	81 e1       	ldi	r24, 0x11	; 17
     68c:	ec e2       	ldi	r30, 0x2C	; 44
     68e:	f1 e0       	ldi	r31, 0x01	; 1
     690:	de 01       	movw	r26, r28
     692:	56 96       	adiw	r26, 0x16	; 22
     694:	01 90       	ld	r0, Z+
     696:	0d 92       	st	X+, r0
     698:	8a 95       	dec	r24
     69a:	e1 f7       	brne	.-8      	; 0x694 <write_menu_items+0x38>
	uint8_t size_1 = strlen(item_1);
     69c:	8f a1       	ldd	r24, Y+39	; 0x27
     69e:	98 a5       	ldd	r25, Y+40	; 0x28
     6a0:	0e 94 35 08 	call	0x106a	; 0x106a <strlen>
     6a4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t size_2 = strlen(item_2);
     6a6:	89 a5       	ldd	r24, Y+41	; 0x29
     6a8:	9a a5       	ldd	r25, Y+42	; 0x2a
     6aa:	0e 94 35 08 	call	0x106a	; 0x106a <strlen>
     6ae:	8c 83       	std	Y+4, r24	; 0x04

	for (uint8_t i = 0; i < size_1; i++){
     6b0:	19 82       	std	Y+1, r1	; 0x01
     6b2:	16 c0       	rjmp	.+44     	; 0x6e0 <write_menu_items+0x84>
		line_1[i] = item_1[i];
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	29 81       	ldd	r18, Y+1	; 0x01
     6bc:	22 2f       	mov	r18, r18
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	4f a1       	ldd	r20, Y+39	; 0x27
     6c2:	58 a5       	ldd	r21, Y+40	; 0x28
     6c4:	24 0f       	add	r18, r20
     6c6:	35 1f       	adc	r19, r21
     6c8:	f9 01       	movw	r30, r18
     6ca:	40 81       	ld	r20, Z
     6cc:	9e 01       	movw	r18, r28
     6ce:	2b 5f       	subi	r18, 0xFB	; 251
     6d0:	3f 4f       	sbci	r19, 0xFF	; 255
     6d2:	82 0f       	add	r24, r18
     6d4:	93 1f       	adc	r25, r19
     6d6:	fc 01       	movw	r30, r24
     6d8:	40 83       	st	Z, r20
	char line_1[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
	char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
	uint8_t size_1 = strlen(item_1);
	uint8_t size_2 = strlen(item_2);

	for (uint8_t i = 0; i < size_1; i++){
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	8f 5f       	subi	r24, 0xFF	; 255
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	99 81       	ldd	r25, Y+1	; 0x01
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	98 17       	cp	r25, r24
     6e6:	30 f3       	brcs	.-52     	; 0x6b4 <write_menu_items+0x58>
		line_1[i] = item_1[i];
	}

	for (uint8_t i = 0; i < size_2; i++){
     6e8:	1a 82       	std	Y+2, r1	; 0x02
     6ea:	16 c0       	rjmp	.+44     	; 0x718 <write_menu_items+0xbc>
		line_2[i] = item_2[i];
     6ec:	8a 81       	ldd	r24, Y+2	; 0x02
     6ee:	88 2f       	mov	r24, r24
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	2a 81       	ldd	r18, Y+2	; 0x02
     6f4:	22 2f       	mov	r18, r18
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	49 a5       	ldd	r20, Y+41	; 0x29
     6fa:	5a a5       	ldd	r21, Y+42	; 0x2a
     6fc:	24 0f       	add	r18, r20
     6fe:	35 1f       	adc	r19, r21
     700:	f9 01       	movw	r30, r18
     702:	40 81       	ld	r20, Z
     704:	9e 01       	movw	r18, r28
     706:	2a 5e       	subi	r18, 0xEA	; 234
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	82 0f       	add	r24, r18
     70c:	93 1f       	adc	r25, r19
     70e:	fc 01       	movw	r30, r24
     710:	40 83       	st	Z, r20

	for (uint8_t i = 0; i < size_1; i++){
		line_1[i] = item_1[i];
	}

	for (uint8_t i = 0; i < size_2; i++){
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	8a 83       	std	Y+2, r24	; 0x02
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	8c 81       	ldd	r24, Y+4	; 0x04
     71c:	98 17       	cp	r25, r24
     71e:	30 f3       	brcs	.-52     	; 0x6ec <write_menu_items+0x90>
		line_2[i] = item_2[i];
	}

	write_first_line(line_1, 1);
     720:	ce 01       	movw	r24, r28
     722:	05 96       	adiw	r24, 0x05	; 5
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	0e 94 32 01 	call	0x264	; 0x264 <write_first_line>
	write_second_line(line_2, 1);
     72a:	ce 01       	movw	r24, r28
     72c:	46 96       	adiw	r24, 0x16	; 22
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	0e 94 a7 01 	call	0x34e	; 0x34e <write_second_line>
     734:	aa 96       	adiw	r28, 0x2a	; 42
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <SPI_Init_Master>:
//MISO == "Master In Slave Out" || SPI
//SCK == SPI Clock Line			|| SCK
//SS == "Slave Select			|| CS == "Chip Select"
 
 
void SPI_Init_Master() {
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
	/* Set the MOSI & SCK as Output lines */
	DDRB |= (1 << PINB3) | (1 << PINB5);
     74e:	84 e2       	ldi	r24, 0x24	; 36
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	24 e2       	ldi	r18, 0x24	; 36
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	f9 01       	movw	r30, r18
     758:	20 81       	ld	r18, Z
     75a:	28 62       	ori	r18, 0x28	; 40
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18
	/* Set the SCK pin to low */
	PORTB &= ~(1 << PINB5);
     760:	85 e2       	ldi	r24, 0x25	; 37
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	25 e2       	ldi	r18, 0x25	; 37
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	f9 01       	movw	r30, r18
     76a:	20 81       	ld	r18, Z
     76c:	2f 7d       	andi	r18, 0xDF	; 223
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
	
	/* Enable SPI */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPR1); 
     772:	8c e4       	ldi	r24, 0x4C	; 76
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	2c e4       	ldi	r18, 0x4C	; 76
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	f9 01       	movw	r30, r18
     77c:	20 81       	ld	r18, Z
     77e:	23 65       	ori	r18, 0x53	; 83
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <init_usart>:
/* Function to initialize the Usart behavior						*/
/* baud_rate is a number as ex. 9600								*/
/* parity_bits can either be NONE, EVEN or ODD						*/
/* stop_bits can either be ONE or TWO								*/
/* parity_bits and stop_bits have been defined in the header file	*/
void init_usart(uint16_t baud_rate, uint8_t parity_bits, uint8_t stop_bits) {
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	2c 97       	sbiw	r28, 0x0c	; 12
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	9a 83       	std	Y+2, r25	; 0x02
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	6b 83       	std	Y+3, r22	; 0x03
     7a8:	4c 83       	std	Y+4, r20	; 0x04
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0); //Enable USART Transmitter and receiver
     7aa:	81 ec       	ldi	r24, 0xC1	; 193
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	21 ec       	ldi	r18, 0xC1	; 193
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	f9 01       	movw	r30, r18
     7b4:	20 81       	ld	r18, Z
     7b6:	28 61       	ori	r18, 0x18	; 24
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 83       	st	Z, r18
	UBRR0H = (BAUD(baud_rate) >> 8);
     7bc:	05 ec       	ldi	r16, 0xC5	; 197
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
     7c4:	96 95       	lsr	r25
     7c6:	87 95       	ror	r24
     7c8:	cc 01       	movw	r24, r24
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	80 5c       	subi	r24, 0xC0	; 192
     7d0:	9d 4b       	sbci	r25, 0xBD	; 189
     7d2:	a0 4f       	sbci	r26, 0xF0	; 240
     7d4:	bf 4f       	sbci	r27, 0xFF	; 255
     7d6:	29 81       	ldd	r18, Y+1	; 0x01
     7d8:	3a 81       	ldd	r19, Y+2	; 0x02
     7da:	99 01       	movw	r18, r18
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	bc 01       	movw	r22, r24
     7e2:	cd 01       	movw	r24, r26
     7e4:	0e 94 13 08 	call	0x1026	; 0x1026 <__udivmodsi4>
     7e8:	da 01       	movw	r26, r20
     7ea:	c9 01       	movw	r24, r18
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	a1 09       	sbc	r26, r1
     7f0:	b1 09       	sbc	r27, r1
     7f2:	89 2f       	mov	r24, r25
     7f4:	9a 2f       	mov	r25, r26
     7f6:	ab 2f       	mov	r26, r27
     7f8:	bb 27       	eor	r27, r27
     7fa:	f8 01       	movw	r30, r16
     7fc:	80 83       	st	Z, r24
	UBRR0L = BAUD(baud_rate); //Set the baud rate to 9600
     7fe:	04 ec       	ldi	r16, 0xC4	; 196
     800:	10 e0       	ldi	r17, 0x00	; 0
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	9a 81       	ldd	r25, Y+2	; 0x02
     806:	96 95       	lsr	r25
     808:	87 95       	ror	r24
     80a:	cc 01       	movw	r24, r24
     80c:	a0 e0       	ldi	r26, 0x00	; 0
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	80 5c       	subi	r24, 0xC0	; 192
     812:	9d 4b       	sbci	r25, 0xBD	; 189
     814:	a0 4f       	sbci	r26, 0xF0	; 240
     816:	bf 4f       	sbci	r27, 0xFF	; 255
     818:	29 81       	ldd	r18, Y+1	; 0x01
     81a:	3a 81       	ldd	r19, Y+2	; 0x02
     81c:	99 01       	movw	r18, r18
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	bc 01       	movw	r22, r24
     824:	cd 01       	movw	r24, r26
     826:	0e 94 13 08 	call	0x1026	; 0x1026 <__udivmodsi4>
     82a:	da 01       	movw	r26, r20
     82c:	c9 01       	movw	r24, r18
     82e:	81 50       	subi	r24, 0x01	; 1
     830:	f8 01       	movw	r30, r16
     832:	80 83       	st	Z, r24

	/* Setting the parity bits for USART transmission */
	switch (parity_bits) {
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	88 2f       	mov	r24, r24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	91 05       	cpc	r25, r1
     83e:	79 f0       	breq	.+30     	; 0x85e <init_usart+0xd4>
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	91 05       	cpc	r25, r1
     844:	f9 f0       	breq	.+62     	; 0x884 <init_usart+0xfa>
     846:	89 2b       	or	r24, r25
     848:	39 f5       	brne	.+78     	; 0x898 <init_usart+0x10e>
		case NONE:
			UCSR0C &= ~(1 << UPM00) & ~(1 << UPM01);
     84a:	82 ec       	ldi	r24, 0xC2	; 194
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	22 ec       	ldi	r18, 0xC2	; 194
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	f9 01       	movw	r30, r18
     854:	20 81       	ld	r18, Z
     856:	2f 7c       	andi	r18, 0xCF	; 207
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
			break;
     85c:	1d c0       	rjmp	.+58     	; 0x898 <init_usart+0x10e>
		case EVEN:
			UCSR0C |= (1 << UPM01);
     85e:	82 ec       	ldi	r24, 0xC2	; 194
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	22 ec       	ldi	r18, 0xC2	; 194
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	f9 01       	movw	r30, r18
     868:	20 81       	ld	r18, Z
     86a:	20 62       	ori	r18, 0x20	; 32
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
			UCSR0C &= ~(1 << UPM00);
     870:	82 ec       	ldi	r24, 0xC2	; 194
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	22 ec       	ldi	r18, 0xC2	; 194
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	f9 01       	movw	r30, r18
     87a:	20 81       	ld	r18, Z
     87c:	2f 7e       	andi	r18, 0xEF	; 239
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18
			break;
     882:	0a c0       	rjmp	.+20     	; 0x898 <init_usart+0x10e>
		case ODD:
			UCSR0C |= (1 << UPM00) | (1 << UPM01);
     884:	82 ec       	ldi	r24, 0xC2	; 194
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	22 ec       	ldi	r18, 0xC2	; 194
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	f9 01       	movw	r30, r18
     88e:	20 81       	ld	r18, Z
     890:	20 63       	ori	r18, 0x30	; 48
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
			break;
     896:	00 00       	nop
	}

	/* Setting the stop bits for USART transmission */
	switch (stop_bits) {
     898:	8c 81       	ldd	r24, Y+4	; 0x04
     89a:	88 2f       	mov	r24, r24
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	91 05       	cpc	r25, r1
     8a2:	19 f0       	breq	.+6      	; 0x8aa <init_usart+0x120>
     8a4:	02 97       	sbiw	r24, 0x02	; 2
     8a6:	59 f0       	breq	.+22     	; 0x8be <init_usart+0x134>
     8a8:	14 c0       	rjmp	.+40     	; 0x8d2 <init_usart+0x148>
		case ONE:
			UCSR0C &= ~(1 << USBS0);
     8aa:	82 ec       	ldi	r24, 0xC2	; 194
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	22 ec       	ldi	r18, 0xC2	; 194
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	f9 01       	movw	r30, r18
     8b4:	20 81       	ld	r18, Z
     8b6:	27 7f       	andi	r18, 0xF7	; 247
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
			break;
     8bc:	0a c0       	rjmp	.+20     	; 0x8d2 <init_usart+0x148>
		case TWO:
			UCSR0C |= (1 << USBS0);
     8be:	82 ec       	ldi	r24, 0xC2	; 194
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	22 ec       	ldi	r18, 0xC2	; 194
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	28 60       	ori	r18, 0x08	; 8
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 83       	st	Z, r18
			break;
     8d0:	00 00       	nop
	}
	
	/* Transmit size is 8-bits */
	UCSR0C |= (3 << UCSZ00);
     8d2:	82 ec       	ldi	r24, 0xC2	; 194
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	22 ec       	ldi	r18, 0xC2	; 194
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	f9 01       	movw	r30, r18
     8dc:	20 81       	ld	r18, Z
     8de:	26 60       	ori	r18, 0x06	; 6
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18
}
     8e4:	2c 96       	adiw	r28, 0x0c	; 12
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	08 95       	ret

000008fa <__vector_3>:
char *main_menu[5];
char *equalizer_menu[5];

//Menu titles

ISR(PCINT0_vect) {
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     902:	0f 92       	push	r0
     904:	11 24       	eor	r1, r1
     906:	2f 93       	push	r18
     908:	3f 93       	push	r19
     90a:	4f 93       	push	r20
     90c:	5f 93       	push	r21
     90e:	6f 93       	push	r22
     910:	7f 93       	push	r23
     912:	8f 93       	push	r24
     914:	9f 93       	push	r25
     916:	af 93       	push	r26
     918:	bf 93       	push	r27
     91a:	ef 93       	push	r30
     91c:	ff 93       	push	r31
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
	if((PINB & (1 << PINB7)) == 0) {
     926:	83 e2       	ldi	r24, 0x23	; 35
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	fc 01       	movw	r30, r24
     92c:	80 81       	ld	r24, Z
     92e:	88 23       	and	r24, r24
     930:	34 f0       	brlt	.+12     	; 0x93e <__stack+0x3f>
		activity();
     932:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <activity>
		update_display_values(0, 0);
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 44 06 	call	0xc88	; 0xc88 <update_display_values>
	}
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	ff 91       	pop	r31
     944:	ef 91       	pop	r30
     946:	bf 91       	pop	r27
     948:	af 91       	pop	r26
     94a:	9f 91       	pop	r25
     94c:	8f 91       	pop	r24
     94e:	7f 91       	pop	r23
     950:	6f 91       	pop	r22
     952:	5f 91       	pop	r21
     954:	4f 91       	pop	r20
     956:	3f 91       	pop	r19
     958:	2f 91       	pop	r18
     95a:	0f 90       	pop	r0
     95c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <__vector_4>:


ISR(PCINT1_vect) {
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     96e:	0f 92       	push	r0
     970:	11 24       	eor	r1, r1
     972:	2f 93       	push	r18
     974:	3f 93       	push	r19
     976:	4f 93       	push	r20
     978:	5f 93       	push	r21
     97a:	6f 93       	push	r22
     97c:	7f 93       	push	r23
     97e:	8f 93       	push	r24
     980:	9f 93       	push	r25
     982:	af 93       	push	r26
     984:	bf 93       	push	r27
     986:	ef 93       	push	r30
     988:	ff 93       	push	r31
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
	if((PINC & (1 << PINC0)) == 0) {
     992:	86 e2       	ldi	r24, 0x26	; 38
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	fc 01       	movw	r30, r24
     998:	80 81       	ld	r24, Z
     99a:	88 2f       	mov	r24, r24
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	81 70       	andi	r24, 0x01	; 1
     9a0:	99 27       	eor	r25, r25
     9a2:	89 2b       	or	r24, r25
     9a4:	b9 f4       	brne	.+46     	; 0x9d4 <__vector_4+0x6e>
		if (PINC & (1 << PINC1)) { //CW
     9a6:	86 e2       	ldi	r24, 0x26	; 38
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	fc 01       	movw	r30, r24
     9ac:	80 81       	ld	r24, Z
     9ae:	88 2f       	mov	r24, r24
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	82 70       	andi	r24, 0x02	; 2
     9b4:	99 27       	eor	r25, r25
     9b6:	89 2b       	or	r24, r25
     9b8:	39 f0       	breq	.+14     	; 0x9c8 <__vector_4+0x62>
			activity();
     9ba:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <activity>
			update_display_values(1, 0);
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	0e 94 44 06 	call	0xc88	; 0xc88 <update_display_values>
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <__vector_4+0x6e>
		} else { //CCW
			activity();
     9c8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <activity>
			update_display_values(1, 1);
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	0e 94 44 06 	call	0xc88	; 0xc88 <update_display_values>
		}
	}
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <__vector_11>:


ISR(TIMER1_COMPA_vect) {
     9fc:	1f 92       	push	r1
     9fe:	0f 92       	push	r0
     a00:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	2f 93       	push	r18
     a0a:	8f 93       	push	r24
     a0c:	9f 93       	push	r25
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
	if(++display_counter == 10) {
     a16:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <display_counter>
     a1a:	8f 5f       	subi	r24, 0xFF	; 255
     a1c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <display_counter>
     a20:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <display_counter>
     a24:	8a 30       	cpi	r24, 0x0A	; 10
     a26:	29 f4       	brne	.+10     	; 0xa32 <__vector_11+0x36>
		display_FLAG = 1;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <display_FLAG>
		display_counter = 0;
     a2e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <display_counter>
	}

	if (activity_FLAG && activity_counter++ == 20) {
     a32:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <activity_FLAG>
     a36:	88 23       	and	r24, r24
     a38:	61 f0       	breq	.+24     	; 0xa52 <__vector_11+0x56>
     a3a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <activity_counter>
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	98 0f       	add	r25, r24
     a42:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <activity_counter>
     a46:	84 31       	cpi	r24, 0x14	; 20
     a48:	21 f4       	brne	.+8      	; 0xa52 <__vector_11+0x56>
		activity_FLAG = 0;
     a4a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <activity_FLAG>
		activity_counter = 0;
     a4e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <activity_counter>
	}

	if(++back_light_counter == 500 && !activity_FLAG) {
     a52:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <back_light_counter>
     a56:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <back_light_counter+0x1>
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <back_light_counter+0x1>
     a60:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <back_light_counter>
     a64:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <back_light_counter>
     a68:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <back_light_counter+0x1>
     a6c:	84 3f       	cpi	r24, 0xF4	; 244
     a6e:	91 40       	sbci	r25, 0x01	; 1
     a70:	59 f4       	brne	.+22     	; 0xa88 <__vector_11+0x8c>
     a72:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <activity_FLAG>
     a76:	88 23       	and	r24, r24
     a78:	39 f4       	brne	.+14     	; 0xa88 <__vector_11+0x8c>
		back_light_FLAG = 1;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <back_light_FLAG>
		back_light_counter = 0;
     a80:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <back_light_counter+0x1>
     a84:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <back_light_counter>
	}
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	2f 91       	pop	r18
     a92:	0f 90       	pop	r0
     a94:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a98:	0f 90       	pop	r0
     a9a:	1f 90       	pop	r1
     a9c:	18 95       	reti

00000a9e <main>:


int main(void) {
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
	init_usart(9600, NONE, ONE);
     aa6:	41 e0       	ldi	r20, 0x01	; 1
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	80 e8       	ldi	r24, 0x80	; 128
     aac:	95 e2       	ldi	r25, 0x25	; 37
     aae:	0e 94 c5 03 	call	0x78a	; 0x78a <init_usart>
	Init_Pot_Meter();
     ab2:	0e 94 53 00 	call	0xa6	; 0xa6 <Init_Pot_Meter>
	i2cInit();
     ab6:	0e 94 6e 00 	call	0xdc	; 0xdc <i2cInit>
	initDisp();
     aba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <initDisp>
	init_timer();
     abe:	0e 94 bc 07 	call	0xf78	; 0xf78 <init_timer>
	init_rot_but();
     ac2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <init_rot_but>

	vol_control[0] = "Volume";
     ac6:	8d e3       	ldi	r24, 0x3D	; 61
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <vol_control+0x1>
     ace:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <vol_control>
	vol_control[1] = "Bass";
     ad2:	84 e4       	ldi	r24, 0x44	; 68
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <vol_control+0x3>
     ada:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <vol_control+0x2>
	vol_control[2] = "Mid";
     ade:	89 e4       	ldi	r24, 0x49	; 73
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <vol_control+0x5>
     ae6:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <vol_control+0x4>
	vol_control[3] = "Treble";
     aea:	8d e4       	ldi	r24, 0x4D	; 77
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <vol_control+0x7>
     af2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <vol_control+0x6>
	vol_control[4] = "Brightness";
     af6:	84 e5       	ldi	r24, 0x54	; 84
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <vol_control+0x9>
     afe:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <vol_control+0x8>
	main_menu[0] = "Equalizer";
     b02:	8f e5       	ldi	r24, 0x5F	; 95
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <main_menu+0x1>
     b0a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <main_menu>
	main_menu[1] = "Brightness";
     b0e:	84 e5       	ldi	r24, 0x54	; 84
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <main_menu+0x3>
     b16:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <main_menu+0x2>
	main_menu[2] = "Reset";
     b1a:	89 e6       	ldi	r24, 0x69	; 105
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <main_menu+0x5>
     b22:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <main_menu+0x4>
	main_menu[3] = "Exit";
     b26:	8f e6       	ldi	r24, 0x6F	; 111
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <main_menu+0x7>
     b2e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <main_menu+0x6>
	main_menu[4] = "  ";
     b32:	84 e7       	ldi	r24, 0x74	; 116
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <main_menu+0x9>
     b3a:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <main_menu+0x8>
	equalizer_menu[0] = "Bass";
     b3e:	84 e4       	ldi	r24, 0x44	; 68
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <equalizer_menu+0x1>
     b46:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <equalizer_menu>
	equalizer_menu[1] = "Mid";
     b4a:	89 e4       	ldi	r24, 0x49	; 73
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <equalizer_menu+0x3>
     b52:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <equalizer_menu+0x2>
	equalizer_menu[2] = "Treble";
     b56:	8d e4       	ldi	r24, 0x4D	; 77
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <equalizer_menu+0x5>
     b5e:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <equalizer_menu+0x4>
	equalizer_menu[3] = "Back";
     b62:	87 e7       	ldi	r24, 0x77	; 119
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <equalizer_menu+0x7>
     b6a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <equalizer_menu+0x6>
	equalizer_menu[4] = "  ";
     b6e:	84 e7       	ldi	r24, 0x74	; 116
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <equalizer_menu+0x9>
     b76:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <equalizer_menu+0x8>
	sei();
     b7a:	78 94       	sei
    while (1) 
    {
		if(display_FLAG) {
     b7c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <display_FLAG>
     b80:	88 23       	and	r24, r24
     b82:	21 f0       	breq	.+8      	; 0xb8c <main+0xee>
			update_display();
     b84:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <update_display>
			display_FLAG = 0;
     b88:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <display_FLAG>
		}

		if(activity_FLAG) {
     b8c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <activity_FLAG>
     b90:	88 23       	and	r24, r24
     b92:	49 f0       	breq	.+18     	; 0xba6 <main+0x108>
			PORTD |= (1 << PORTD3);
     b94:	8b e2       	ldi	r24, 0x2B	; 43
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	2b e2       	ldi	r18, 0x2B	; 43
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	f9 01       	movw	r30, r18
     b9e:	20 81       	ld	r18, Z
     ba0:	28 60       	ori	r18, 0x08	; 8
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
		}

		if (back_light_FLAG) {
     ba6:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <back_light_FLAG>
     baa:	88 23       	and	r24, r24
     bac:	59 f0       	breq	.+22     	; 0xbc4 <main+0x126>
			PORTD &= ~(1 << PORTD3);
     bae:	8b e2       	ldi	r24, 0x2B	; 43
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	2b e2       	ldi	r18, 0x2B	; 43
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	f9 01       	movw	r30, r18
     bb8:	20 81       	ld	r18, Z
     bba:	27 7f       	andi	r18, 0xF7	; 247
     bbc:	fc 01       	movw	r30, r24
     bbe:	20 83       	st	Z, r18
			back_light_FLAG = 0;
     bc0:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <back_light_FLAG>
		}
    }
     bc4:	db cf       	rjmp	.-74     	; 0xb7c <main+0xde>

00000bc6 <update_display>:
}

void update_display() {
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
	//Send the menu item to the display
	if (ctrl_menu_FLAG) {
     bce:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     bd2:	88 23       	and	r24, r24
     bd4:	e9 f0       	breq	.+58     	; 0xc10 <update_display+0x4a>
		write_volume_control(vol_control[ctrl_index], vol_values[vol_index[ctrl_index]]);
     bd6:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	80 50       	subi	r24, 0x00	; 0
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	8b 5f       	subi	r24, 0xFB	; 251
     bec:	9e 4f       	sbci	r25, 0xFE	; 254
     bee:	fc 01       	movw	r30, r24
     bf0:	20 81       	ld	r18, Z
     bf2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	8a 57       	subi	r24, 0x7A	; 122
     c00:	9e 4f       	sbci	r25, 0xFE	; 254
     c02:	fc 01       	movw	r30, r24
     c04:	80 81       	ld	r24, Z
     c06:	91 81       	ldd	r25, Z+1	; 0x01
     c08:	62 2f       	mov	r22, r18
     c0a:	0e 94 1d 02 	call	0x43a	; 0x43a <write_volume_control>
     c0e:	39 c0       	rjmp	.+114    	; 0xc82 <update_display+0xbc>
	} else {
		if (equalizer_menu_FLAG) {
     c10:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <equalizer_menu_FLAG>
     c14:	88 23       	and	r24, r24
     c16:	d9 f0       	breq	.+54     	; 0xc4e <update_display+0x88>
			write_menu_items(equalizer_menu[equalizer_menu_index], equalizer_menu[equalizer_menu_index + 1]);
     c18:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <equalizer_menu_index>
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	86 56       	subi	r24, 0x66	; 102
     c28:	9e 4f       	sbci	r25, 0xFE	; 254
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 81       	ld	r18, Z
     c2e:	31 81       	ldd	r19, Z+1	; 0x01
     c30:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <equalizer_menu_index>
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	86 56       	subi	r24, 0x66	; 102
     c3e:	9e 4f       	sbci	r25, 0xFE	; 254
     c40:	fc 01       	movw	r30, r24
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	b9 01       	movw	r22, r18
     c48:	0e 94 2e 03 	call	0x65c	; 0x65c <write_menu_items>
     c4c:	1a c0       	rjmp	.+52     	; 0xc82 <update_display+0xbc>
		} else {
			write_menu_items(main_menu[menu_index], main_menu[menu_index + 1]);
     c4e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <menu_index>
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	80 57       	subi	r24, 0x70	; 112
     c5e:	9e 4f       	sbci	r25, 0xFE	; 254
     c60:	fc 01       	movw	r30, r24
     c62:	20 81       	ld	r18, Z
     c64:	31 81       	ldd	r19, Z+1	; 0x01
     c66:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <menu_index>
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	80 57       	subi	r24, 0x70	; 112
     c74:	9e 4f       	sbci	r25, 0xFE	; 254
     c76:	fc 01       	movw	r30, r24
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	b9 01       	movw	r22, r18
     c7e:	0e 94 2e 03 	call	0x65c	; 0x65c <write_menu_items>
		}
	}
	//Update the brightness 

}
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <update_display_values>:

void update_display_values(uint8_t device, uint8_t direction) {
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <update_display_values+0x6>
     c8e:	1f 92       	push	r1
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	8a 83       	std	Y+2, r24	; 0x02
     c96:	6b 83       	std	Y+3, r22	; 0x03
	if (device) { //If the device is the rotary encoder
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	88 23       	and	r24, r24
     c9c:	09 f4       	brne	.+2      	; 0xca0 <update_display_values+0x18>
     c9e:	ee c0       	rjmp	.+476    	; 0xe7c <update_display_values+0x1f4>
		if (direction) { //If the direction is up
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <update_display_values+0x20>
     ca6:	75 c0       	rjmp	.+234    	; 0xd92 <update_display_values+0x10a>
			if (menu_FLAG) { //If we are in a menu
     ca8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <menu_FLAG>
     cac:	88 23       	and	r24, r24
     cae:	09 f4       	brne	.+2      	; 0xcb2 <update_display_values+0x2a>
     cb0:	56 c0       	rjmp	.+172    	; 0xd5e <update_display_values+0xd6>
				if (equalizer_menu_FLAG) { //If we are in the equalizer menu
     cb2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <equalizer_menu_FLAG>
     cb6:	88 23       	and	r24, r24
     cb8:	49 f1       	breq	.+82     	; 0xd0c <update_display_values+0x84>
					if (ctrl_menu_FLAG) { //If we are in a control menu
     cba:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     cbe:	88 23       	and	r24, r24
     cc0:	d1 f0       	breq	.+52     	; 0xcf6 <update_display_values+0x6e>
						if(vol_index[ctrl_index] < 15) { 
     cc2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	80 50       	subi	r24, 0x00	; 0
     ccc:	9f 4f       	sbci	r25, 0xFF	; 255
     cce:	fc 01       	movw	r30, r24
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 30       	cpi	r24, 0x0F	; 15
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <update_display_values+0x50>
     cd6:	4a c1       	rjmp	.+660    	; 0xf6c <update_display_values+0x2e4>
							vol_index[ctrl_index]++;
     cd8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     cdc:	88 2f       	mov	r24, r24
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9c 01       	movw	r18, r24
     ce2:	20 50       	subi	r18, 0x00	; 0
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	f9 01       	movw	r30, r18
     ce8:	20 81       	ld	r18, Z
     cea:	2f 5f       	subi	r18, 0xFF	; 255
     cec:	80 50       	subi	r24, 0x00	; 0
     cee:	9f 4f       	sbci	r25, 0xFF	; 255
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
     cf4:	3b c1       	rjmp	.+630    	; 0xf6c <update_display_values+0x2e4>
						}
					} else {
						if (equalizer_menu_index < 3){
     cf6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <equalizer_menu_index>
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <update_display_values+0x78>
     cfe:	36 c1       	rjmp	.+620    	; 0xf6c <update_display_values+0x2e4>
							equalizer_menu_index++;
     d00:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <equalizer_menu_index>
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <equalizer_menu_index>
     d0a:	30 c1       	rjmp	.+608    	; 0xf6c <update_display_values+0x2e4>
						}
					}
				} else if(ctrl_menu_FLAG){
     d0c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     d10:	88 23       	and	r24, r24
     d12:	d1 f0       	breq	.+52     	; 0xd48 <update_display_values+0xc0>
					if(vol_index[ctrl_index] > 0) {
     d14:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	80 50       	subi	r24, 0x00	; 0
     d1e:	9f 4f       	sbci	r25, 0xFF	; 255
     d20:	fc 01       	movw	r30, r24
     d22:	80 81       	ld	r24, Z
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <update_display_values+0xa2>
     d28:	21 c1       	rjmp	.+578    	; 0xf6c <update_display_values+0x2e4>
						vol_index[ctrl_index]++;
     d2a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	9c 01       	movw	r18, r24
     d34:	20 50       	subi	r18, 0x00	; 0
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	f9 01       	movw	r30, r18
     d3a:	20 81       	ld	r18, Z
     d3c:	2f 5f       	subi	r18, 0xFF	; 255
     d3e:	80 50       	subi	r24, 0x00	; 0
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	fc 01       	movw	r30, r24
     d44:	20 83       	st	Z, r18
     d46:	12 c1       	rjmp	.+548    	; 0xf6c <update_display_values+0x2e4>
					}
				} else {
					if(menu_index < 3) {
     d48:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <menu_index>
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <update_display_values+0xca>
     d50:	0d c1       	rjmp	.+538    	; 0xf6c <update_display_values+0x2e4>
						menu_index++;
     d52:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <menu_index>
     d56:	8f 5f       	subi	r24, 0xFF	; 255
     d58:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <menu_index>
     d5c:	07 c1       	rjmp	.+526    	; 0xf6c <update_display_values+0x2e4>
					}
				}
			} else {
				if(vol_index[ctrl_index] < 15) {
     d5e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	80 50       	subi	r24, 0x00	; 0
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 81       	ld	r24, Z
     d6e:	8f 30       	cpi	r24, 0x0F	; 15
     d70:	08 f0       	brcs	.+2      	; 0xd74 <update_display_values+0xec>
     d72:	fc c0       	rjmp	.+504    	; 0xf6c <update_display_values+0x2e4>
					vol_index[ctrl_index]++;
     d74:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	9c 01       	movw	r18, r24
     d7e:	20 50       	subi	r18, 0x00	; 0
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	f9 01       	movw	r30, r18
     d84:	20 81       	ld	r18, Z
     d86:	2f 5f       	subi	r18, 0xFF	; 255
     d88:	80 50       	subi	r24, 0x00	; 0
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	fc 01       	movw	r30, r24
     d8e:	20 83       	st	Z, r18
     d90:	ed c0       	rjmp	.+474    	; 0xf6c <update_display_values+0x2e4>
				}
			}
		} else {
			if (menu_FLAG) {
     d92:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <menu_FLAG>
     d96:	88 23       	and	r24, r24
     d98:	09 f4       	brne	.+2      	; 0xd9c <update_display_values+0x114>
     d9a:	56 c0       	rjmp	.+172    	; 0xe48 <update_display_values+0x1c0>
				if (equalizer_menu_FLAG) {
     d9c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <equalizer_menu_FLAG>
     da0:	88 23       	and	r24, r24
     da2:	49 f1       	breq	.+82     	; 0xdf6 <update_display_values+0x16e>
					if (ctrl_menu_FLAG) {
     da4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     da8:	88 23       	and	r24, r24
     daa:	d1 f0       	breq	.+52     	; 0xde0 <update_display_values+0x158>
						if(vol_index[ctrl_index] > 0) {
     dac:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     db0:	88 2f       	mov	r24, r24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	80 50       	subi	r24, 0x00	; 0
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	88 23       	and	r24, r24
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <update_display_values+0x13a>
     dc0:	d5 c0       	rjmp	.+426    	; 0xf6c <update_display_values+0x2e4>
							vol_index[ctrl_index]--;
     dc2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	9c 01       	movw	r18, r24
     dcc:	20 50       	subi	r18, 0x00	; 0
     dce:	3f 4f       	sbci	r19, 0xFF	; 255
     dd0:	f9 01       	movw	r30, r18
     dd2:	20 81       	ld	r18, Z
     dd4:	21 50       	subi	r18, 0x01	; 1
     dd6:	80 50       	subi	r24, 0x00	; 0
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
     dde:	c6 c0       	rjmp	.+396    	; 0xf6c <update_display_values+0x2e4>
						}
					} else {
						if (equalizer_menu_index > 0) {
     de0:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <equalizer_menu_index>
     de4:	88 23       	and	r24, r24
     de6:	09 f4       	brne	.+2      	; 0xdea <update_display_values+0x162>
     de8:	c1 c0       	rjmp	.+386    	; 0xf6c <update_display_values+0x2e4>
							equalizer_menu_index--;
     dea:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <equalizer_menu_index>
     dee:	81 50       	subi	r24, 0x01	; 1
     df0:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <equalizer_menu_index>
     df4:	bb c0       	rjmp	.+374    	; 0xf6c <update_display_values+0x2e4>
						}
					}
				} else if(ctrl_menu_FLAG){
     df6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     dfa:	88 23       	and	r24, r24
     dfc:	d1 f0       	breq	.+52     	; 0xe32 <update_display_values+0x1aa>
					if(vol_index[ctrl_index] > 0) {
     dfe:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	80 50       	subi	r24, 0x00	; 0
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	fc 01       	movw	r30, r24
     e0c:	80 81       	ld	r24, Z
     e0e:	88 23       	and	r24, r24
     e10:	09 f4       	brne	.+2      	; 0xe14 <update_display_values+0x18c>
     e12:	ac c0       	rjmp	.+344    	; 0xf6c <update_display_values+0x2e4>
						vol_index[ctrl_index]--;
     e14:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9c 01       	movw	r18, r24
     e1e:	20 50       	subi	r18, 0x00	; 0
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	f9 01       	movw	r30, r18
     e24:	20 81       	ld	r18, Z
     e26:	21 50       	subi	r18, 0x01	; 1
     e28:	80 50       	subi	r24, 0x00	; 0
     e2a:	9f 4f       	sbci	r25, 0xFF	; 255
     e2c:	fc 01       	movw	r30, r24
     e2e:	20 83       	st	Z, r18
     e30:	9d c0       	rjmp	.+314    	; 0xf6c <update_display_values+0x2e4>
					}
				} else {
					if(menu_index > 0) {
     e32:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <menu_index>
     e36:	88 23       	and	r24, r24
     e38:	09 f4       	brne	.+2      	; 0xe3c <update_display_values+0x1b4>
     e3a:	98 c0       	rjmp	.+304    	; 0xf6c <update_display_values+0x2e4>
						menu_index--;
     e3c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <menu_index>
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <menu_index>
     e46:	92 c0       	rjmp	.+292    	; 0xf6c <update_display_values+0x2e4>
					}
				}
			} else {
				if(vol_index[ctrl_index] > 0) {
     e48:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     e4c:	88 2f       	mov	r24, r24
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	80 50       	subi	r24, 0x00	; 0
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	fc 01       	movw	r30, r24
     e56:	80 81       	ld	r24, Z
     e58:	88 23       	and	r24, r24
     e5a:	09 f4       	brne	.+2      	; 0xe5e <update_display_values+0x1d6>
     e5c:	87 c0       	rjmp	.+270    	; 0xf6c <update_display_values+0x2e4>
					vol_index[ctrl_index]--;
     e5e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9c 01       	movw	r18, r24
     e68:	20 50       	subi	r18, 0x00	; 0
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	f9 01       	movw	r30, r18
     e6e:	20 81       	ld	r18, Z
     e70:	21 50       	subi	r18, 0x01	; 1
     e72:	80 50       	subi	r24, 0x00	; 0
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	fc 01       	movw	r30, r24
     e78:	20 83       	st	Z, r18
     e7a:	78 c0       	rjmp	.+240    	; 0xf6c <update_display_values+0x2e4>
				}
			}
		}
	} else { //The button is pressed 
		if (menu_FLAG) { // are we in the menu?
     e7c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <menu_FLAG>
     e80:	88 23       	and	r24, r24
     e82:	09 f4       	brne	.+2      	; 0xe86 <update_display_values+0x1fe>
     e84:	70 c0       	rjmp	.+224    	; 0xf66 <update_display_values+0x2de>
			if (equalizer_menu_FLAG) { //Are we in the equalizer menu?
     e86:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <equalizer_menu_FLAG>
     e8a:	88 23       	and	r24, r24
     e8c:	69 f1       	breq	.+90     	; 0xee8 <update_display_values+0x260>
				if (equalizer_menu_index == 3) { //If the index is 3 we wanna to go back
     e8e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <equalizer_menu_index>
     e92:	83 30       	cpi	r24, 0x03	; 3
     e94:	29 f4       	brne	.+10     	; 0xea0 <update_display_values+0x218>
					equalizer_menu_FLAG = 0;
     e96:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <equalizer_menu_FLAG>
					equalizer_menu_index = 0;
     e9a:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <equalizer_menu_index>
     e9e:	66 c0       	rjmp	.+204    	; 0xf6c <update_display_values+0x2e4>
				} else if(ctrl_menu_FLAG) { //If we are in a control menu, we wanna to go back to the equalizer menu
     ea0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     ea4:	88 23       	and	r24, r24
     ea6:	19 f0       	breq	.+6      	; 0xeae <update_display_values+0x226>
					ctrl_menu_FLAG = 0;
     ea8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ctrl_menu_FLAG>
     eac:	5f c0       	rjmp	.+190    	; 0xf6c <update_display_values+0x2e4>
				} else { //If nothing of the above option is true, then we wanna go into a control menu. 
					ctrl_menu_FLAG = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ctrl_menu_FLAG>
					switch(equalizer_menu_index) { //Select the right index
     eb4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <equalizer_menu_index>
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	51 f0       	breq	.+20     	; 0xed6 <update_display_values+0x24e>
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	91 05       	cpc	r25, r1
     ec6:	59 f0       	breq	.+22     	; 0xede <update_display_values+0x256>
     ec8:	89 2b       	or	r24, r25
     eca:	09 f0       	breq	.+2      	; 0xece <update_display_values+0x246>
     ecc:	4f c0       	rjmp	.+158    	; 0xf6c <update_display_values+0x2e4>
						case 0:
							ctrl_index = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
							break;
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <update_display_values+0x25e>
						case 1:
							ctrl_index = 2;
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
							break;
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <update_display_values+0x25e>
						case 2:
							ctrl_index = 3;
     ede:	83 e0       	ldi	r24, 0x03	; 3
     ee0:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
							break;
     ee4:	00 00       	nop
     ee6:	42 c0       	rjmp	.+132    	; 0xf6c <update_display_values+0x2e4>
					}
				}
			} else {
				if(ctrl_menu_FLAG) {
     ee8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     eec:	88 23       	and	r24, r24
     eee:	19 f0       	breq	.+6      	; 0xef6 <update_display_values+0x26e>
					ctrl_menu_FLAG = 0;
     ef0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ctrl_menu_FLAG>
     ef4:	3b c0       	rjmp	.+118    	; 0xf6c <update_display_values+0x2e4>
				} else {
					switch (menu_index) {
     ef6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <menu_index>
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	91 05       	cpc	r25, r1
     f02:	81 f0       	breq	.+32     	; 0xf24 <update_display_values+0x29c>
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	91 05       	cpc	r25, r1
     f08:	1c f4       	brge	.+6      	; 0xf10 <update_display_values+0x288>
     f0a:	89 2b       	or	r24, r25
     f0c:	39 f0       	breq	.+14     	; 0xf1c <update_display_values+0x294>
     f0e:	2e c0       	rjmp	.+92     	; 0xf6c <update_display_values+0x2e4>
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	91 05       	cpc	r25, r1
     f14:	71 f0       	breq	.+28     	; 0xf32 <update_display_values+0x2aa>
     f16:	03 97       	sbiw	r24, 0x03	; 3
     f18:	e9 f0       	breq	.+58     	; 0xf54 <update_display_values+0x2cc>
     f1a:	28 c0       	rjmp	.+80     	; 0xf6c <update_display_values+0x2e4>
						case 0:
							equalizer_menu_FLAG = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <equalizer_menu_FLAG>
							break;
     f22:	20 c0       	rjmp	.+64     	; 0xf64 <update_display_values+0x2dc>
						case 1:
							ctrl_menu_FLAG = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ctrl_menu_FLAG>
							ctrl_index = 4;
     f2a:	84 e0       	ldi	r24, 0x04	; 4
     f2c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
							break;
     f30:	19 c0       	rjmp	.+50     	; 0xf64 <update_display_values+0x2dc>
						case 2:
							for(uint8_t i = 0; i < 5; i++) {//Reset the values
     f32:	19 82       	std	Y+1, r1	; 0x01
     f34:	0b c0       	rjmp	.+22     	; 0xf4c <update_display_values+0x2c4>
								vol_index[i] = 7;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	80 50       	subi	r24, 0x00	; 0
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	27 e0       	ldi	r18, 0x07	; 7
     f42:	fc 01       	movw	r30, r24
     f44:	20 83       	st	Z, r18
						case 1:
							ctrl_menu_FLAG = 1;
							ctrl_index = 4;
							break;
						case 2:
							for(uint8_t i = 0; i < 5; i++) {//Reset the values
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	85 30       	cpi	r24, 0x05	; 5
     f50:	90 f3       	brcs	.-28     	; 0xf36 <update_display_values+0x2ae>
								vol_index[i] = 7;
							}
							break;
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <update_display_values+0x2dc>
						case 3:
							menu_FLAG = 0;
     f54:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <menu_FLAG>
							ctrl_index = 0;
     f58:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
							ctrl_menu_FLAG = 1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ctrl_menu_FLAG>
							break;
     f62:	00 00       	nop
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <update_display_values+0x2e4>
					}
				}
			}
		} else {
			menu_FLAG = 1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <menu_FLAG>
		}
	}
}
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <init_timer>:

void init_timer() {
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     f80:	84 e8       	ldi	r24, 0x84	; 132
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	fc 01       	movw	r30, r24
     f86:	11 82       	std	Z+1, r1	; 0x01
     f88:	10 82       	st	Z, r1

	OCR1A = 20000;
     f8a:	88 e8       	ldi	r24, 0x88	; 136
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	20 e2       	ldi	r18, 0x20	; 32
     f90:	3e e4       	ldi	r19, 0x4E	; 78
     f92:	fc 01       	movw	r30, r24
     f94:	31 83       	std	Z+1, r19	; 0x01
     f96:	20 83       	st	Z, r18

	TIMSK1 |= (1 << OCF1A);
     f98:	8f e6       	ldi	r24, 0x6F	; 111
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	2f e6       	ldi	r18, 0x6F	; 111
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	f9 01       	movw	r30, r18
     fa2:	20 81       	ld	r18, Z
     fa4:	22 60       	ori	r18, 0x02	; 2
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 83       	st	Z, r18

	TCCR1B |= (1 << CS11) | (1 << WGM12);
     faa:	81 e8       	ldi	r24, 0x81	; 129
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	21 e8       	ldi	r18, 0x81	; 129
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	f9 01       	movw	r30, r18
     fb4:	20 81       	ld	r18, Z
     fb6:	2a 60       	ori	r18, 0x0A	; 10
     fb8:	fc 01       	movw	r30, r24
     fba:	20 83       	st	Z, r18
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <activity>:

void activity() {
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	activity_FLAG = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <activity_FLAG>
	activity_counter = 0;
     fd0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <activity_counter>
	back_light_counter = 0;
     fd4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <back_light_counter+0x1>
     fd8:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <back_light_counter>
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <init_rot_but>:

void init_rot_but() {
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1 << PCIE1) | (1 << PCIE0);
     fea:	88 e6       	ldi	r24, 0x68	; 104
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	28 e6       	ldi	r18, 0x68	; 104
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	f9 01       	movw	r30, r18
     ff4:	20 81       	ld	r18, Z
     ff6:	23 60       	ori	r18, 0x03	; 3
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 83       	st	Z, r18
	PCMSK1 |= (1 << PCINT8);
     ffc:	8c e6       	ldi	r24, 0x6C	; 108
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	2c e6       	ldi	r18, 0x6C	; 108
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	f9 01       	movw	r30, r18
    1006:	20 81       	ld	r18, Z
    1008:	21 60       	ori	r18, 0x01	; 1
    100a:	fc 01       	movw	r30, r24
    100c:	20 83       	st	Z, r18
	PCMSK0 |= (1 << PCINT7);
    100e:	8b e6       	ldi	r24, 0x6B	; 107
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	2b e6       	ldi	r18, 0x6B	; 107
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	f9 01       	movw	r30, r18
    1018:	20 81       	ld	r18, Z
    101a:	20 68       	ori	r18, 0x80	; 128
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <__udivmodsi4>:
    1026:	a1 e2       	ldi	r26, 0x21	; 33
    1028:	1a 2e       	mov	r1, r26
    102a:	aa 1b       	sub	r26, r26
    102c:	bb 1b       	sub	r27, r27
    102e:	fd 01       	movw	r30, r26
    1030:	0d c0       	rjmp	.+26     	; 0x104c <__udivmodsi4_ep>

00001032 <__udivmodsi4_loop>:
    1032:	aa 1f       	adc	r26, r26
    1034:	bb 1f       	adc	r27, r27
    1036:	ee 1f       	adc	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	a2 17       	cp	r26, r18
    103c:	b3 07       	cpc	r27, r19
    103e:	e4 07       	cpc	r30, r20
    1040:	f5 07       	cpc	r31, r21
    1042:	20 f0       	brcs	.+8      	; 0x104c <__udivmodsi4_ep>
    1044:	a2 1b       	sub	r26, r18
    1046:	b3 0b       	sbc	r27, r19
    1048:	e4 0b       	sbc	r30, r20
    104a:	f5 0b       	sbc	r31, r21

0000104c <__udivmodsi4_ep>:
    104c:	66 1f       	adc	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	88 1f       	adc	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	1a 94       	dec	r1
    1056:	69 f7       	brne	.-38     	; 0x1032 <__udivmodsi4_loop>
    1058:	60 95       	com	r22
    105a:	70 95       	com	r23
    105c:	80 95       	com	r24
    105e:	90 95       	com	r25
    1060:	9b 01       	movw	r18, r22
    1062:	ac 01       	movw	r20, r24
    1064:	bd 01       	movw	r22, r26
    1066:	cf 01       	movw	r24, r30
    1068:	08 95       	ret

0000106a <strlen>:
    106a:	fc 01       	movw	r30, r24
    106c:	01 90       	ld	r0, Z+
    106e:	00 20       	and	r0, r0
    1070:	e9 f7       	brne	.-6      	; 0x106c <strlen+0x2>
    1072:	80 95       	com	r24
    1074:	90 95       	com	r25
    1076:	8e 0f       	add	r24, r30
    1078:	9f 1f       	adc	r25, r31
    107a:	08 95       	ret

0000107c <sprintf>:
    107c:	ae e0       	ldi	r26, 0x0E	; 14
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e4 e4       	ldi	r30, 0x44	; 68
    1082:	f8 e0       	ldi	r31, 0x08	; 8
    1084:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__prologue_saves__+0x1c>
    1088:	0d 89       	ldd	r16, Y+21	; 0x15
    108a:	1e 89       	ldd	r17, Y+22	; 0x16
    108c:	86 e0       	ldi	r24, 0x06	; 6
    108e:	8c 83       	std	Y+4, r24	; 0x04
    1090:	1a 83       	std	Y+2, r17	; 0x02
    1092:	09 83       	std	Y+1, r16	; 0x01
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	9f e7       	ldi	r25, 0x7F	; 127
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
    109c:	ae 01       	movw	r20, r28
    109e:	47 5e       	subi	r20, 0xE7	; 231
    10a0:	5f 4f       	sbci	r21, 0xFF	; 255
    10a2:	6f 89       	ldd	r22, Y+23	; 0x17
    10a4:	78 8d       	ldd	r23, Y+24	; 0x18
    10a6:	ce 01       	movw	r24, r28
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	0e 94 61 08 	call	0x10c2	; 0x10c2 <vfprintf>
    10ae:	2f 81       	ldd	r18, Y+7	; 0x07
    10b0:	38 85       	ldd	r19, Y+8	; 0x08
    10b2:	f8 01       	movw	r30, r16
    10b4:	e2 0f       	add	r30, r18
    10b6:	f3 1f       	adc	r31, r19
    10b8:	10 82       	st	Z, r1
    10ba:	2e 96       	adiw	r28, 0x0e	; 14
    10bc:	e4 e0       	ldi	r30, 0x04	; 4
    10be:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__epilogue_restores__+0x1c>

000010c2 <vfprintf>:
    10c2:	ac e0       	ldi	r26, 0x0C	; 12
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e7 e6       	ldi	r30, 0x67	; 103
    10c8:	f8 e0       	ldi	r31, 0x08	; 8
    10ca:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__prologue_saves__>
    10ce:	7c 01       	movw	r14, r24
    10d0:	6b 01       	movw	r12, r22
    10d2:	8a 01       	movw	r16, r20
    10d4:	fc 01       	movw	r30, r24
    10d6:	17 82       	std	Z+7, r1	; 0x07
    10d8:	16 82       	std	Z+6, r1	; 0x06
    10da:	83 81       	ldd	r24, Z+3	; 0x03
    10dc:	81 ff       	sbrs	r24, 1
    10de:	bd c1       	rjmp	.+890    	; 0x145a <vfprintf+0x398>
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	4c 01       	movw	r8, r24
    10e6:	f7 01       	movw	r30, r14
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	f6 01       	movw	r30, r12
    10ec:	93 fd       	sbrc	r25, 3
    10ee:	85 91       	lpm	r24, Z+
    10f0:	93 ff       	sbrs	r25, 3
    10f2:	81 91       	ld	r24, Z+
    10f4:	6f 01       	movw	r12, r30
    10f6:	88 23       	and	r24, r24
    10f8:	09 f4       	brne	.+2      	; 0x10fc <vfprintf+0x3a>
    10fa:	ab c1       	rjmp	.+854    	; 0x1452 <vfprintf+0x390>
    10fc:	85 32       	cpi	r24, 0x25	; 37
    10fe:	39 f4       	brne	.+14     	; 0x110e <vfprintf+0x4c>
    1100:	93 fd       	sbrc	r25, 3
    1102:	85 91       	lpm	r24, Z+
    1104:	93 ff       	sbrs	r25, 3
    1106:	81 91       	ld	r24, Z+
    1108:	6f 01       	movw	r12, r30
    110a:	85 32       	cpi	r24, 0x25	; 37
    110c:	29 f4       	brne	.+10     	; 0x1118 <vfprintf+0x56>
    110e:	b7 01       	movw	r22, r14
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1116:	e7 cf       	rjmp	.-50     	; 0x10e6 <vfprintf+0x24>
    1118:	51 2c       	mov	r5, r1
    111a:	31 2c       	mov	r3, r1
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	20 32       	cpi	r18, 0x20	; 32
    1120:	a0 f4       	brcc	.+40     	; 0x114a <vfprintf+0x88>
    1122:	8b 32       	cpi	r24, 0x2B	; 43
    1124:	69 f0       	breq	.+26     	; 0x1140 <vfprintf+0x7e>
    1126:	30 f4       	brcc	.+12     	; 0x1134 <vfprintf+0x72>
    1128:	80 32       	cpi	r24, 0x20	; 32
    112a:	59 f0       	breq	.+22     	; 0x1142 <vfprintf+0x80>
    112c:	83 32       	cpi	r24, 0x23	; 35
    112e:	69 f4       	brne	.+26     	; 0x114a <vfprintf+0x88>
    1130:	20 61       	ori	r18, 0x10	; 16
    1132:	2c c0       	rjmp	.+88     	; 0x118c <vfprintf+0xca>
    1134:	8d 32       	cpi	r24, 0x2D	; 45
    1136:	39 f0       	breq	.+14     	; 0x1146 <vfprintf+0x84>
    1138:	80 33       	cpi	r24, 0x30	; 48
    113a:	39 f4       	brne	.+14     	; 0x114a <vfprintf+0x88>
    113c:	21 60       	ori	r18, 0x01	; 1
    113e:	26 c0       	rjmp	.+76     	; 0x118c <vfprintf+0xca>
    1140:	22 60       	ori	r18, 0x02	; 2
    1142:	24 60       	ori	r18, 0x04	; 4
    1144:	23 c0       	rjmp	.+70     	; 0x118c <vfprintf+0xca>
    1146:	28 60       	ori	r18, 0x08	; 8
    1148:	21 c0       	rjmp	.+66     	; 0x118c <vfprintf+0xca>
    114a:	27 fd       	sbrc	r18, 7
    114c:	27 c0       	rjmp	.+78     	; 0x119c <vfprintf+0xda>
    114e:	30 ed       	ldi	r19, 0xD0	; 208
    1150:	38 0f       	add	r19, r24
    1152:	3a 30       	cpi	r19, 0x0A	; 10
    1154:	78 f4       	brcc	.+30     	; 0x1174 <vfprintf+0xb2>
    1156:	26 ff       	sbrs	r18, 6
    1158:	06 c0       	rjmp	.+12     	; 0x1166 <vfprintf+0xa4>
    115a:	fa e0       	ldi	r31, 0x0A	; 10
    115c:	5f 9e       	mul	r5, r31
    115e:	30 0d       	add	r19, r0
    1160:	11 24       	eor	r1, r1
    1162:	53 2e       	mov	r5, r19
    1164:	13 c0       	rjmp	.+38     	; 0x118c <vfprintf+0xca>
    1166:	8a e0       	ldi	r24, 0x0A	; 10
    1168:	38 9e       	mul	r3, r24
    116a:	30 0d       	add	r19, r0
    116c:	11 24       	eor	r1, r1
    116e:	33 2e       	mov	r3, r19
    1170:	20 62       	ori	r18, 0x20	; 32
    1172:	0c c0       	rjmp	.+24     	; 0x118c <vfprintf+0xca>
    1174:	8e 32       	cpi	r24, 0x2E	; 46
    1176:	21 f4       	brne	.+8      	; 0x1180 <vfprintf+0xbe>
    1178:	26 fd       	sbrc	r18, 6
    117a:	6b c1       	rjmp	.+726    	; 0x1452 <vfprintf+0x390>
    117c:	20 64       	ori	r18, 0x40	; 64
    117e:	06 c0       	rjmp	.+12     	; 0x118c <vfprintf+0xca>
    1180:	8c 36       	cpi	r24, 0x6C	; 108
    1182:	11 f4       	brne	.+4      	; 0x1188 <vfprintf+0xc6>
    1184:	20 68       	ori	r18, 0x80	; 128
    1186:	02 c0       	rjmp	.+4      	; 0x118c <vfprintf+0xca>
    1188:	88 36       	cpi	r24, 0x68	; 104
    118a:	41 f4       	brne	.+16     	; 0x119c <vfprintf+0xda>
    118c:	f6 01       	movw	r30, r12
    118e:	93 fd       	sbrc	r25, 3
    1190:	85 91       	lpm	r24, Z+
    1192:	93 ff       	sbrs	r25, 3
    1194:	81 91       	ld	r24, Z+
    1196:	6f 01       	movw	r12, r30
    1198:	81 11       	cpse	r24, r1
    119a:	c1 cf       	rjmp	.-126    	; 0x111e <vfprintf+0x5c>
    119c:	98 2f       	mov	r25, r24
    119e:	9f 7d       	andi	r25, 0xDF	; 223
    11a0:	95 54       	subi	r25, 0x45	; 69
    11a2:	93 30       	cpi	r25, 0x03	; 3
    11a4:	28 f4       	brcc	.+10     	; 0x11b0 <vfprintf+0xee>
    11a6:	0c 5f       	subi	r16, 0xFC	; 252
    11a8:	1f 4f       	sbci	r17, 0xFF	; 255
    11aa:	ff e3       	ldi	r31, 0x3F	; 63
    11ac:	f9 83       	std	Y+1, r31	; 0x01
    11ae:	0d c0       	rjmp	.+26     	; 0x11ca <vfprintf+0x108>
    11b0:	83 36       	cpi	r24, 0x63	; 99
    11b2:	31 f0       	breq	.+12     	; 0x11c0 <vfprintf+0xfe>
    11b4:	83 37       	cpi	r24, 0x73	; 115
    11b6:	71 f0       	breq	.+28     	; 0x11d4 <vfprintf+0x112>
    11b8:	83 35       	cpi	r24, 0x53	; 83
    11ba:	09 f0       	breq	.+2      	; 0x11be <vfprintf+0xfc>
    11bc:	5b c0       	rjmp	.+182    	; 0x1274 <vfprintf+0x1b2>
    11be:	22 c0       	rjmp	.+68     	; 0x1204 <vfprintf+0x142>
    11c0:	f8 01       	movw	r30, r16
    11c2:	80 81       	ld	r24, Z
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	0e 5f       	subi	r16, 0xFE	; 254
    11c8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ca:	44 24       	eor	r4, r4
    11cc:	43 94       	inc	r4
    11ce:	51 2c       	mov	r5, r1
    11d0:	54 01       	movw	r10, r8
    11d2:	15 c0       	rjmp	.+42     	; 0x11fe <vfprintf+0x13c>
    11d4:	38 01       	movw	r6, r16
    11d6:	f2 e0       	ldi	r31, 0x02	; 2
    11d8:	6f 0e       	add	r6, r31
    11da:	71 1c       	adc	r7, r1
    11dc:	f8 01       	movw	r30, r16
    11de:	a0 80       	ld	r10, Z
    11e0:	b1 80       	ldd	r11, Z+1	; 0x01
    11e2:	26 ff       	sbrs	r18, 6
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <vfprintf+0x12a>
    11e6:	65 2d       	mov	r22, r5
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <vfprintf+0x12e>
    11ec:	6f ef       	ldi	r22, 0xFF	; 255
    11ee:	7f ef       	ldi	r23, 0xFF	; 255
    11f0:	c5 01       	movw	r24, r10
    11f2:	2c 87       	std	Y+12, r18	; 0x0c
    11f4:	0e 94 3e 0a 	call	0x147c	; 0x147c <strnlen>
    11f8:	2c 01       	movw	r4, r24
    11fa:	83 01       	movw	r16, r6
    11fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    11fe:	2f 77       	andi	r18, 0x7F	; 127
    1200:	22 2e       	mov	r2, r18
    1202:	17 c0       	rjmp	.+46     	; 0x1232 <vfprintf+0x170>
    1204:	38 01       	movw	r6, r16
    1206:	f2 e0       	ldi	r31, 0x02	; 2
    1208:	6f 0e       	add	r6, r31
    120a:	71 1c       	adc	r7, r1
    120c:	f8 01       	movw	r30, r16
    120e:	a0 80       	ld	r10, Z
    1210:	b1 80       	ldd	r11, Z+1	; 0x01
    1212:	26 ff       	sbrs	r18, 6
    1214:	03 c0       	rjmp	.+6      	; 0x121c <vfprintf+0x15a>
    1216:	65 2d       	mov	r22, r5
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <vfprintf+0x15e>
    121c:	6f ef       	ldi	r22, 0xFF	; 255
    121e:	7f ef       	ldi	r23, 0xFF	; 255
    1220:	c5 01       	movw	r24, r10
    1222:	2c 87       	std	Y+12, r18	; 0x0c
    1224:	0e 94 33 0a 	call	0x1466	; 0x1466 <strnlen_P>
    1228:	2c 01       	movw	r4, r24
    122a:	2c 85       	ldd	r18, Y+12	; 0x0c
    122c:	20 68       	ori	r18, 0x80	; 128
    122e:	22 2e       	mov	r2, r18
    1230:	83 01       	movw	r16, r6
    1232:	23 fc       	sbrc	r2, 3
    1234:	1b c0       	rjmp	.+54     	; 0x126c <vfprintf+0x1aa>
    1236:	83 2d       	mov	r24, r3
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	48 16       	cp	r4, r24
    123c:	59 06       	cpc	r5, r25
    123e:	b0 f4       	brcc	.+44     	; 0x126c <vfprintf+0x1aa>
    1240:	b7 01       	movw	r22, r14
    1242:	80 e2       	ldi	r24, 0x20	; 32
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    124a:	3a 94       	dec	r3
    124c:	f4 cf       	rjmp	.-24     	; 0x1236 <vfprintf+0x174>
    124e:	f5 01       	movw	r30, r10
    1250:	27 fc       	sbrc	r2, 7
    1252:	85 91       	lpm	r24, Z+
    1254:	27 fe       	sbrs	r2, 7
    1256:	81 91       	ld	r24, Z+
    1258:	5f 01       	movw	r10, r30
    125a:	b7 01       	movw	r22, r14
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1262:	31 10       	cpse	r3, r1
    1264:	3a 94       	dec	r3
    1266:	f1 e0       	ldi	r31, 0x01	; 1
    1268:	4f 1a       	sub	r4, r31
    126a:	51 08       	sbc	r5, r1
    126c:	41 14       	cp	r4, r1
    126e:	51 04       	cpc	r5, r1
    1270:	71 f7       	brne	.-36     	; 0x124e <vfprintf+0x18c>
    1272:	e5 c0       	rjmp	.+458    	; 0x143e <vfprintf+0x37c>
    1274:	84 36       	cpi	r24, 0x64	; 100
    1276:	11 f0       	breq	.+4      	; 0x127c <vfprintf+0x1ba>
    1278:	89 36       	cpi	r24, 0x69	; 105
    127a:	39 f5       	brne	.+78     	; 0x12ca <vfprintf+0x208>
    127c:	f8 01       	movw	r30, r16
    127e:	27 ff       	sbrs	r18, 7
    1280:	07 c0       	rjmp	.+14     	; 0x1290 <vfprintf+0x1ce>
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	0c 5f       	subi	r16, 0xFC	; 252
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	08 c0       	rjmp	.+16     	; 0x12a0 <vfprintf+0x1de>
    1290:	60 81       	ld	r22, Z
    1292:	71 81       	ldd	r23, Z+1	; 0x01
    1294:	07 2e       	mov	r0, r23
    1296:	00 0c       	add	r0, r0
    1298:	88 0b       	sbc	r24, r24
    129a:	99 0b       	sbc	r25, r25
    129c:	0e 5f       	subi	r16, 0xFE	; 254
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	2f 76       	andi	r18, 0x6F	; 111
    12a2:	72 2e       	mov	r7, r18
    12a4:	97 ff       	sbrs	r25, 7
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <vfprintf+0x1f8>
    12a8:	90 95       	com	r25
    12aa:	80 95       	com	r24
    12ac:	70 95       	com	r23
    12ae:	61 95       	neg	r22
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	8f 4f       	sbci	r24, 0xFF	; 255
    12b4:	9f 4f       	sbci	r25, 0xFF	; 255
    12b6:	20 68       	ori	r18, 0x80	; 128
    12b8:	72 2e       	mov	r7, r18
    12ba:	2a e0       	ldi	r18, 0x0A	; 10
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	a4 01       	movw	r20, r8
    12c0:	0e 94 81 0a 	call	0x1502	; 0x1502 <__ultoa_invert>
    12c4:	a8 2e       	mov	r10, r24
    12c6:	a8 18       	sub	r10, r8
    12c8:	44 c0       	rjmp	.+136    	; 0x1352 <vfprintf+0x290>
    12ca:	85 37       	cpi	r24, 0x75	; 117
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <vfprintf+0x216>
    12ce:	2f 7e       	andi	r18, 0xEF	; 239
    12d0:	b2 2e       	mov	r11, r18
    12d2:	2a e0       	ldi	r18, 0x0A	; 10
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	25 c0       	rjmp	.+74     	; 0x1322 <vfprintf+0x260>
    12d8:	f2 2f       	mov	r31, r18
    12da:	f9 7f       	andi	r31, 0xF9	; 249
    12dc:	bf 2e       	mov	r11, r31
    12de:	8f 36       	cpi	r24, 0x6F	; 111
    12e0:	c1 f0       	breq	.+48     	; 0x1312 <vfprintf+0x250>
    12e2:	18 f4       	brcc	.+6      	; 0x12ea <vfprintf+0x228>
    12e4:	88 35       	cpi	r24, 0x58	; 88
    12e6:	79 f0       	breq	.+30     	; 0x1306 <vfprintf+0x244>
    12e8:	b4 c0       	rjmp	.+360    	; 0x1452 <vfprintf+0x390>
    12ea:	80 37       	cpi	r24, 0x70	; 112
    12ec:	19 f0       	breq	.+6      	; 0x12f4 <vfprintf+0x232>
    12ee:	88 37       	cpi	r24, 0x78	; 120
    12f0:	21 f0       	breq	.+8      	; 0x12fa <vfprintf+0x238>
    12f2:	af c0       	rjmp	.+350    	; 0x1452 <vfprintf+0x390>
    12f4:	2f 2f       	mov	r18, r31
    12f6:	20 61       	ori	r18, 0x10	; 16
    12f8:	b2 2e       	mov	r11, r18
    12fa:	b4 fe       	sbrs	r11, 4
    12fc:	0d c0       	rjmp	.+26     	; 0x1318 <vfprintf+0x256>
    12fe:	8b 2d       	mov	r24, r11
    1300:	84 60       	ori	r24, 0x04	; 4
    1302:	b8 2e       	mov	r11, r24
    1304:	09 c0       	rjmp	.+18     	; 0x1318 <vfprintf+0x256>
    1306:	24 ff       	sbrs	r18, 4
    1308:	0a c0       	rjmp	.+20     	; 0x131e <vfprintf+0x25c>
    130a:	9f 2f       	mov	r25, r31
    130c:	96 60       	ori	r25, 0x06	; 6
    130e:	b9 2e       	mov	r11, r25
    1310:	06 c0       	rjmp	.+12     	; 0x131e <vfprintf+0x25c>
    1312:	28 e0       	ldi	r18, 0x08	; 8
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	05 c0       	rjmp	.+10     	; 0x1322 <vfprintf+0x260>
    1318:	20 e1       	ldi	r18, 0x10	; 16
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <vfprintf+0x260>
    131e:	20 e1       	ldi	r18, 0x10	; 16
    1320:	32 e0       	ldi	r19, 0x02	; 2
    1322:	f8 01       	movw	r30, r16
    1324:	b7 fe       	sbrs	r11, 7
    1326:	07 c0       	rjmp	.+14     	; 0x1336 <vfprintf+0x274>
    1328:	60 81       	ld	r22, Z
    132a:	71 81       	ldd	r23, Z+1	; 0x01
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	0c 5f       	subi	r16, 0xFC	; 252
    1332:	1f 4f       	sbci	r17, 0xFF	; 255
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <vfprintf+0x280>
    1336:	60 81       	ld	r22, Z
    1338:	71 81       	ldd	r23, Z+1	; 0x01
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 5f       	subi	r16, 0xFE	; 254
    1340:	1f 4f       	sbci	r17, 0xFF	; 255
    1342:	a4 01       	movw	r20, r8
    1344:	0e 94 81 0a 	call	0x1502	; 0x1502 <__ultoa_invert>
    1348:	a8 2e       	mov	r10, r24
    134a:	a8 18       	sub	r10, r8
    134c:	fb 2d       	mov	r31, r11
    134e:	ff 77       	andi	r31, 0x7F	; 127
    1350:	7f 2e       	mov	r7, r31
    1352:	76 fe       	sbrs	r7, 6
    1354:	0b c0       	rjmp	.+22     	; 0x136c <vfprintf+0x2aa>
    1356:	37 2d       	mov	r19, r7
    1358:	3e 7f       	andi	r19, 0xFE	; 254
    135a:	a5 14       	cp	r10, r5
    135c:	50 f4       	brcc	.+20     	; 0x1372 <vfprintf+0x2b0>
    135e:	74 fe       	sbrs	r7, 4
    1360:	0a c0       	rjmp	.+20     	; 0x1376 <vfprintf+0x2b4>
    1362:	72 fc       	sbrc	r7, 2
    1364:	08 c0       	rjmp	.+16     	; 0x1376 <vfprintf+0x2b4>
    1366:	37 2d       	mov	r19, r7
    1368:	3e 7e       	andi	r19, 0xEE	; 238
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <vfprintf+0x2b4>
    136c:	ba 2c       	mov	r11, r10
    136e:	37 2d       	mov	r19, r7
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <vfprintf+0x2b6>
    1372:	ba 2c       	mov	r11, r10
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <vfprintf+0x2b6>
    1376:	b5 2c       	mov	r11, r5
    1378:	34 ff       	sbrs	r19, 4
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <vfprintf+0x2d4>
    137c:	fe 01       	movw	r30, r28
    137e:	ea 0d       	add	r30, r10
    1380:	f1 1d       	adc	r31, r1
    1382:	80 81       	ld	r24, Z
    1384:	80 33       	cpi	r24, 0x30	; 48
    1386:	11 f4       	brne	.+4      	; 0x138c <vfprintf+0x2ca>
    1388:	39 7e       	andi	r19, 0xE9	; 233
    138a:	09 c0       	rjmp	.+18     	; 0x139e <vfprintf+0x2dc>
    138c:	32 ff       	sbrs	r19, 2
    138e:	06 c0       	rjmp	.+12     	; 0x139c <vfprintf+0x2da>
    1390:	b3 94       	inc	r11
    1392:	b3 94       	inc	r11
    1394:	04 c0       	rjmp	.+8      	; 0x139e <vfprintf+0x2dc>
    1396:	83 2f       	mov	r24, r19
    1398:	86 78       	andi	r24, 0x86	; 134
    139a:	09 f0       	breq	.+2      	; 0x139e <vfprintf+0x2dc>
    139c:	b3 94       	inc	r11
    139e:	33 fd       	sbrc	r19, 3
    13a0:	13 c0       	rjmp	.+38     	; 0x13c8 <vfprintf+0x306>
    13a2:	30 ff       	sbrs	r19, 0
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <vfprintf+0x2f0>
    13a6:	5a 2c       	mov	r5, r10
    13a8:	b3 14       	cp	r11, r3
    13aa:	18 f4       	brcc	.+6      	; 0x13b2 <vfprintf+0x2f0>
    13ac:	53 0c       	add	r5, r3
    13ae:	5b 18       	sub	r5, r11
    13b0:	b3 2c       	mov	r11, r3
    13b2:	b3 14       	cp	r11, r3
    13b4:	68 f4       	brcc	.+26     	; 0x13d0 <vfprintf+0x30e>
    13b6:	b7 01       	movw	r22, r14
    13b8:	80 e2       	ldi	r24, 0x20	; 32
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	3c 87       	std	Y+12, r19	; 0x0c
    13be:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    13c2:	b3 94       	inc	r11
    13c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    13c6:	f5 cf       	rjmp	.-22     	; 0x13b2 <vfprintf+0x2f0>
    13c8:	b3 14       	cp	r11, r3
    13ca:	10 f4       	brcc	.+4      	; 0x13d0 <vfprintf+0x30e>
    13cc:	3b 18       	sub	r3, r11
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <vfprintf+0x310>
    13d0:	31 2c       	mov	r3, r1
    13d2:	34 ff       	sbrs	r19, 4
    13d4:	12 c0       	rjmp	.+36     	; 0x13fa <vfprintf+0x338>
    13d6:	b7 01       	movw	r22, r14
    13d8:	80 e3       	ldi	r24, 0x30	; 48
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	3c 87       	std	Y+12, r19	; 0x0c
    13de:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    13e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    13e4:	32 ff       	sbrs	r19, 2
    13e6:	17 c0       	rjmp	.+46     	; 0x1416 <vfprintf+0x354>
    13e8:	31 fd       	sbrc	r19, 1
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <vfprintf+0x330>
    13ec:	88 e7       	ldi	r24, 0x78	; 120
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <vfprintf+0x334>
    13f2:	88 e5       	ldi	r24, 0x58	; 88
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	b7 01       	movw	r22, r14
    13f8:	0c c0       	rjmp	.+24     	; 0x1412 <vfprintf+0x350>
    13fa:	83 2f       	mov	r24, r19
    13fc:	86 78       	andi	r24, 0x86	; 134
    13fe:	59 f0       	breq	.+22     	; 0x1416 <vfprintf+0x354>
    1400:	31 ff       	sbrs	r19, 1
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <vfprintf+0x346>
    1404:	8b e2       	ldi	r24, 0x2B	; 43
    1406:	01 c0       	rjmp	.+2      	; 0x140a <vfprintf+0x348>
    1408:	80 e2       	ldi	r24, 0x20	; 32
    140a:	37 fd       	sbrc	r19, 7
    140c:	8d e2       	ldi	r24, 0x2D	; 45
    140e:	b7 01       	movw	r22, r14
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1416:	a5 14       	cp	r10, r5
    1418:	38 f4       	brcc	.+14     	; 0x1428 <vfprintf+0x366>
    141a:	b7 01       	movw	r22, r14
    141c:	80 e3       	ldi	r24, 0x30	; 48
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1424:	5a 94       	dec	r5
    1426:	f7 cf       	rjmp	.-18     	; 0x1416 <vfprintf+0x354>
    1428:	aa 94       	dec	r10
    142a:	f4 01       	movw	r30, r8
    142c:	ea 0d       	add	r30, r10
    142e:	f1 1d       	adc	r31, r1
    1430:	80 81       	ld	r24, Z
    1432:	b7 01       	movw	r22, r14
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    143a:	a1 10       	cpse	r10, r1
    143c:	f5 cf       	rjmp	.-22     	; 0x1428 <vfprintf+0x366>
    143e:	33 20       	and	r3, r3
    1440:	09 f4       	brne	.+2      	; 0x1444 <vfprintf+0x382>
    1442:	51 ce       	rjmp	.-862    	; 0x10e6 <vfprintf+0x24>
    1444:	b7 01       	movw	r22, r14
    1446:	80 e2       	ldi	r24, 0x20	; 32
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    144e:	3a 94       	dec	r3
    1450:	f6 cf       	rjmp	.-20     	; 0x143e <vfprintf+0x37c>
    1452:	f7 01       	movw	r30, r14
    1454:	86 81       	ldd	r24, Z+6	; 0x06
    1456:	97 81       	ldd	r25, Z+7	; 0x07
    1458:	02 c0       	rjmp	.+4      	; 0x145e <vfprintf+0x39c>
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	9f ef       	ldi	r25, 0xFF	; 255
    145e:	2c 96       	adiw	r28, 0x0c	; 12
    1460:	e2 e1       	ldi	r30, 0x12	; 18
    1462:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__epilogue_restores__>

00001466 <strnlen_P>:
    1466:	fc 01       	movw	r30, r24
    1468:	05 90       	lpm	r0, Z+
    146a:	61 50       	subi	r22, 0x01	; 1
    146c:	70 40       	sbci	r23, 0x00	; 0
    146e:	01 10       	cpse	r0, r1
    1470:	d8 f7       	brcc	.-10     	; 0x1468 <strnlen_P+0x2>
    1472:	80 95       	com	r24
    1474:	90 95       	com	r25
    1476:	8e 0f       	add	r24, r30
    1478:	9f 1f       	adc	r25, r31
    147a:	08 95       	ret

0000147c <strnlen>:
    147c:	fc 01       	movw	r30, r24
    147e:	61 50       	subi	r22, 0x01	; 1
    1480:	70 40       	sbci	r23, 0x00	; 0
    1482:	01 90       	ld	r0, Z+
    1484:	01 10       	cpse	r0, r1
    1486:	d8 f7       	brcc	.-10     	; 0x147e <strnlen+0x2>
    1488:	80 95       	com	r24
    148a:	90 95       	com	r25
    148c:	8e 0f       	add	r24, r30
    148e:	9f 1f       	adc	r25, r31
    1490:	08 95       	ret

00001492 <fputc>:
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	fb 01       	movw	r30, r22
    149c:	23 81       	ldd	r18, Z+3	; 0x03
    149e:	21 fd       	sbrc	r18, 1
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <fputc+0x16>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	28 c0       	rjmp	.+80     	; 0x14f8 <fputc+0x66>
    14a8:	22 ff       	sbrs	r18, 2
    14aa:	16 c0       	rjmp	.+44     	; 0x14d8 <fputc+0x46>
    14ac:	46 81       	ldd	r20, Z+6	; 0x06
    14ae:	57 81       	ldd	r21, Z+7	; 0x07
    14b0:	24 81       	ldd	r18, Z+4	; 0x04
    14b2:	35 81       	ldd	r19, Z+5	; 0x05
    14b4:	42 17       	cp	r20, r18
    14b6:	53 07       	cpc	r21, r19
    14b8:	44 f4       	brge	.+16     	; 0x14ca <fputc+0x38>
    14ba:	a0 81       	ld	r26, Z
    14bc:	b1 81       	ldd	r27, Z+1	; 0x01
    14be:	9d 01       	movw	r18, r26
    14c0:	2f 5f       	subi	r18, 0xFF	; 255
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	31 83       	std	Z+1, r19	; 0x01
    14c6:	20 83       	st	Z, r18
    14c8:	8c 93       	st	X, r24
    14ca:	26 81       	ldd	r18, Z+6	; 0x06
    14cc:	37 81       	ldd	r19, Z+7	; 0x07
    14ce:	2f 5f       	subi	r18, 0xFF	; 255
    14d0:	3f 4f       	sbci	r19, 0xFF	; 255
    14d2:	37 83       	std	Z+7, r19	; 0x07
    14d4:	26 83       	std	Z+6, r18	; 0x06
    14d6:	10 c0       	rjmp	.+32     	; 0x14f8 <fputc+0x66>
    14d8:	eb 01       	movw	r28, r22
    14da:	09 2f       	mov	r16, r25
    14dc:	18 2f       	mov	r17, r24
    14de:	00 84       	ldd	r0, Z+8	; 0x08
    14e0:	f1 85       	ldd	r31, Z+9	; 0x09
    14e2:	e0 2d       	mov	r30, r0
    14e4:	09 95       	icall
    14e6:	89 2b       	or	r24, r25
    14e8:	e1 f6       	brne	.-72     	; 0x14a2 <fputc+0x10>
    14ea:	8e 81       	ldd	r24, Y+6	; 0x06
    14ec:	9f 81       	ldd	r25, Y+7	; 0x07
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	9f 83       	std	Y+7, r25	; 0x07
    14f2:	8e 83       	std	Y+6, r24	; 0x06
    14f4:	81 2f       	mov	r24, r17
    14f6:	90 2f       	mov	r25, r16
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	08 95       	ret

00001502 <__ultoa_invert>:
    1502:	fa 01       	movw	r30, r20
    1504:	aa 27       	eor	r26, r26
    1506:	28 30       	cpi	r18, 0x08	; 8
    1508:	51 f1       	breq	.+84     	; 0x155e <__ultoa_invert+0x5c>
    150a:	20 31       	cpi	r18, 0x10	; 16
    150c:	81 f1       	breq	.+96     	; 0x156e <__ultoa_invert+0x6c>
    150e:	e8 94       	clt
    1510:	6f 93       	push	r22
    1512:	6e 7f       	andi	r22, 0xFE	; 254
    1514:	6e 5f       	subi	r22, 0xFE	; 254
    1516:	7f 4f       	sbci	r23, 0xFF	; 255
    1518:	8f 4f       	sbci	r24, 0xFF	; 255
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	af 4f       	sbci	r26, 0xFF	; 255
    151e:	b1 e0       	ldi	r27, 0x01	; 1
    1520:	3e d0       	rcall	.+124    	; 0x159e <__ultoa_invert+0x9c>
    1522:	b4 e0       	ldi	r27, 0x04	; 4
    1524:	3c d0       	rcall	.+120    	; 0x159e <__ultoa_invert+0x9c>
    1526:	67 0f       	add	r22, r23
    1528:	78 1f       	adc	r23, r24
    152a:	89 1f       	adc	r24, r25
    152c:	9a 1f       	adc	r25, r26
    152e:	a1 1d       	adc	r26, r1
    1530:	68 0f       	add	r22, r24
    1532:	79 1f       	adc	r23, r25
    1534:	8a 1f       	adc	r24, r26
    1536:	91 1d       	adc	r25, r1
    1538:	a1 1d       	adc	r26, r1
    153a:	6a 0f       	add	r22, r26
    153c:	71 1d       	adc	r23, r1
    153e:	81 1d       	adc	r24, r1
    1540:	91 1d       	adc	r25, r1
    1542:	a1 1d       	adc	r26, r1
    1544:	20 d0       	rcall	.+64     	; 0x1586 <__ultoa_invert+0x84>
    1546:	09 f4       	brne	.+2      	; 0x154a <__ultoa_invert+0x48>
    1548:	68 94       	set
    154a:	3f 91       	pop	r19
    154c:	2a e0       	ldi	r18, 0x0A	; 10
    154e:	26 9f       	mul	r18, r22
    1550:	11 24       	eor	r1, r1
    1552:	30 19       	sub	r19, r0
    1554:	30 5d       	subi	r19, 0xD0	; 208
    1556:	31 93       	st	Z+, r19
    1558:	de f6       	brtc	.-74     	; 0x1510 <__ultoa_invert+0xe>
    155a:	cf 01       	movw	r24, r30
    155c:	08 95       	ret
    155e:	46 2f       	mov	r20, r22
    1560:	47 70       	andi	r20, 0x07	; 7
    1562:	40 5d       	subi	r20, 0xD0	; 208
    1564:	41 93       	st	Z+, r20
    1566:	b3 e0       	ldi	r27, 0x03	; 3
    1568:	0f d0       	rcall	.+30     	; 0x1588 <__ultoa_invert+0x86>
    156a:	c9 f7       	brne	.-14     	; 0x155e <__ultoa_invert+0x5c>
    156c:	f6 cf       	rjmp	.-20     	; 0x155a <__ultoa_invert+0x58>
    156e:	46 2f       	mov	r20, r22
    1570:	4f 70       	andi	r20, 0x0F	; 15
    1572:	40 5d       	subi	r20, 0xD0	; 208
    1574:	4a 33       	cpi	r20, 0x3A	; 58
    1576:	18 f0       	brcs	.+6      	; 0x157e <__ultoa_invert+0x7c>
    1578:	49 5d       	subi	r20, 0xD9	; 217
    157a:	31 fd       	sbrc	r19, 1
    157c:	40 52       	subi	r20, 0x20	; 32
    157e:	41 93       	st	Z+, r20
    1580:	02 d0       	rcall	.+4      	; 0x1586 <__ultoa_invert+0x84>
    1582:	a9 f7       	brne	.-22     	; 0x156e <__ultoa_invert+0x6c>
    1584:	ea cf       	rjmp	.-44     	; 0x155a <__ultoa_invert+0x58>
    1586:	b4 e0       	ldi	r27, 0x04	; 4
    1588:	a6 95       	lsr	r26
    158a:	97 95       	ror	r25
    158c:	87 95       	ror	r24
    158e:	77 95       	ror	r23
    1590:	67 95       	ror	r22
    1592:	ba 95       	dec	r27
    1594:	c9 f7       	brne	.-14     	; 0x1588 <__ultoa_invert+0x86>
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	61 05       	cpc	r22, r1
    159a:	71 05       	cpc	r23, r1
    159c:	08 95       	ret
    159e:	9b 01       	movw	r18, r22
    15a0:	ac 01       	movw	r20, r24
    15a2:	0a 2e       	mov	r0, r26
    15a4:	06 94       	lsr	r0
    15a6:	57 95       	ror	r21
    15a8:	47 95       	ror	r20
    15aa:	37 95       	ror	r19
    15ac:	27 95       	ror	r18
    15ae:	ba 95       	dec	r27
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__ultoa_invert+0xa2>
    15b2:	62 0f       	add	r22, r18
    15b4:	73 1f       	adc	r23, r19
    15b6:	84 1f       	adc	r24, r20
    15b8:	95 1f       	adc	r25, r21
    15ba:	a0 1d       	adc	r26, r0
    15bc:	08 95       	ret

000015be <__prologue_saves__>:
    15be:	2f 92       	push	r2
    15c0:	3f 92       	push	r3
    15c2:	4f 92       	push	r4
    15c4:	5f 92       	push	r5
    15c6:	6f 92       	push	r6
    15c8:	7f 92       	push	r7
    15ca:	8f 92       	push	r8
    15cc:	9f 92       	push	r9
    15ce:	af 92       	push	r10
    15d0:	bf 92       	push	r11
    15d2:	cf 92       	push	r12
    15d4:	df 92       	push	r13
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	ca 1b       	sub	r28, r26
    15e8:	db 0b       	sbc	r29, r27
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	09 94       	ijmp

000015f6 <__epilogue_restores__>:
    15f6:	2a 88       	ldd	r2, Y+18	; 0x12
    15f8:	39 88       	ldd	r3, Y+17	; 0x11
    15fa:	48 88       	ldd	r4, Y+16	; 0x10
    15fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    15fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1600:	7d 84       	ldd	r7, Y+13	; 0x0d
    1602:	8c 84       	ldd	r8, Y+12	; 0x0c
    1604:	9b 84       	ldd	r9, Y+11	; 0x0b
    1606:	aa 84       	ldd	r10, Y+10	; 0x0a
    1608:	b9 84       	ldd	r11, Y+9	; 0x09
    160a:	c8 84       	ldd	r12, Y+8	; 0x08
    160c:	df 80       	ldd	r13, Y+7	; 0x07
    160e:	ee 80       	ldd	r14, Y+6	; 0x06
    1610:	fd 80       	ldd	r15, Y+5	; 0x05
    1612:	0c 81       	ldd	r16, Y+4	; 0x04
    1614:	1b 81       	ldd	r17, Y+3	; 0x03
    1616:	aa 81       	ldd	r26, Y+2	; 0x02
    1618:	b9 81       	ldd	r27, Y+1	; 0x01
    161a:	ce 0f       	add	r28, r30
    161c:	d1 1d       	adc	r29, r1
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	ed 01       	movw	r28, r26
    162a:	08 95       	ret

0000162c <_exit>:
    162c:	f8 94       	cli

0000162e <__stop_program>:
    162e:	ff cf       	rjmp	.-2      	; 0x162e <__stop_program>
