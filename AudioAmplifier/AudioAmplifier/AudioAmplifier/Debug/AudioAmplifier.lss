
AudioAmplifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d32  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a48  00000000  00000000  0000115e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000778  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  00002320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000551  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051c  00000000  00000000  00002a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002f8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 01 	call	0x200	; 0x200 <main>
  9e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init_Pot_Meter>:
#include <avr/io.h>
#include "Dig_Pot_Lib.h"
#include "SPI_Lib.h"

void Init_Pot_Meter() {
	SPI_Init_Master();
  a6:	0e 94 8d 00 	call	0x11a	; 0x11a <SPI_Init_Master>
	CS_D |= (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	84 b9       	out	0x04, r24	; 4
	CS |= (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	87 60       	ori	r24, 0x07	; 7
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	08 95       	ret

000000b8 <Write_Pot_Meter>:
}

void Write_Pot_Meter(uint8_t value, uint8_t CS_pin) {
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <Write_Pot_Meter+0xa>
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	CS &= ~(1 << CS_pin);
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	01 e0       	ldi	r16, 0x01	; 1
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <Write_Pot_Meter+0x1a>
  ce:	00 0f       	add	r16, r16
  d0:	11 1f       	adc	r17, r17
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <Write_Pot_Meter+0x16>
  d6:	20 2f       	mov	r18, r16
  d8:	20 95       	com	r18
  da:	92 23       	and	r25, r18
  dc:	95 b9       	out	0x05, r25	; 5
	uint8_t data[2] = {0b00000000, value};
  de:	19 82       	std	Y+1, r1	; 0x01
  e0:	8a 83       	std	Y+2, r24	; 0x02
	SPI_Send_Large_Data(data);
  e2:	ce 01       	movw	r24, r28
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	0e 94 9a 00 	call	0x134	; 0x134 <SPI_Send_Large_Data>
	CS |= (1 << CS_pin);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	08 2b       	or	r16, r24
  ee:	05 b9       	out	0x05, r16	; 5
} 
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <i2cInit>:
#include <avr/io.h>
#include "i2cLib.h"

void i2cInit(){
    TWSR &= ~((1 << TWPS0) | (1 << TWPS1)); //prescaler set to 0
  fe:	e9 eb       	ldi	r30, 0xB9	; 185
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8c 7f       	andi	r24, 0xFC	; 252
 106:	80 83       	st	Z, r24
    TWBR = 12; //setting the bit rate to 400kHz
 108:	8c e0       	ldi	r24, 0x0C	; 12
 10a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    TWCR |= (1 << TWEN); //i2c enable 
 10e:	ec eb       	ldi	r30, 0xBC	; 188
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	84 60       	ori	r24, 0x04	; 4
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <SPI_Init_Master>:
//SS == "Slave Select			|| CS == "Chip Select"
 
 
void SPI_Init_Master() {
	/* Set the MOSI & SCK as Output lines */
	DDRB |= (1 << PINB3) | (1 << PINB5);
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	88 62       	ori	r24, 0x28	; 40
 11e:	84 b9       	out	0x04, r24	; 4
	/* Set the SCK pin to low */
	PORTB &= ~(1 << PINB5);
 120:	2d 98       	cbi	0x05, 5	; 5
	
	/* Enable SPI */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPR1); 
 122:	8c b5       	in	r24, 0x2c	; 44
 124:	83 65       	ori	r24, 0x53	; 83
 126:	8c bd       	out	0x2c, r24	; 44
 128:	08 95       	ret

0000012a <SPI_Send_Data>:
}

void SPI_Send_Data(uint8_t data) {
	/* Place the data in the transmitter buffer */
	SPDR = data;
 12a:	8e bd       	out	0x2e, r24	; 46

	/* Wait for the transmitter to complete */
	while(!(SPSR & (1 << SPIF)));
 12c:	0d b4       	in	r0, 0x2d	; 45
 12e:	07 fe       	sbrs	r0, 7
 130:	fd cf       	rjmp	.-6      	; 0x12c <SPI_Send_Data+0x2>
}
 132:	08 95       	ret

00000134 <SPI_Send_Large_Data>:

void SPI_Send_Large_Data(uint8_t *data) {
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
	/* Find the length of the data array */
	uint16_t len = 2;
	for(int i = 0; i < len; i++) {
		SPI_Send_Data(data[i]);
 13a:	88 81       	ld	r24, Y
 13c:	0e 94 95 00 	call	0x12a	; 0x12a <SPI_Send_Data>
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	0e 94 95 00 	call	0x12a	; 0x12a <SPI_Send_Data>
	}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <init_usart>:
/* Function to initialize the Usart behavior						*/
/* baud_rate is a number as ex. 9600								*/
/* parity_bits can either be NONE, EVEN or ODD						*/
/* stop_bits can either be ONE or TWO								*/
/* parity_bits and stop_bits have been defined in the header file	*/
void init_usart(uint16_t baud_rate, uint8_t parity_bits, uint8_t stop_bits) {
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	9c 01       	movw	r18, r24
 152:	c6 2f       	mov	r28, r22
 154:	d4 2f       	mov	r29, r20
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0); //Enable USART Transmitter and receiver
 156:	e1 ec       	ldi	r30, 0xC1	; 193
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 61       	ori	r24, 0x18	; 24
 15e:	80 83       	st	Z, r24
	UBRR0H = (BAUD(baud_rate) >> 8);
 160:	b9 01       	movw	r22, r18
 162:	76 95       	lsr	r23
 164:	67 95       	ror	r22
 166:	cb 01       	movw	r24, r22
 168:	a0 e0       	ldi	r26, 0x00	; 0
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	bc 01       	movw	r22, r24
 16e:	cd 01       	movw	r24, r26
 170:	60 5c       	subi	r22, 0xC0	; 192
 172:	7d 4b       	sbci	r23, 0xBD	; 189
 174:	80 4f       	sbci	r24, 0xF0	; 240
 176:	9f 4f       	sbci	r25, 0xFF	; 255
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	0e 94 0f 01 	call	0x21e	; 0x21e <__udivmodsi4>
 180:	da 01       	movw	r26, r20
 182:	c9 01       	movw	r24, r18
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	a1 09       	sbc	r26, r1
 188:	b1 09       	sbc	r27, r1
 18a:	89 2f       	mov	r24, r25
 18c:	9a 2f       	mov	r25, r26
 18e:	ab 2f       	mov	r26, r27
 190:	bb 27       	eor	r27, r27
 192:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD(baud_rate); //Set the baud rate to 9600
 196:	21 50       	subi	r18, 0x01	; 1
 198:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	/* Setting the parity bits for USART transmission */
	switch (parity_bits) {
 19c:	c1 30       	cpi	r28, 0x01	; 1
 19e:	51 f0       	breq	.+20     	; 0x1b4 <init_usart+0x68>
 1a0:	18 f0       	brcs	.+6      	; 0x1a8 <init_usart+0x5c>
 1a2:	c2 30       	cpi	r28, 0x02	; 2
 1a4:	81 f0       	breq	.+32     	; 0x1c6 <init_usart+0x7a>
 1a6:	14 c0       	rjmp	.+40     	; 0x1d0 <init_usart+0x84>
		case NONE:
			UCSR0C &= ~(1 << UPM00) & ~(1 << UPM01);
 1a8:	e2 ec       	ldi	r30, 0xC2	; 194
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	8f 7c       	andi	r24, 0xCF	; 207
 1b0:	80 83       	st	Z, r24
			break;
 1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <init_usart+0x84>
		case EVEN:
			UCSR0C |= (1 << UPM01);
 1b4:	e2 ec       	ldi	r30, 0xC2	; 194
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	80 83       	st	Z, r24
			UCSR0C &= ~(1 << UPM00);
 1be:	80 81       	ld	r24, Z
 1c0:	8f 7e       	andi	r24, 0xEF	; 239
 1c2:	80 83       	st	Z, r24
			break;
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <init_usart+0x84>
		case ODD:
			UCSR0C |= (1 << UPM00) | (1 << UPM01);
 1c6:	e2 ec       	ldi	r30, 0xC2	; 194
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	80 63       	ori	r24, 0x30	; 48
 1ce:	80 83       	st	Z, r24
			break;
	}

	/* Setting the stop bits for USART transmission */
	switch (stop_bits) {
 1d0:	d1 30       	cpi	r29, 0x01	; 1
 1d2:	19 f0       	breq	.+6      	; 0x1da <init_usart+0x8e>
 1d4:	d2 30       	cpi	r29, 0x02	; 2
 1d6:	39 f0       	breq	.+14     	; 0x1e6 <init_usart+0x9a>
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <init_usart+0xa4>
		case ONE:
			UCSR0C &= ~(1 << USBS0);
 1da:	e2 ec       	ldi	r30, 0xC2	; 194
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	87 7f       	andi	r24, 0xF7	; 247
 1e2:	80 83       	st	Z, r24
			break;
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <init_usart+0xa4>
		case TWO:
			UCSR0C |= (1 << USBS0);
 1e6:	e2 ec       	ldi	r30, 0xC2	; 194
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	88 60       	ori	r24, 0x08	; 8
 1ee:	80 83       	st	Z, r24
			break;
	}
	
	/* Transmit size is 8-bits */
	UCSR0C |= (3 << UCSZ00);
 1f0:	e2 ec       	ldi	r30, 0xC2	; 194
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	86 60       	ori	r24, 0x06	; 6
 1f8:	80 83       	st	Z, r24
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <main>:


int main(void)
{
	
	init_usart(9600, NONE, ONE);
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	95 e2       	ldi	r25, 0x25	; 37
 208:	0e 94 a6 00 	call	0x14c	; 0x14c <init_usart>
	Init_Pot_Meter();
 20c:	0e 94 53 00 	call	0xa6	; 0xa6 <Init_Pot_Meter>
	i2cInit();
 210:	0e 94 7f 00 	call	0xfe	; 0xfe <i2cInit>

	Write_Pot_Meter(10, CS_1);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	0e 94 5c 00 	call	0xb8	; 0xb8 <Write_Pot_Meter>
// 
// 		if(back_light_task) {
// 			//Turn of the back_light 
// 
// 		}
    }
 21c:	ff cf       	rjmp	.-2      	; 0x21c <main+0x1c>

0000021e <__udivmodsi4>:
 21e:	a1 e2       	ldi	r26, 0x21	; 33
 220:	1a 2e       	mov	r1, r26
 222:	aa 1b       	sub	r26, r26
 224:	bb 1b       	sub	r27, r27
 226:	fd 01       	movw	r30, r26
 228:	0d c0       	rjmp	.+26     	; 0x244 <__udivmodsi4_ep>

0000022a <__udivmodsi4_loop>:
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	ee 1f       	adc	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	a2 17       	cp	r26, r18
 234:	b3 07       	cpc	r27, r19
 236:	e4 07       	cpc	r30, r20
 238:	f5 07       	cpc	r31, r21
 23a:	20 f0       	brcs	.+8      	; 0x244 <__udivmodsi4_ep>
 23c:	a2 1b       	sub	r26, r18
 23e:	b3 0b       	sbc	r27, r19
 240:	e4 0b       	sbc	r30, r20
 242:	f5 0b       	sbc	r31, r21

00000244 <__udivmodsi4_ep>:
 244:	66 1f       	adc	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	88 1f       	adc	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	1a 94       	dec	r1
 24e:	69 f7       	brne	.-38     	; 0x22a <__udivmodsi4_loop>
 250:	60 95       	com	r22
 252:	70 95       	com	r23
 254:	80 95       	com	r24
 256:	90 95       	com	r25
 258:	9b 01       	movw	r18, r22
 25a:	ac 01       	movw	r20, r24
 25c:	bd 01       	movw	r22, r26
 25e:	cf 01       	movw	r24, r30
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
