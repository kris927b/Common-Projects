
AudioAmplifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001094  00001128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001094  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080013a  0080013a  00001162  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001162  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f70  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2c  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c28  00000000  00000000  00002cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  0000391c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000603  00000000  00000000  00003d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075d  00000000  00000000  00004307  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004a64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e9       	ldi	r30, 0x94	; 148
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 33       	cpi	r26, 0x3A	; 58
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e3       	ldi	r26, 0x3A	; 58
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 33       	cpi	r26, 0x3B	; 59
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 00 05 	call	0xa00	; 0xa00 <main>
      9e:	0c 94 48 08 	jmp	0x1090	; 0x1090 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init_Pot_Meter>:
 
#include <avr/io.h>
#include "Dig_Pot_Lib.h"
#include "SPI_Lib.h"

void Init_Pot_Meter() {
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	SPI_Init_Master();
      ae:	0e 94 6d 03 	call	0x6da	; 0x6da <SPI_Init_Master>
	CS_D |= (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
      b2:	84 e2       	ldi	r24, 0x24	; 36
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	24 e2       	ldi	r18, 0x24	; 36
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	f9 01       	movw	r30, r18
      bc:	20 81       	ld	r18, Z
      be:	27 60       	ori	r18, 0x07	; 7
      c0:	fc 01       	movw	r30, r24
      c2:	20 83       	st	Z, r18
	CS |= (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
      c4:	85 e2       	ldi	r24, 0x25	; 37
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	25 e2       	ldi	r18, 0x25	; 37
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	f9 01       	movw	r30, r18
      ce:	20 81       	ld	r18, Z
      d0:	27 60       	ori	r18, 0x07	; 7
      d2:	fc 01       	movw	r30, r24
      d4:	20 83       	st	Z, r18
}
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <Write_Pot_Meter>:

void Write_Pot_Meter(uint8_t value, uint8_t CS_pin) {
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	00 d0       	rcall	.+0      	; 0xe2 <Write_Pot_Meter+0x6>
      e2:	00 d0       	rcall	.+0      	; 0xe4 <Write_Pot_Meter+0x8>
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	8b 83       	std	Y+3, r24	; 0x03
      ea:	6c 83       	std	Y+4, r22	; 0x04
	CS &= ~(1 << CS_pin);
      ec:	85 e2       	ldi	r24, 0x25	; 37
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	25 e2       	ldi	r18, 0x25	; 37
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	62 2f       	mov	r22, r18
      fa:	2c 81       	ldd	r18, Y+4	; 0x04
      fc:	42 2f       	mov	r20, r18
      fe:	50 e0       	ldi	r21, 0x00	; 0
     100:	21 e0       	ldi	r18, 0x01	; 1
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <Write_Pot_Meter+0x2e>
     106:	22 0f       	add	r18, r18
     108:	33 1f       	adc	r19, r19
     10a:	4a 95       	dec	r20
     10c:	e2 f7       	brpl	.-8      	; 0x106 <Write_Pot_Meter+0x2a>
     10e:	20 95       	com	r18
     110:	26 23       	and	r18, r22
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
	uint8_t data[2] = {0b00000000, value};
     116:	19 82       	std	Y+1, r1	; 0x01
     118:	8b 81       	ldd	r24, Y+3	; 0x03
     11a:	8a 83       	std	Y+2, r24	; 0x02
	SPI_Send_Large_Data(data);
     11c:	ce 01       	movw	r24, r28
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_Send_Large_Data>
	CS |= (1 << CS_pin);
     124:	85 e2       	ldi	r24, 0x25	; 37
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	25 e2       	ldi	r18, 0x25	; 37
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	62 2f       	mov	r22, r18
     132:	2c 81       	ldd	r18, Y+4	; 0x04
     134:	42 2f       	mov	r20, r18
     136:	50 e0       	ldi	r21, 0x00	; 0
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <Write_Pot_Meter+0x66>
     13e:	22 0f       	add	r18, r18
     140:	33 1f       	adc	r19, r19
     142:	4a 95       	dec	r20
     144:	e2 f7       	brpl	.-8      	; 0x13e <Write_Pot_Meter+0x62>
     146:	26 2b       	or	r18, r22
     148:	fc 01       	movw	r30, r24
     14a:	20 83       	st	Z, r18
} 
     14c:	0f 90       	pop	r0
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <i2cInit>:
#include <avr/io.h>
#include "i2cLib.h"

void i2cInit(){
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
    TWSR &= ~((1 << TWPS0) | (1 << TWPS1)); //prescaler set to 0
     162:	89 eb       	ldi	r24, 0xB9	; 185
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	29 eb       	ldi	r18, 0xB9	; 185
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	f9 01       	movw	r30, r18
     16c:	20 81       	ld	r18, Z
     16e:	2c 7f       	andi	r18, 0xFC	; 252
     170:	fc 01       	movw	r30, r24
     172:	20 83       	st	Z, r18
    TWBR = 12; //setting the bit rate to 400kHz
     174:	88 eb       	ldi	r24, 0xB8	; 184
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	2c e0       	ldi	r18, 0x0C	; 12
     17a:	fc 01       	movw	r30, r24
     17c:	20 83       	st	Z, r18
    TWCR |= (1 << TWEN); //i2c enable 
     17e:	8c eb       	ldi	r24, 0xBC	; 188
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	2c eb       	ldi	r18, 0xBC	; 188
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	f9 01       	movw	r30, r18
     188:	20 81       	ld	r18, Z
     18a:	24 60       	ori	r18, 0x04	; 4
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <i2cStart>:

void i2cStart(){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); //setting interrupt pin, generating starting condition and enabling i2c
     19e:	8c eb       	ldi	r24, 0xBC	; 188
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	24 ea       	ldi	r18, 0xA4	; 164
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 83       	st	Z, r18
    while (!(TWCR & (1 << TWINT))); //waiting for the transmission of start condition to end
     1a8:	00 00       	nop
     1aa:	8c eb       	ldi	r24, 0xBC	; 188
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	fc 01       	movw	r30, r24
     1b0:	80 81       	ld	r24, Z
     1b2:	88 23       	and	r24, r24
     1b4:	d4 f7       	brge	.-12     	; 0x1aa <i2cStart+0x14>
}
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <i2cStop>:

void i2cStop(){
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); //setting interrupt pin, gen. stopping condition and enabling i2c 
     1c4:	8c eb       	ldi	r24, 0xBC	; 188
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	24 e9       	ldi	r18, 0x94	; 148
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18
}
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	08 95       	ret

000001d4 <i2cWrite>:

void i2cWrite(unsigned char data){
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	1f 92       	push	r1
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data; //putting data to data register
     1e0:	8b eb       	ldi	r24, 0xBB	; 187
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	29 81       	ldd	r18, Y+1	; 0x01
     1e6:	fc 01       	movw	r30, r24
     1e8:	20 83       	st	Z, r18
    TWCR = (1 << TWINT) | (1 << TWEN); //setting interrupt pin and enabling i2c
     1ea:	8c eb       	ldi	r24, 0xBC	; 188
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	24 e8       	ldi	r18, 0x84	; 132
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
	while(!(TWCR & (1 << TWINT)));
     1f4:	00 00       	nop
     1f6:	8c eb       	ldi	r24, 0xBC	; 188
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	fc 01       	movw	r30, r24
     1fc:	80 81       	ld	r24, Z
     1fe:	88 23       	and	r24, r24
     200:	d4 f7       	brge	.-12     	; 0x1f6 <i2cWrite+0x22>
}
     202:	0f 90       	pop	r0
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <sendCmd>:
#include <string.h>
#include <stdio.h>
#include "LCD_lib.h"


void sendCmd(char data){
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	1f 92       	push	r1
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
     216:	0e 94 cb 00 	call	0x196	; 0x196 <i2cStart>
    i2cWrite(SLA_W);
     21a:	8c e7       	ldi	r24, 0x7C	; 124
     21c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x00);
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(data);
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cStop();
     22c:	0e 94 de 00 	call	0x1bc	; 0x1bc <i2cStop>
}
     230:	0f 90       	pop	r0
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <sendData>:

void sendData(char data){
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	1f 92       	push	r1
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
     244:	0e 94 cb 00 	call	0x196	; 0x196 <i2cStart>
    i2cWrite(SLA_W);
     248:	8c e7       	ldi	r24, 0x7C	; 124
     24a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x40);
     24e:	80 e4       	ldi	r24, 0x40	; 64
     250:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(data);
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cStop();
     25a:	0e 94 de 00 	call	0x1bc	; 0x1bc <i2cStop>
}
     25e:	0f 90       	pop	r0
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <initDisp>:

void initDisp(){
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << DDD3);
     26e:	8a e2       	ldi	r24, 0x2A	; 42
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	2a e2       	ldi	r18, 0x2A	; 42
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	f9 01       	movw	r30, r18
     278:	20 81       	ld	r18, Z
     27a:	28 60       	ori	r18, 0x08	; 8
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
	PORTD |= (1 << PORTD3);
     280:	8b e2       	ldi	r24, 0x2B	; 43
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	2b e2       	ldi	r18, 0x2B	; 43
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	f9 01       	movw	r30, r18
     28a:	20 81       	ld	r18, Z
     28c:	28 60       	ori	r18, 0x08	; 8
     28e:	fc 01       	movw	r30, r24
     290:	20 83       	st	Z, r18
    i2cStart();
     292:	0e 94 cb 00 	call	0x196	; 0x196 <i2cStart>
    i2cWrite(SLA_W);
     296:	8c e7       	ldi	r24, 0x7C	; 124
     298:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x00);//cmd
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x38);//8 bit bus, 2 line disp mode, normal mode
     2a2:	88 e3       	ldi	r24, 0x38	; 56
     2a4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x00);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x39);//8 bit bus, 2 line disp mode, extended mode
     2ae:	89 e3       	ldi	r24, 0x39	; 57
     2b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x14);//internal OSC freq
     2b4:	84 e1       	ldi	r24, 0x14	; 20
     2b6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x7F);//contrast setting (Highest)
     2ba:	8f e7       	ldi	r24, 0x7F	; 127
     2bc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x50);//set ICON address
     2c0:	80 e5       	ldi	r24, 0x50	; 80
     2c2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x6C);//follower control
     2c6:	8c e6       	ldi	r24, 0x6C	; 108
     2c8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x0C);//display ON
     2cc:	8c e0       	ldi	r24, 0x0C	; 12
     2ce:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x01);//clear disp;ay
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cStop();
     2d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <i2cStop>
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <write_first_line>:

void write_first_line(char *data, uint8_t menu) {
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	6a 97       	sbiw	r28, 0x1a	; 26
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	99 8f       	std	Y+25, r25	; 0x19
     2f8:	88 8f       	std	Y+24, r24	; 0x18
     2fa:	6a 8f       	std	Y+26, r22	; 0x1a
	uint16_t len = strlen(data);
     2fc:	88 8d       	ldd	r24, Y+24	; 0x18
     2fe:	99 8d       	ldd	r25, Y+25	; 0x19
     300:	0e 94 67 05 	call	0xace	; 0xace <strlen>
     304:	9a 83       	std	Y+2, r25	; 0x02
     306:	89 83       	std	Y+1, r24	; 0x01
	char str[16] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
     308:	80 e1       	ldi	r24, 0x10	; 16
     30a:	e0 e0       	ldi	r30, 0x00	; 0
     30c:	f1 e0       	ldi	r31, 0x01	; 1
     30e:	de 01       	movw	r26, r28
     310:	18 96       	adiw	r26, 0x08	; 8
     312:	01 90       	ld	r0, Z+
     314:	0d 92       	st	X+, r0
     316:	8a 95       	dec	r24
     318:	e1 f7       	brne	.-8      	; 0x312 <write_first_line+0x30>
	uint16_t i = 0;
     31a:	1c 82       	std	Y+4, r1	; 0x04
     31c:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t j = 0;
     31e:	1e 82       	std	Y+6, r1	; 0x06
     320:	1d 82       	std	Y+5, r1	; 0x05

	if(menu) {
     322:	8a 8d       	ldd	r24, Y+26	; 0x1a
     324:	88 23       	and	r24, r24
     326:	59 f0       	breq	.+22     	; 0x33e <write_first_line+0x5c>
		str[0] = '\x7E';
     328:	8e e7       	ldi	r24, 0x7E	; 126
     32a:	88 87       	std	Y+8, r24	; 0x08
		i = 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	9c 83       	std	Y+4, r25	; 0x04
     332:	8b 83       	std	Y+3, r24	; 0x03
		len++;
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	9a 81       	ldd	r25, Y+2	; 0x02
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	9a 83       	std	Y+2, r25	; 0x02
     33c:	89 83       	std	Y+1, r24	; 0x01
	}

	for(i; i < len; i++) {
     33e:	1b c0       	rjmp	.+54     	; 0x376 <write_first_line+0x94>
		str[i] = data[j];
     340:	28 8d       	ldd	r18, Y+24	; 0x18
     342:	39 8d       	ldd	r19, Y+25	; 0x19
     344:	8d 81       	ldd	r24, Y+5	; 0x05
     346:	9e 81       	ldd	r25, Y+6	; 0x06
     348:	82 0f       	add	r24, r18
     34a:	93 1f       	adc	r25, r19
     34c:	fc 01       	movw	r30, r24
     34e:	40 81       	ld	r20, Z
     350:	9e 01       	movw	r18, r28
     352:	28 5f       	subi	r18, 0xF8	; 248
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	8b 81       	ldd	r24, Y+3	; 0x03
     358:	9c 81       	ldd	r25, Y+4	; 0x04
     35a:	82 0f       	add	r24, r18
     35c:	93 1f       	adc	r25, r19
     35e:	fc 01       	movw	r30, r24
     360:	40 83       	st	Z, r20
		j++;
     362:	8d 81       	ldd	r24, Y+5	; 0x05
     364:	9e 81       	ldd	r25, Y+6	; 0x06
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	9e 83       	std	Y+6, r25	; 0x06
     36a:	8d 83       	std	Y+5, r24	; 0x05
		str[0] = '\x7E';
		i = 1;
		len++;
	}

	for(i; i < len; i++) {
     36c:	8b 81       	ldd	r24, Y+3	; 0x03
     36e:	9c 81       	ldd	r25, Y+4	; 0x04
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	9c 83       	std	Y+4, r25	; 0x04
     374:	8b 83       	std	Y+3, r24	; 0x03
     376:	2b 81       	ldd	r18, Y+3	; 0x03
     378:	3c 81       	ldd	r19, Y+4	; 0x04
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	f0 f2       	brcs	.-68     	; 0x340 <write_first_line+0x5e>
		str[i] = data[j];
		j++;
	}

	for (uint8_t i = 0x00; i <= 0x0F; i++){ //0x00-0x27 first line
     384:	1f 82       	std	Y+7, r1	; 0x07
     386:	16 c0       	rjmp	.+44     	; 0x3b4 <write_first_line+0xd2>
		sendCmd(0x00);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 05 01 	call	0x20a	; 0x20a <sendCmd>
		sendCmd(0x80 | i);
     38e:	8f 81       	ldd	r24, Y+7	; 0x07
     390:	80 68       	ori	r24, 0x80	; 128
     392:	0e 94 05 01 	call	0x20a	; 0x20a <sendCmd>
		sendData(str[i]);
     396:	8f 81       	ldd	r24, Y+7	; 0x07
     398:	88 2f       	mov	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	9e 01       	movw	r18, r28
     39e:	28 5f       	subi	r18, 0xF8	; 248
     3a0:	3f 4f       	sbci	r19, 0xFF	; 255
     3a2:	82 0f       	add	r24, r18
     3a4:	93 1f       	adc	r25, r19
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
     3aa:	0e 94 1c 01 	call	0x238	; 0x238 <sendData>
	for(i; i < len; i++) {
		str[i] = data[j];
		j++;
	}

	for (uint8_t i = 0x00; i <= 0x0F; i++){ //0x00-0x27 first line
     3ae:	8f 81       	ldd	r24, Y+7	; 0x07
     3b0:	8f 5f       	subi	r24, 0xFF	; 255
     3b2:	8f 83       	std	Y+7, r24	; 0x07
     3b4:	8f 81       	ldd	r24, Y+7	; 0x07
     3b6:	80 31       	cpi	r24, 0x10	; 16
     3b8:	38 f3       	brcs	.-50     	; 0x388 <write_first_line+0xa6>
		sendCmd(0x00);
		sendCmd(0x80 | i);
		sendData(str[i]);
	}
}
     3ba:	6a 96       	adiw	r28, 0x1a	; 26
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <write_second_line>:

void write_second_line(char *data, uint8_t menu) {
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	6a 97       	sbiw	r28, 0x1a	; 26
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	99 8f       	std	Y+25, r25	; 0x19
     3e2:	88 8f       	std	Y+24, r24	; 0x18
     3e4:	6a 8f       	std	Y+26, r22	; 0x1a
	uint16_t len = strlen(data);
     3e6:	88 8d       	ldd	r24, Y+24	; 0x18
     3e8:	99 8d       	ldd	r25, Y+25	; 0x19
     3ea:	0e 94 67 05 	call	0xace	; 0xace <strlen>
     3ee:	9a 83       	std	Y+2, r25	; 0x02
     3f0:	89 83       	std	Y+1, r24	; 0x01
	char str[16] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
     3f2:	80 e1       	ldi	r24, 0x10	; 16
     3f4:	e0 e0       	ldi	r30, 0x00	; 0
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	de 01       	movw	r26, r28
     3fa:	18 96       	adiw	r26, 0x08	; 8
     3fc:	01 90       	ld	r0, Z+
     3fe:	0d 92       	st	X+, r0
     400:	8a 95       	dec	r24
     402:	e1 f7       	brne	.-8      	; 0x3fc <write_second_line+0x30>
	uint16_t i = 0;
     404:	1c 82       	std	Y+4, r1	; 0x04
     406:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t j = 0;
     408:	1e 82       	std	Y+6, r1	; 0x06
     40a:	1d 82       	std	Y+5, r1	; 0x05

	if(menu) {
     40c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     40e:	88 23       	and	r24, r24
     410:	49 f0       	breq	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		i = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9c 83       	std	Y+4, r25	; 0x04
     418:	8b 83       	std	Y+3, r24	; 0x03
		len++;
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	9a 81       	ldd	r25, Y+2	; 0x02
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01
	}
	for(i; i < len; i++) {
     424:	1b c0       	rjmp	.+54     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		str[i] = data[j];
     426:	28 8d       	ldd	r18, Y+24	; 0x18
     428:	39 8d       	ldd	r19, Y+25	; 0x19
     42a:	8d 81       	ldd	r24, Y+5	; 0x05
     42c:	9e 81       	ldd	r25, Y+6	; 0x06
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	fc 01       	movw	r30, r24
     434:	40 81       	ld	r20, Z
     436:	9e 01       	movw	r18, r28
     438:	28 5f       	subi	r18, 0xF8	; 248
     43a:	3f 4f       	sbci	r19, 0xFF	; 255
     43c:	8b 81       	ldd	r24, Y+3	; 0x03
     43e:	9c 81       	ldd	r25, Y+4	; 0x04
     440:	82 0f       	add	r24, r18
     442:	93 1f       	adc	r25, r19
     444:	fc 01       	movw	r30, r24
     446:	40 83       	st	Z, r20
		j++;
     448:	8d 81       	ldd	r24, Y+5	; 0x05
     44a:	9e 81       	ldd	r25, Y+6	; 0x06
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	9e 83       	std	Y+6, r25	; 0x06
     450:	8d 83       	std	Y+5, r24	; 0x05

	if(menu) {
		i = 1;
		len++;
	}
	for(i; i < len; i++) {
     452:	8b 81       	ldd	r24, Y+3	; 0x03
     454:	9c 81       	ldd	r25, Y+4	; 0x04
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	9c 83       	std	Y+4, r25	; 0x04
     45a:	8b 83       	std	Y+3, r24	; 0x03
     45c:	2b 81       	ldd	r18, Y+3	; 0x03
     45e:	3c 81       	ldd	r19, Y+4	; 0x04
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	9a 81       	ldd	r25, Y+2	; 0x02
     464:	28 17       	cp	r18, r24
     466:	39 07       	cpc	r19, r25
     468:	f0 f2       	brcs	.-68     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		str[i] = data[j];
		j++;
	}


	for (uint8_t i = 0x40; i <= 0x4F; i++){ //0x40-0x67 second line
     46a:	80 e4       	ldi	r24, 0x40	; 64
     46c:	8f 83       	std	Y+7, r24	; 0x07
     46e:	18 c0       	rjmp	.+48     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		sendCmd(0x00);
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	0e 94 05 01 	call	0x20a	; 0x20a <sendCmd>
		sendCmd(0x80 | i);
     476:	8f 81       	ldd	r24, Y+7	; 0x07
     478:	80 68       	ori	r24, 0x80	; 128
     47a:	0e 94 05 01 	call	0x20a	; 0x20a <sendCmd>
		sendData(str[i-0x40]);
     47e:	8f 81       	ldd	r24, Y+7	; 0x07
     480:	88 2f       	mov	r24, r24
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	80 54       	subi	r24, 0x40	; 64
     486:	91 09       	sbc	r25, r1
     488:	9e 01       	movw	r18, r28
     48a:	28 5f       	subi	r18, 0xF8	; 248
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	82 0f       	add	r24, r18
     490:	93 1f       	adc	r25, r19
     492:	fc 01       	movw	r30, r24
     494:	80 81       	ld	r24, Z
     496:	0e 94 1c 01 	call	0x238	; 0x238 <sendData>
		str[i] = data[j];
		j++;
	}


	for (uint8_t i = 0x40; i <= 0x4F; i++){ //0x40-0x67 second line
     49a:	8f 81       	ldd	r24, Y+7	; 0x07
     49c:	8f 5f       	subi	r24, 0xFF	; 255
     49e:	8f 83       	std	Y+7, r24	; 0x07
     4a0:	8f 81       	ldd	r24, Y+7	; 0x07
     4a2:	80 35       	cpi	r24, 0x50	; 80
     4a4:	28 f3       	brcs	.-54     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		sendCmd(0x00);
		sendCmd(0x80 | i);
		sendData(str[i-0x40]);
	}
}
     4a6:	6a 96       	adiw	r28, 0x1a	; 26
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <write_volume_control>:

void write_volume_control(char *name, uint8_t value) {
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	ad 97       	sbiw	r28, 0x2d	; 45
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	9c a7       	std	Y+44, r25	; 0x2c
     4ce:	8b a7       	std	Y+43, r24	; 0x2b
     4d0:	6d a7       	std	Y+45, r22	; 0x2d
	char line_1[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
     4d2:	81 e1       	ldi	r24, 0x11	; 17
     4d4:	e4 e1       	ldi	r30, 0x14	; 20
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	de 01       	movw	r26, r28
     4da:	16 96       	adiw	r26, 0x06	; 6
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	8a 95       	dec	r24
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <write_volume_control+0x24>
	char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
     4e4:	81 e1       	ldi	r24, 0x11	; 17
     4e6:	e4 e1       	ldi	r30, 0x14	; 20
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	de 01       	movw	r26, r28
     4ec:	57 96       	adiw	r26, 0x17	; 23
     4ee:	01 90       	ld	r0, Z+
     4f0:	0d 92       	st	X+, r0
     4f2:	8a 95       	dec	r24
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <write_volume_control+0x36>
	uint8_t size = strlen(name);
     4f6:	8b a5       	ldd	r24, Y+43	; 0x2b
     4f8:	9c a5       	ldd	r25, Y+44	; 0x2c
     4fa:	0e 94 67 05 	call	0xace	; 0xace <strlen>
     4fe:	8c 83       	std	Y+4, r24	; 0x04

	uint8_t vol_size = volume_size(value);
     500:	8d a5       	ldd	r24, Y+45	; 0x2d
     502:	0e 94 00 03 	call	0x600	; 0x600 <volume_size>
     506:	8d 83       	std	Y+5, r24	; 0x05

	for(uint8_t i = 0; i < vol_size; i++) {
     508:	19 82       	std	Y+1, r1	; 0x01
     50a:	0e c0       	rjmp	.+28     	; 0x528 <write_volume_control+0x70>
		line_2[i] = '#';
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	88 2f       	mov	r24, r24
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	9e 01       	movw	r18, r28
     514:	29 5e       	subi	r18, 0xE9	; 233
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	82 0f       	add	r24, r18
     51a:	93 1f       	adc	r25, r19
     51c:	23 e2       	ldi	r18, 0x23	; 35
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18
	char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
	uint8_t size = strlen(name);

	uint8_t vol_size = volume_size(value);

	for(uint8_t i = 0; i < vol_size; i++) {
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	99 81       	ldd	r25, Y+1	; 0x01
     52a:	8d 81       	ldd	r24, Y+5	; 0x05
     52c:	98 17       	cp	r25, r24
     52e:	70 f3       	brcs	.-36     	; 0x50c <write_volume_control+0x54>
		line_2[i] = '#';
	}

	char str[3];
	sprintf(str, "%3d", value);
     530:	8d a5       	ldd	r24, Y+45	; 0x2d
     532:	88 2f       	mov	r24, r24
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	29 2f       	mov	r18, r25
     538:	2f 93       	push	r18
     53a:	8f 93       	push	r24
     53c:	80 e1       	ldi	r24, 0x10	; 16
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	89 2f       	mov	r24, r25
     542:	8f 93       	push	r24
     544:	80 e1       	ldi	r24, 0x10	; 16
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	8f 93       	push	r24
     54a:	ce 01       	movw	r24, r28
     54c:	88 96       	adiw	r24, 0x28	; 40
     54e:	29 2f       	mov	r18, r25
     550:	2f 93       	push	r18
     552:	8f 93       	push	r24
     554:	0e 94 70 05 	call	0xae0	; 0xae0 <sprintf>
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0

	for (uint8_t i = 0; i < size; i++){
     564:	1a 82       	std	Y+2, r1	; 0x02
     566:	16 c0       	rjmp	.+44     	; 0x594 <write_volume_control+0xdc>
		line_1[i] = name[i];
     568:	8a 81       	ldd	r24, Y+2	; 0x02
     56a:	88 2f       	mov	r24, r24
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	2a 81       	ldd	r18, Y+2	; 0x02
     570:	22 2f       	mov	r18, r18
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	4b a5       	ldd	r20, Y+43	; 0x2b
     576:	5c a5       	ldd	r21, Y+44	; 0x2c
     578:	24 0f       	add	r18, r20
     57a:	35 1f       	adc	r19, r21
     57c:	f9 01       	movw	r30, r18
     57e:	40 81       	ld	r20, Z
     580:	9e 01       	movw	r18, r28
     582:	2a 5f       	subi	r18, 0xFA	; 250
     584:	3f 4f       	sbci	r19, 0xFF	; 255
     586:	82 0f       	add	r24, r18
     588:	93 1f       	adc	r25, r19
     58a:	fc 01       	movw	r30, r24
     58c:	40 83       	st	Z, r20
	}

	char str[3];
	sprintf(str, "%3d", value);

	for (uint8_t i = 0; i < size; i++){
     58e:	8a 81       	ldd	r24, Y+2	; 0x02
     590:	8f 5f       	subi	r24, 0xFF	; 255
     592:	8a 83       	std	Y+2, r24	; 0x02
     594:	9a 81       	ldd	r25, Y+2	; 0x02
     596:	8c 81       	ldd	r24, Y+4	; 0x04
     598:	98 17       	cp	r25, r24
     59a:	30 f3       	brcs	.-52     	; 0x568 <write_volume_control+0xb0>
		line_1[i] = name[i];
	}

	for (uint8_t i = 13; i < 16; i++) {
     59c:	8d e0       	ldi	r24, 0x0D	; 13
     59e:	8b 83       	std	Y+3, r24	; 0x03
     5a0:	19 c0       	rjmp	.+50     	; 0x5d4 <write_volume_control+0x11c>
		line_1[i] = str[i - 13];
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	88 2f       	mov	r24, r24
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	2b 81       	ldd	r18, Y+3	; 0x03
     5aa:	22 2f       	mov	r18, r18
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	2d 50       	subi	r18, 0x0D	; 13
     5b0:	31 09       	sbc	r19, r1
     5b2:	ae 01       	movw	r20, r28
     5b4:	48 5d       	subi	r20, 0xD8	; 216
     5b6:	5f 4f       	sbci	r21, 0xFF	; 255
     5b8:	24 0f       	add	r18, r20
     5ba:	35 1f       	adc	r19, r21
     5bc:	f9 01       	movw	r30, r18
     5be:	40 81       	ld	r20, Z
     5c0:	9e 01       	movw	r18, r28
     5c2:	2a 5f       	subi	r18, 0xFA	; 250
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
     5c6:	82 0f       	add	r24, r18
     5c8:	93 1f       	adc	r25, r19
     5ca:	fc 01       	movw	r30, r24
     5cc:	40 83       	st	Z, r20

	for (uint8_t i = 0; i < size; i++){
		line_1[i] = name[i];
	}

	for (uint8_t i = 13; i < 16; i++) {
     5ce:	8b 81       	ldd	r24, Y+3	; 0x03
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
     5d2:	8b 83       	std	Y+3, r24	; 0x03
     5d4:	8b 81       	ldd	r24, Y+3	; 0x03
     5d6:	80 31       	cpi	r24, 0x10	; 16
     5d8:	20 f3       	brcs	.-56     	; 0x5a2 <write_volume_control+0xea>
		line_1[i] = str[i - 13];
	}

	write_first_line(line_1, 0);
     5da:	ce 01       	movw	r24, r28
     5dc:	06 96       	adiw	r24, 0x06	; 6
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write_first_line>
	write_second_line(line_2, 0);
     5e4:	ce 01       	movw	r24, r28
     5e6:	47 96       	adiw	r24, 0x17	; 23
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_second_line>
}
     5ee:	ad 96       	adiw	r28, 0x2d	; 45
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <volume_size>:

uint8_t volume_size(uint8_t value) {
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	1f 92       	push	r1
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	89 83       	std	Y+1, r24	; 0x01
	switch(value) {
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	88 2f       	mov	r24, r24
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	80 31       	cpi	r24, 0x10	; 16
     614:	91 05       	cpc	r25, r1
     616:	09 f4       	brne	.+2      	; 0x61a <volume_size+0x1a>
     618:	4a c0       	rjmp	.+148    	; 0x6ae <volume_size+0xae>
     61a:	81 31       	cpi	r24, 0x11	; 17
     61c:	91 05       	cpc	r25, r1
     61e:	cc f4       	brge	.+50     	; 0x652 <volume_size+0x52>
     620:	84 30       	cpi	r24, 0x04	; 4
     622:	91 05       	cpc	r25, r1
     624:	09 f4       	brne	.+2      	; 0x628 <volume_size+0x28>
     626:	3b c0       	rjmp	.+118    	; 0x69e <volume_size+0x9e>
     628:	85 30       	cpi	r24, 0x05	; 5
     62a:	91 05       	cpc	r25, r1
     62c:	4c f4       	brge	.+18     	; 0x640 <volume_size+0x40>
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	91 05       	cpc	r25, r1
     632:	89 f1       	breq	.+98     	; 0x696 <volume_size+0x96>
     634:	82 30       	cpi	r24, 0x02	; 2
     636:	91 05       	cpc	r25, r1
     638:	81 f1       	breq	.+96     	; 0x69a <volume_size+0x9a>
     63a:	89 2b       	or	r24, r25
     63c:	51 f1       	breq	.+84     	; 0x692 <volume_size+0x92>
     63e:	49 c0       	rjmp	.+146    	; 0x6d2 <volume_size+0xd2>
     640:	88 30       	cpi	r24, 0x08	; 8
     642:	91 05       	cpc	r25, r1
     644:	81 f1       	breq	.+96     	; 0x6a6 <volume_size+0xa6>
     646:	8c 30       	cpi	r24, 0x0C	; 12
     648:	91 05       	cpc	r25, r1
     64a:	79 f1       	breq	.+94     	; 0x6aa <volume_size+0xaa>
     64c:	06 97       	sbiw	r24, 0x06	; 6
     64e:	49 f1       	breq	.+82     	; 0x6a2 <volume_size+0xa2>
     650:	40 c0       	rjmp	.+128    	; 0x6d2 <volume_size+0xd2>
     652:	80 34       	cpi	r24, 0x40	; 64
     654:	91 05       	cpc	r25, r1
     656:	99 f1       	breq	.+102    	; 0x6be <volume_size+0xbe>
     658:	81 34       	cpi	r24, 0x41	; 65
     65a:	91 05       	cpc	r25, r1
     65c:	4c f4       	brge	.+18     	; 0x670 <volume_size+0x70>
     65e:	80 32       	cpi	r24, 0x20	; 32
     660:	91 05       	cpc	r25, r1
     662:	49 f1       	breq	.+82     	; 0x6b6 <volume_size+0xb6>
     664:	80 33       	cpi	r24, 0x30	; 48
     666:	91 05       	cpc	r25, r1
     668:	41 f1       	breq	.+80     	; 0x6ba <volume_size+0xba>
     66a:	48 97       	sbiw	r24, 0x18	; 24
     66c:	11 f1       	breq	.+68     	; 0x6b2 <volume_size+0xb2>
     66e:	31 c0       	rjmp	.+98     	; 0x6d2 <volume_size+0xd2>
     670:	80 38       	cpi	r24, 0x80	; 128
     672:	91 05       	cpc	r25, r1
     674:	41 f1       	breq	.+80     	; 0x6c6 <volume_size+0xc6>
     676:	81 38       	cpi	r24, 0x81	; 129
     678:	91 05       	cpc	r25, r1
     67a:	24 f4       	brge	.+8      	; 0x684 <volume_size+0x84>
     67c:	80 36       	cpi	r24, 0x60	; 96
     67e:	91 05       	cpc	r25, r1
     680:	01 f1       	breq	.+64     	; 0x6c2 <volume_size+0xc2>
     682:	27 c0       	rjmp	.+78     	; 0x6d2 <volume_size+0xd2>
     684:	80 3c       	cpi	r24, 0xC0	; 192
     686:	91 05       	cpc	r25, r1
     688:	01 f1       	breq	.+64     	; 0x6ca <volume_size+0xca>
     68a:	8f 3f       	cpi	r24, 0xFF	; 255
     68c:	91 05       	cpc	r25, r1
     68e:	f9 f0       	breq	.+62     	; 0x6ce <volume_size+0xce>
     690:	20 c0       	rjmp	.+64     	; 0x6d2 <volume_size+0xd2>
		case 0:
			return 1;
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	1e c0       	rjmp	.+60     	; 0x6d2 <volume_size+0xd2>
			break;
		case 1:
			return 2;
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	1c c0       	rjmp	.+56     	; 0x6d2 <volume_size+0xd2>
			break;
		case 2:
			return 3;
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	1a c0       	rjmp	.+52     	; 0x6d2 <volume_size+0xd2>
			break;
		case 4:
			return 4;
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	18 c0       	rjmp	.+48     	; 0x6d2 <volume_size+0xd2>
			break;
		case 6:
			return 5;
     6a2:	85 e0       	ldi	r24, 0x05	; 5
     6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <volume_size+0xd2>
			break;
		case 8:
			return 6;
     6a6:	86 e0       	ldi	r24, 0x06	; 6
     6a8:	14 c0       	rjmp	.+40     	; 0x6d2 <volume_size+0xd2>
			break;
		case 12:
			return 7;
     6aa:	87 e0       	ldi	r24, 0x07	; 7
     6ac:	12 c0       	rjmp	.+36     	; 0x6d2 <volume_size+0xd2>
			break;
		case 16:
			return 8;
     6ae:	88 e0       	ldi	r24, 0x08	; 8
     6b0:	10 c0       	rjmp	.+32     	; 0x6d2 <volume_size+0xd2>
			break;
		case 24:
			return 9;
     6b2:	89 e0       	ldi	r24, 0x09	; 9
     6b4:	0e c0       	rjmp	.+28     	; 0x6d2 <volume_size+0xd2>
			break;
		case 32:
			return 10;
     6b6:	8a e0       	ldi	r24, 0x0A	; 10
     6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <volume_size+0xd2>
			break;
		case 48:
			return 11;
     6ba:	8b e0       	ldi	r24, 0x0B	; 11
     6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <volume_size+0xd2>
			break;
		case 64:
			return 12;
     6be:	8c e0       	ldi	r24, 0x0C	; 12
     6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <volume_size+0xd2>
			break;
		case 96:
			return 13;
     6c2:	8d e0       	ldi	r24, 0x0D	; 13
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <volume_size+0xd2>
			break;
		case 128:
			return 14;
     6c6:	8e e0       	ldi	r24, 0x0E	; 14
     6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <volume_size+0xd2>
			break;
		case 192:
			return 15;
     6ca:	8f e0       	ldi	r24, 0x0F	; 15
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <volume_size+0xd2>
			break;
		case 255:
			return 16;
     6ce:	80 e1       	ldi	r24, 0x10	; 16
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <volume_size+0xd2>
			break;
	}
     6d2:	0f 90       	pop	r0
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <SPI_Init_Master>:
//MISO == "Master In Slave Out" || SPI
//SCK == SPI Clock Line			|| SCK
//SS == "Slave Select			|| CS == "Chip Select"
 
 
void SPI_Init_Master() {
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
	/* Set the MOSI & SCK as Output lines */
	DDRB |= (1 << PINB3) | (1 << PINB5);
     6e2:	84 e2       	ldi	r24, 0x24	; 36
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	24 e2       	ldi	r18, 0x24	; 36
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	f9 01       	movw	r30, r18
     6ec:	20 81       	ld	r18, Z
     6ee:	28 62       	ori	r18, 0x28	; 40
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 83       	st	Z, r18
	/* Set the SCK pin to low */
	PORTB &= ~(1 << PINB5);
     6f4:	85 e2       	ldi	r24, 0x25	; 37
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	25 e2       	ldi	r18, 0x25	; 37
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	2f 7d       	andi	r18, 0xDF	; 223
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
	
	/* Enable SPI */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPR1); 
     706:	8c e4       	ldi	r24, 0x4C	; 76
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	2c e4       	ldi	r18, 0x4C	; 76
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	f9 01       	movw	r30, r18
     710:	20 81       	ld	r18, Z
     712:	23 65       	ori	r18, 0x53	; 83
     714:	fc 01       	movw	r30, r24
     716:	20 83       	st	Z, r18
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <SPI_Send_Data>:

void SPI_Send_Data(uint8_t data) {
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	1f 92       	push	r1
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	89 83       	std	Y+1, r24	; 0x01
	/* Place the data in the transmitter buffer */
	SPDR = data;
     72a:	8e e4       	ldi	r24, 0x4E	; 78
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	29 81       	ldd	r18, Y+1	; 0x01
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18

	/* Wait for the transmitter to complete */
	while(!(SPSR & (1 << SPIF)));
     734:	00 00       	nop
     736:	8d e4       	ldi	r24, 0x4D	; 77
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	fc 01       	movw	r30, r24
     73c:	80 81       	ld	r24, Z
     73e:	88 23       	and	r24, r24
     740:	d4 f7       	brge	.-12     	; 0x736 <SPI_Send_Data+0x18>
}
     742:	0f 90       	pop	r0
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <SPI_Send_Large_Data>:

void SPI_Send_Large_Data(uint8_t *data) {
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	00 d0       	rcall	.+0      	; 0x750 <SPI_Send_Large_Data+0x6>
     750:	00 d0       	rcall	.+0      	; 0x752 <SPI_Send_Large_Data+0x8>
     752:	00 d0       	rcall	.+0      	; 0x754 <SPI_Send_Large_Data+0xa>
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	9e 83       	std	Y+6, r25	; 0x06
     75a:	8d 83       	std	Y+5, r24	; 0x05
	/* Find the length of the data array */
	uint16_t len = 2;
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 0; i < len; i++) {
     764:	1a 82       	std	Y+2, r1	; 0x02
     766:	19 82       	std	Y+1, r1	; 0x01
     768:	0f c0       	rjmp	.+30     	; 0x788 <SPI_Send_Large_Data+0x3e>
		SPI_Send_Data(data[i]);
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	2d 81       	ldd	r18, Y+5	; 0x05
     770:	3e 81       	ldd	r19, Y+6	; 0x06
     772:	82 0f       	add	r24, r18
     774:	93 1f       	adc	r25, r19
     776:	fc 01       	movw	r30, r24
     778:	80 81       	ld	r24, Z
     77a:	0e 94 8f 03 	call	0x71e	; 0x71e <SPI_Send_Data>
}

void SPI_Send_Large_Data(uint8_t *data) {
	/* Find the length of the data array */
	uint16_t len = 2;
	for(int i = 0; i < len; i++) {
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	9a 81       	ldd	r25, Y+2	; 0x02
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	9a 83       	std	Y+2, r25	; 0x02
     786:	89 83       	std	Y+1, r24	; 0x01
     788:	29 81       	ldd	r18, Y+1	; 0x01
     78a:	3a 81       	ldd	r19, Y+2	; 0x02
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	28 17       	cp	r18, r24
     792:	39 07       	cpc	r19, r25
     794:	50 f3       	brcs	.-44     	; 0x76a <SPI_Send_Large_Data+0x20>
		SPI_Send_Data(data[i]);
	}
     796:	26 96       	adiw	r28, 0x06	; 6
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <init_usart>:
unsigned char usart_Receive(void) {
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
	/* Get and return received data from buffer */
	return UDR0;
}
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	2c 97       	sbiw	r28, 0x0c	; 12
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	9a 83       	std	Y+2, r25	; 0x02
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	6b 83       	std	Y+3, r22	; 0x03
     7c6:	4c 83       	std	Y+4, r20	; 0x04
     7c8:	81 ec       	ldi	r24, 0xC1	; 193
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	21 ec       	ldi	r18, 0xC1	; 193
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	f9 01       	movw	r30, r18
     7d2:	20 81       	ld	r18, Z
     7d4:	28 61       	ori	r18, 0x18	; 24
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
     7da:	05 ec       	ldi	r16, 0xC5	; 197
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	96 95       	lsr	r25
     7e4:	87 95       	ror	r24
     7e6:	cc 01       	movw	r24, r24
     7e8:	a0 e0       	ldi	r26, 0x00	; 0
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	80 5c       	subi	r24, 0xC0	; 192
     7ee:	9d 4b       	sbci	r25, 0xBD	; 189
     7f0:	a0 4f       	sbci	r26, 0xF0	; 240
     7f2:	bf 4f       	sbci	r27, 0xFF	; 255
     7f4:	29 81       	ldd	r18, Y+1	; 0x01
     7f6:	3a 81       	ldd	r19, Y+2	; 0x02
     7f8:	99 01       	movw	r18, r18
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	bc 01       	movw	r22, r24
     800:	cd 01       	movw	r24, r26
     802:	0e 94 45 05 	call	0xa8a	; 0xa8a <__udivmodsi4>
     806:	da 01       	movw	r26, r20
     808:	c9 01       	movw	r24, r18
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	a1 09       	sbc	r26, r1
     80e:	b1 09       	sbc	r27, r1
     810:	89 2f       	mov	r24, r25
     812:	9a 2f       	mov	r25, r26
     814:	ab 2f       	mov	r26, r27
     816:	bb 27       	eor	r27, r27
     818:	f8 01       	movw	r30, r16
     81a:	80 83       	st	Z, r24
     81c:	04 ec       	ldi	r16, 0xC4	; 196
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	96 95       	lsr	r25
     826:	87 95       	ror	r24
     828:	cc 01       	movw	r24, r24
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	80 5c       	subi	r24, 0xC0	; 192
     830:	9d 4b       	sbci	r25, 0xBD	; 189
     832:	a0 4f       	sbci	r26, 0xF0	; 240
     834:	bf 4f       	sbci	r27, 0xFF	; 255
     836:	29 81       	ldd	r18, Y+1	; 0x01
     838:	3a 81       	ldd	r19, Y+2	; 0x02
     83a:	99 01       	movw	r18, r18
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	0e 94 45 05 	call	0xa8a	; 0xa8a <__udivmodsi4>
     848:	da 01       	movw	r26, r20
     84a:	c9 01       	movw	r24, r18
     84c:	81 50       	subi	r24, 0x01	; 1
     84e:	f8 01       	movw	r30, r16
     850:	80 83       	st	Z, r24
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	88 2f       	mov	r24, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	91 05       	cpc	r25, r1
     85c:	79 f0       	breq	.+30     	; 0x87c <init_usart+0xd4>
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	91 05       	cpc	r25, r1
     862:	f9 f0       	breq	.+62     	; 0x8a2 <init_usart+0xfa>
     864:	89 2b       	or	r24, r25
     866:	39 f5       	brne	.+78     	; 0x8b6 <init_usart+0x10e>
     868:	82 ec       	ldi	r24, 0xC2	; 194
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	22 ec       	ldi	r18, 0xC2	; 194
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	f9 01       	movw	r30, r18
     872:	20 81       	ld	r18, Z
     874:	2f 7c       	andi	r18, 0xCF	; 207
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
     87a:	1d c0       	rjmp	.+58     	; 0x8b6 <init_usart+0x10e>
     87c:	82 ec       	ldi	r24, 0xC2	; 194
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	22 ec       	ldi	r18, 0xC2	; 194
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	f9 01       	movw	r30, r18
     886:	20 81       	ld	r18, Z
     888:	20 62       	ori	r18, 0x20	; 32
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
     88e:	82 ec       	ldi	r24, 0xC2	; 194
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	22 ec       	ldi	r18, 0xC2	; 194
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	f9 01       	movw	r30, r18
     898:	20 81       	ld	r18, Z
     89a:	2f 7e       	andi	r18, 0xEF	; 239
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
     8a0:	0a c0       	rjmp	.+20     	; 0x8b6 <init_usart+0x10e>
     8a2:	82 ec       	ldi	r24, 0xC2	; 194
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	22 ec       	ldi	r18, 0xC2	; 194
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	f9 01       	movw	r30, r18
     8ac:	20 81       	ld	r18, Z
     8ae:	20 63       	ori	r18, 0x30	; 48
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
     8b4:	00 00       	nop
     8b6:	8c 81       	ldd	r24, Y+4	; 0x04
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	91 05       	cpc	r25, r1
     8c0:	19 f0       	breq	.+6      	; 0x8c8 <init_usart+0x120>
     8c2:	02 97       	sbiw	r24, 0x02	; 2
     8c4:	59 f0       	breq	.+22     	; 0x8dc <init_usart+0x134>
     8c6:	14 c0       	rjmp	.+40     	; 0x8f0 <init_usart+0x148>
     8c8:	82 ec       	ldi	r24, 0xC2	; 194
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	22 ec       	ldi	r18, 0xC2	; 194
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	f9 01       	movw	r30, r18
     8d2:	20 81       	ld	r18, Z
     8d4:	27 7f       	andi	r18, 0xF7	; 247
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
     8da:	0a c0       	rjmp	.+20     	; 0x8f0 <init_usart+0x148>
     8dc:	82 ec       	ldi	r24, 0xC2	; 194
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	22 ec       	ldi	r18, 0xC2	; 194
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	f9 01       	movw	r30, r18
     8e6:	20 81       	ld	r18, Z
     8e8:	28 60       	ori	r18, 0x08	; 8
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
     8ee:	00 00       	nop
     8f0:	82 ec       	ldi	r24, 0xC2	; 194
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	22 ec       	ldi	r18, 0xC2	; 194
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	20 81       	ld	r18, Z
     8fc:	26 60       	ori	r18, 0x06	; 6
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
     902:	2c 96       	adiw	r28, 0x0c	; 12
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	08 95       	ret

00000918 <usart_transmit_char>:


/* Transmit data in the format of char				*/
/* Data is a single character from the ascii table	*/
void usart_transmit_char(unsigned char data) {
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	1f 92       	push	r1
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & (1 << UDRE0))); //Wait for transmitter to be done
     924:	00 00       	nop
     926:	80 ec       	ldi	r24, 0xC0	; 192
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	fc 01       	movw	r30, r24
     92c:	80 81       	ld	r24, Z
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	80 72       	andi	r24, 0x20	; 32
     934:	99 27       	eor	r25, r25
     936:	89 2b       	or	r24, r25
     938:	b1 f3       	breq	.-20     	; 0x926 <usart_transmit_char+0xe>
	UDR0 = data; //Transmit data
     93a:	86 ec       	ldi	r24, 0xC6	; 198
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	29 81       	ldd	r18, Y+1	; 0x01
     940:	fc 01       	movw	r30, r24
     942:	20 83       	st	Z, r18
}
     944:	0f 90       	pop	r0
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <__vector_4>:
bool display_task = false;
bool back_light_task = false;

//Menu titles

ISR(PCINT1_vect) {
     94c:	1f 92       	push	r1
     94e:	0f 92       	push	r0
     950:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     954:	0f 92       	push	r0
     956:	11 24       	eor	r1, r1
     958:	2f 93       	push	r18
     95a:	3f 93       	push	r19
     95c:	4f 93       	push	r20
     95e:	5f 93       	push	r21
     960:	6f 93       	push	r22
     962:	7f 93       	push	r23
     964:	8f 93       	push	r24
     966:	9f 93       	push	r25
     968:	af 93       	push	r26
     96a:	bf 93       	push	r27
     96c:	ef 93       	push	r30
     96e:	ff 93       	push	r31
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
	usart_transmit_char('P');
     978:	80 e5       	ldi	r24, 0x50	; 80
     97a:	0e 94 8c 04 	call	0x918	; 0x918 <usart_transmit_char>
	if((PINC & (1 << PINC0)) == 0){
     97e:	86 e2       	ldi	r24, 0x26	; 38
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	fc 01       	movw	r30, r24
     984:	80 81       	ld	r24, Z
     986:	88 2f       	mov	r24, r24
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	81 70       	andi	r24, 0x01	; 1
     98c:	99 27       	eor	r25, r25
     98e:	89 2b       	or	r24, r25
     990:	19 f5       	brne	.+70     	; 0x9d8 <__vector_4+0x8c>
		if (PINC & (1 << PINC1)){ //CW
     992:	86 e2       	ldi	r24, 0x26	; 38
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	fc 01       	movw	r30, r24
     998:	80 81       	ld	r24, Z
     99a:	88 2f       	mov	r24, r24
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	82 70       	andi	r24, 0x02	; 2
     9a0:	99 27       	eor	r25, r25
     9a2:	89 2b       	or	r24, r25
     9a4:	69 f0       	breq	.+26     	; 0x9c0 <__vector_4+0x74>
			if (bass_index > 0){
     9a6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     9aa:	88 23       	and	r24, r24
     9ac:	a9 f0       	breq	.+42     	; 0x9d8 <__vector_4+0x8c>
				--bass_index; 
     9ae:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     9b2:	81 50       	subi	r24, 0x01	; 1
     9b4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
				usart_transmit_char('C'); }
     9b8:	83 e4       	ldi	r24, 0x43	; 67
     9ba:	0e 94 8c 04 	call	0x918	; 0x918 <usart_transmit_char>
     9be:	0c c0       	rjmp	.+24     	; 0x9d8 <__vector_4+0x8c>
		} else { //CCW
			if (bass_index < 17) {
     9c0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     9c4:	81 31       	cpi	r24, 0x11	; 17
     9c6:	40 f4       	brcc	.+16     	; 0x9d8 <__vector_4+0x8c>
				++bass_index; 
     9c8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     9cc:	8f 5f       	subi	r24, 0xFF	; 255
     9ce:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
				usart_transmit_char('W'); }
     9d2:	87 e5       	ldi	r24, 0x57	; 87
     9d4:	0e 94 8c 04 	call	0x918	; 0x918 <usart_transmit_char>
		}
	}
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	ff 91       	pop	r31
     9de:	ef 91       	pop	r30
     9e0:	bf 91       	pop	r27
     9e2:	af 91       	pop	r26
     9e4:	9f 91       	pop	r25
     9e6:	8f 91       	pop	r24
     9e8:	7f 91       	pop	r23
     9ea:	6f 91       	pop	r22
     9ec:	5f 91       	pop	r21
     9ee:	4f 91       	pop	r20
     9f0:	3f 91       	pop	r19
     9f2:	2f 91       	pop	r18
     9f4:	0f 90       	pop	r0
     9f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <main>:


int main(void)
{
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	63 97       	sbiw	r28, 0x13	; 19
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
	
	init_usart(9600, NONE, ONE);
     a14:	41 e0       	ldi	r20, 0x01	; 1
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	80 e8       	ldi	r24, 0x80	; 128
     a1a:	95 e2       	ldi	r25, 0x25	; 37
     a1c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <init_usart>
	Init_Pot_Meter();
     a20:	0e 94 53 00 	call	0xa6	; 0xa6 <Init_Pot_Meter>
	i2cInit();
     a24:	0e 94 ad 00 	call	0x15a	; 0x15a <i2cInit>
	initDisp();
     a28:	0e 94 33 01 	call	0x266	; 0x266 <initDisp>

	PCICR |= (1 << PCIE1);
     a2c:	88 e6       	ldi	r24, 0x68	; 104
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	28 e6       	ldi	r18, 0x68	; 104
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	f9 01       	movw	r30, r18
     a36:	20 81       	ld	r18, Z
     a38:	22 60       	ori	r18, 0x02	; 2
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
	PCMSK1 |= (1 << PCINT8);
     a3e:	8c e6       	ldi	r24, 0x6C	; 108
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	2c e6       	ldi	r18, 0x6C	; 108
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	f9 01       	movw	r30, r18
     a48:	20 81       	ld	r18, Z
     a4a:	21 60       	ori	r18, 0x01	; 1
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 83       	st	Z, r18
	Write_Pot_Meter(10, CS_1);
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	8a e0       	ldi	r24, 0x0A	; 10
     a54:	0e 94 6e 00 	call	0xdc	; 0xdc <Write_Pot_Meter>
	bass_index = 1;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
	uint8_t vol_values[16] = {0, 1, 2, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 255};
     a5e:	80 e1       	ldi	r24, 0x10	; 16
     a60:	ea e2       	ldi	r30, 0x2A	; 42
     a62:	f1 e0       	ldi	r31, 0x01	; 1
     a64:	de 01       	movw	r26, r28
     a66:	14 96       	adiw	r26, 0x04	; 4
     a68:	01 90       	ld	r0, Z+
     a6a:	0d 92       	st	X+, r0
     a6c:	8a 95       	dec	r24
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <main+0x68>
	uint8_t vol = 12;
     a70:	8c e0       	ldi	r24, 0x0C	; 12
     a72:	89 83       	std	Y+1, r24	; 0x01
	char *str = "Bass";
     a74:	85 e2       	ldi	r24, 0x25	; 37
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	9b 83       	std	Y+3, r25	; 0x03
     a7a:	8a 83       	std	Y+2, r24	; 0x02
	sei();
     a7c:	78 94       	sei
    while (1) 
    {
		//write_first_line(str, 0);
		write_volume_control(str, vol);
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	9b 81       	ldd	r25, Y+3	; 0x03
     a82:	69 81       	ldd	r22, Y+1	; 0x01
     a84:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <write_volume_control>
// 
// 		if(back_light_task) {
// 			//Turn of the back_light 
// 
// 		}
    }
     a88:	fa cf       	rjmp	.-12     	; 0xa7e <main+0x7e>

00000a8a <__udivmodsi4>:
     a8a:	a1 e2       	ldi	r26, 0x21	; 33
     a8c:	1a 2e       	mov	r1, r26
     a8e:	aa 1b       	sub	r26, r26
     a90:	bb 1b       	sub	r27, r27
     a92:	fd 01       	movw	r30, r26
     a94:	0d c0       	rjmp	.+26     	; 0xab0 <__udivmodsi4_ep>

00000a96 <__udivmodsi4_loop>:
     a96:	aa 1f       	adc	r26, r26
     a98:	bb 1f       	adc	r27, r27
     a9a:	ee 1f       	adc	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	a2 17       	cp	r26, r18
     aa0:	b3 07       	cpc	r27, r19
     aa2:	e4 07       	cpc	r30, r20
     aa4:	f5 07       	cpc	r31, r21
     aa6:	20 f0       	brcs	.+8      	; 0xab0 <__udivmodsi4_ep>
     aa8:	a2 1b       	sub	r26, r18
     aaa:	b3 0b       	sbc	r27, r19
     aac:	e4 0b       	sbc	r30, r20
     aae:	f5 0b       	sbc	r31, r21

00000ab0 <__udivmodsi4_ep>:
     ab0:	66 1f       	adc	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	88 1f       	adc	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	1a 94       	dec	r1
     aba:	69 f7       	brne	.-38     	; 0xa96 <__udivmodsi4_loop>
     abc:	60 95       	com	r22
     abe:	70 95       	com	r23
     ac0:	80 95       	com	r24
     ac2:	90 95       	com	r25
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	bd 01       	movw	r22, r26
     aca:	cf 01       	movw	r24, r30
     acc:	08 95       	ret

00000ace <strlen>:
     ace:	fc 01       	movw	r30, r24
     ad0:	01 90       	ld	r0, Z+
     ad2:	00 20       	and	r0, r0
     ad4:	e9 f7       	brne	.-6      	; 0xad0 <strlen+0x2>
     ad6:	80 95       	com	r24
     ad8:	90 95       	com	r25
     ada:	8e 0f       	add	r24, r30
     adc:	9f 1f       	adc	r25, r31
     ade:	08 95       	ret

00000ae0 <sprintf>:
     ae0:	ae e0       	ldi	r26, 0x0E	; 14
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	e6 e7       	ldi	r30, 0x76	; 118
     ae6:	f5 e0       	ldi	r31, 0x05	; 5
     ae8:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__prologue_saves__+0x1c>
     aec:	0d 89       	ldd	r16, Y+21	; 0x15
     aee:	1e 89       	ldd	r17, Y+22	; 0x16
     af0:	86 e0       	ldi	r24, 0x06	; 6
     af2:	8c 83       	std	Y+4, r24	; 0x04
     af4:	1a 83       	std	Y+2, r17	; 0x02
     af6:	09 83       	std	Y+1, r16	; 0x01
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	9f e7       	ldi	r25, 0x7F	; 127
     afc:	9e 83       	std	Y+6, r25	; 0x06
     afe:	8d 83       	std	Y+5, r24	; 0x05
     b00:	ae 01       	movw	r20, r28
     b02:	47 5e       	subi	r20, 0xE7	; 231
     b04:	5f 4f       	sbci	r21, 0xFF	; 255
     b06:	6f 89       	ldd	r22, Y+23	; 0x17
     b08:	78 8d       	ldd	r23, Y+24	; 0x18
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	0e 94 93 05 	call	0xb26	; 0xb26 <vfprintf>
     b12:	2f 81       	ldd	r18, Y+7	; 0x07
     b14:	38 85       	ldd	r19, Y+8	; 0x08
     b16:	f8 01       	movw	r30, r16
     b18:	e2 0f       	add	r30, r18
     b1a:	f3 1f       	adc	r31, r19
     b1c:	10 82       	st	Z, r1
     b1e:	2e 96       	adiw	r28, 0x0e	; 14
     b20:	e4 e0       	ldi	r30, 0x04	; 4
     b22:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__epilogue_restores__+0x1c>

00000b26 <vfprintf>:
     b26:	ac e0       	ldi	r26, 0x0C	; 12
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	e9 e9       	ldi	r30, 0x99	; 153
     b2c:	f5 e0       	ldi	r31, 0x05	; 5
     b2e:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__prologue_saves__>
     b32:	7c 01       	movw	r14, r24
     b34:	6b 01       	movw	r12, r22
     b36:	8a 01       	movw	r16, r20
     b38:	fc 01       	movw	r30, r24
     b3a:	17 82       	std	Z+7, r1	; 0x07
     b3c:	16 82       	std	Z+6, r1	; 0x06
     b3e:	83 81       	ldd	r24, Z+3	; 0x03
     b40:	81 ff       	sbrs	r24, 1
     b42:	bd c1       	rjmp	.+890    	; 0xebe <vfprintf+0x398>
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	4c 01       	movw	r8, r24
     b4a:	f7 01       	movw	r30, r14
     b4c:	93 81       	ldd	r25, Z+3	; 0x03
     b4e:	f6 01       	movw	r30, r12
     b50:	93 fd       	sbrc	r25, 3
     b52:	85 91       	lpm	r24, Z+
     b54:	93 ff       	sbrs	r25, 3
     b56:	81 91       	ld	r24, Z+
     b58:	6f 01       	movw	r12, r30
     b5a:	88 23       	and	r24, r24
     b5c:	09 f4       	brne	.+2      	; 0xb60 <vfprintf+0x3a>
     b5e:	ab c1       	rjmp	.+854    	; 0xeb6 <vfprintf+0x390>
     b60:	85 32       	cpi	r24, 0x25	; 37
     b62:	39 f4       	brne	.+14     	; 0xb72 <vfprintf+0x4c>
     b64:	93 fd       	sbrc	r25, 3
     b66:	85 91       	lpm	r24, Z+
     b68:	93 ff       	sbrs	r25, 3
     b6a:	81 91       	ld	r24, Z+
     b6c:	6f 01       	movw	r12, r30
     b6e:	85 32       	cpi	r24, 0x25	; 37
     b70:	29 f4       	brne	.+10     	; 0xb7c <vfprintf+0x56>
     b72:	b7 01       	movw	r22, r14
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 7b 07 	call	0xef6	; 0xef6 <fputc>
     b7a:	e7 cf       	rjmp	.-50     	; 0xb4a <vfprintf+0x24>
     b7c:	51 2c       	mov	r5, r1
     b7e:	31 2c       	mov	r3, r1
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	20 32       	cpi	r18, 0x20	; 32
     b84:	a0 f4       	brcc	.+40     	; 0xbae <vfprintf+0x88>
     b86:	8b 32       	cpi	r24, 0x2B	; 43
     b88:	69 f0       	breq	.+26     	; 0xba4 <vfprintf+0x7e>
     b8a:	30 f4       	brcc	.+12     	; 0xb98 <vfprintf+0x72>
     b8c:	80 32       	cpi	r24, 0x20	; 32
     b8e:	59 f0       	breq	.+22     	; 0xba6 <vfprintf+0x80>
     b90:	83 32       	cpi	r24, 0x23	; 35
     b92:	69 f4       	brne	.+26     	; 0xbae <vfprintf+0x88>
     b94:	20 61       	ori	r18, 0x10	; 16
     b96:	2c c0       	rjmp	.+88     	; 0xbf0 <vfprintf+0xca>
     b98:	8d 32       	cpi	r24, 0x2D	; 45
     b9a:	39 f0       	breq	.+14     	; 0xbaa <vfprintf+0x84>
     b9c:	80 33       	cpi	r24, 0x30	; 48
     b9e:	39 f4       	brne	.+14     	; 0xbae <vfprintf+0x88>
     ba0:	21 60       	ori	r18, 0x01	; 1
     ba2:	26 c0       	rjmp	.+76     	; 0xbf0 <vfprintf+0xca>
     ba4:	22 60       	ori	r18, 0x02	; 2
     ba6:	24 60       	ori	r18, 0x04	; 4
     ba8:	23 c0       	rjmp	.+70     	; 0xbf0 <vfprintf+0xca>
     baa:	28 60       	ori	r18, 0x08	; 8
     bac:	21 c0       	rjmp	.+66     	; 0xbf0 <vfprintf+0xca>
     bae:	27 fd       	sbrc	r18, 7
     bb0:	27 c0       	rjmp	.+78     	; 0xc00 <vfprintf+0xda>
     bb2:	30 ed       	ldi	r19, 0xD0	; 208
     bb4:	38 0f       	add	r19, r24
     bb6:	3a 30       	cpi	r19, 0x0A	; 10
     bb8:	78 f4       	brcc	.+30     	; 0xbd8 <vfprintf+0xb2>
     bba:	26 ff       	sbrs	r18, 6
     bbc:	06 c0       	rjmp	.+12     	; 0xbca <vfprintf+0xa4>
     bbe:	fa e0       	ldi	r31, 0x0A	; 10
     bc0:	5f 9e       	mul	r5, r31
     bc2:	30 0d       	add	r19, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	53 2e       	mov	r5, r19
     bc8:	13 c0       	rjmp	.+38     	; 0xbf0 <vfprintf+0xca>
     bca:	8a e0       	ldi	r24, 0x0A	; 10
     bcc:	38 9e       	mul	r3, r24
     bce:	30 0d       	add	r19, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	33 2e       	mov	r3, r19
     bd4:	20 62       	ori	r18, 0x20	; 32
     bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <vfprintf+0xca>
     bd8:	8e 32       	cpi	r24, 0x2E	; 46
     bda:	21 f4       	brne	.+8      	; 0xbe4 <vfprintf+0xbe>
     bdc:	26 fd       	sbrc	r18, 6
     bde:	6b c1       	rjmp	.+726    	; 0xeb6 <vfprintf+0x390>
     be0:	20 64       	ori	r18, 0x40	; 64
     be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0xca>
     be4:	8c 36       	cpi	r24, 0x6C	; 108
     be6:	11 f4       	brne	.+4      	; 0xbec <vfprintf+0xc6>
     be8:	20 68       	ori	r18, 0x80	; 128
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <vfprintf+0xca>
     bec:	88 36       	cpi	r24, 0x68	; 104
     bee:	41 f4       	brne	.+16     	; 0xc00 <vfprintf+0xda>
     bf0:	f6 01       	movw	r30, r12
     bf2:	93 fd       	sbrc	r25, 3
     bf4:	85 91       	lpm	r24, Z+
     bf6:	93 ff       	sbrs	r25, 3
     bf8:	81 91       	ld	r24, Z+
     bfa:	6f 01       	movw	r12, r30
     bfc:	81 11       	cpse	r24, r1
     bfe:	c1 cf       	rjmp	.-126    	; 0xb82 <vfprintf+0x5c>
     c00:	98 2f       	mov	r25, r24
     c02:	9f 7d       	andi	r25, 0xDF	; 223
     c04:	95 54       	subi	r25, 0x45	; 69
     c06:	93 30       	cpi	r25, 0x03	; 3
     c08:	28 f4       	brcc	.+10     	; 0xc14 <vfprintf+0xee>
     c0a:	0c 5f       	subi	r16, 0xFC	; 252
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	ff e3       	ldi	r31, 0x3F	; 63
     c10:	f9 83       	std	Y+1, r31	; 0x01
     c12:	0d c0       	rjmp	.+26     	; 0xc2e <vfprintf+0x108>
     c14:	83 36       	cpi	r24, 0x63	; 99
     c16:	31 f0       	breq	.+12     	; 0xc24 <vfprintf+0xfe>
     c18:	83 37       	cpi	r24, 0x73	; 115
     c1a:	71 f0       	breq	.+28     	; 0xc38 <vfprintf+0x112>
     c1c:	83 35       	cpi	r24, 0x53	; 83
     c1e:	09 f0       	breq	.+2      	; 0xc22 <vfprintf+0xfc>
     c20:	5b c0       	rjmp	.+182    	; 0xcd8 <vfprintf+0x1b2>
     c22:	22 c0       	rjmp	.+68     	; 0xc68 <vfprintf+0x142>
     c24:	f8 01       	movw	r30, r16
     c26:	80 81       	ld	r24, Z
     c28:	89 83       	std	Y+1, r24	; 0x01
     c2a:	0e 5f       	subi	r16, 0xFE	; 254
     c2c:	1f 4f       	sbci	r17, 0xFF	; 255
     c2e:	44 24       	eor	r4, r4
     c30:	43 94       	inc	r4
     c32:	51 2c       	mov	r5, r1
     c34:	54 01       	movw	r10, r8
     c36:	15 c0       	rjmp	.+42     	; 0xc62 <vfprintf+0x13c>
     c38:	38 01       	movw	r6, r16
     c3a:	f2 e0       	ldi	r31, 0x02	; 2
     c3c:	6f 0e       	add	r6, r31
     c3e:	71 1c       	adc	r7, r1
     c40:	f8 01       	movw	r30, r16
     c42:	a0 80       	ld	r10, Z
     c44:	b1 80       	ldd	r11, Z+1	; 0x01
     c46:	26 ff       	sbrs	r18, 6
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <vfprintf+0x12a>
     c4a:	65 2d       	mov	r22, r5
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x12e>
     c50:	6f ef       	ldi	r22, 0xFF	; 255
     c52:	7f ef       	ldi	r23, 0xFF	; 255
     c54:	c5 01       	movw	r24, r10
     c56:	2c 87       	std	Y+12, r18	; 0x0c
     c58:	0e 94 70 07 	call	0xee0	; 0xee0 <strnlen>
     c5c:	2c 01       	movw	r4, r24
     c5e:	83 01       	movw	r16, r6
     c60:	2c 85       	ldd	r18, Y+12	; 0x0c
     c62:	2f 77       	andi	r18, 0x7F	; 127
     c64:	22 2e       	mov	r2, r18
     c66:	17 c0       	rjmp	.+46     	; 0xc96 <vfprintf+0x170>
     c68:	38 01       	movw	r6, r16
     c6a:	f2 e0       	ldi	r31, 0x02	; 2
     c6c:	6f 0e       	add	r6, r31
     c6e:	71 1c       	adc	r7, r1
     c70:	f8 01       	movw	r30, r16
     c72:	a0 80       	ld	r10, Z
     c74:	b1 80       	ldd	r11, Z+1	; 0x01
     c76:	26 ff       	sbrs	r18, 6
     c78:	03 c0       	rjmp	.+6      	; 0xc80 <vfprintf+0x15a>
     c7a:	65 2d       	mov	r22, r5
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <vfprintf+0x15e>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	c5 01       	movw	r24, r10
     c86:	2c 87       	std	Y+12, r18	; 0x0c
     c88:	0e 94 65 07 	call	0xeca	; 0xeca <strnlen_P>
     c8c:	2c 01       	movw	r4, r24
     c8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     c90:	20 68       	ori	r18, 0x80	; 128
     c92:	22 2e       	mov	r2, r18
     c94:	83 01       	movw	r16, r6
     c96:	23 fc       	sbrc	r2, 3
     c98:	1b c0       	rjmp	.+54     	; 0xcd0 <vfprintf+0x1aa>
     c9a:	83 2d       	mov	r24, r3
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	48 16       	cp	r4, r24
     ca0:	59 06       	cpc	r5, r25
     ca2:	b0 f4       	brcc	.+44     	; 0xcd0 <vfprintf+0x1aa>
     ca4:	b7 01       	movw	r22, r14
     ca6:	80 e2       	ldi	r24, 0x20	; 32
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 7b 07 	call	0xef6	; 0xef6 <fputc>
     cae:	3a 94       	dec	r3
     cb0:	f4 cf       	rjmp	.-24     	; 0xc9a <vfprintf+0x174>
     cb2:	f5 01       	movw	r30, r10
     cb4:	27 fc       	sbrc	r2, 7
     cb6:	85 91       	lpm	r24, Z+
     cb8:	27 fe       	sbrs	r2, 7
     cba:	81 91       	ld	r24, Z+
     cbc:	5f 01       	movw	r10, r30
     cbe:	b7 01       	movw	r22, r14
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 7b 07 	call	0xef6	; 0xef6 <fputc>
     cc6:	31 10       	cpse	r3, r1
     cc8:	3a 94       	dec	r3
     cca:	f1 e0       	ldi	r31, 0x01	; 1
     ccc:	4f 1a       	sub	r4, r31
     cce:	51 08       	sbc	r5, r1
     cd0:	41 14       	cp	r4, r1
     cd2:	51 04       	cpc	r5, r1
     cd4:	71 f7       	brne	.-36     	; 0xcb2 <vfprintf+0x18c>
     cd6:	e5 c0       	rjmp	.+458    	; 0xea2 <vfprintf+0x37c>
     cd8:	84 36       	cpi	r24, 0x64	; 100
     cda:	11 f0       	breq	.+4      	; 0xce0 <vfprintf+0x1ba>
     cdc:	89 36       	cpi	r24, 0x69	; 105
     cde:	39 f5       	brne	.+78     	; 0xd2e <vfprintf+0x208>
     ce0:	f8 01       	movw	r30, r16
     ce2:	27 ff       	sbrs	r18, 7
     ce4:	07 c0       	rjmp	.+14     	; 0xcf4 <vfprintf+0x1ce>
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	0c 5f       	subi	r16, 0xFC	; 252
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
     cf2:	08 c0       	rjmp	.+16     	; 0xd04 <vfprintf+0x1de>
     cf4:	60 81       	ld	r22, Z
     cf6:	71 81       	ldd	r23, Z+1	; 0x01
     cf8:	07 2e       	mov	r0, r23
     cfa:	00 0c       	add	r0, r0
     cfc:	88 0b       	sbc	r24, r24
     cfe:	99 0b       	sbc	r25, r25
     d00:	0e 5f       	subi	r16, 0xFE	; 254
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	2f 76       	andi	r18, 0x6F	; 111
     d06:	72 2e       	mov	r7, r18
     d08:	97 ff       	sbrs	r25, 7
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <vfprintf+0x1f8>
     d0c:	90 95       	com	r25
     d0e:	80 95       	com	r24
     d10:	70 95       	com	r23
     d12:	61 95       	neg	r22
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	8f 4f       	sbci	r24, 0xFF	; 255
     d18:	9f 4f       	sbci	r25, 0xFF	; 255
     d1a:	20 68       	ori	r18, 0x80	; 128
     d1c:	72 2e       	mov	r7, r18
     d1e:	2a e0       	ldi	r18, 0x0A	; 10
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	a4 01       	movw	r20, r8
     d24:	0e 94 b3 07 	call	0xf66	; 0xf66 <__ultoa_invert>
     d28:	a8 2e       	mov	r10, r24
     d2a:	a8 18       	sub	r10, r8
     d2c:	44 c0       	rjmp	.+136    	; 0xdb6 <vfprintf+0x290>
     d2e:	85 37       	cpi	r24, 0x75	; 117
     d30:	29 f4       	brne	.+10     	; 0xd3c <vfprintf+0x216>
     d32:	2f 7e       	andi	r18, 0xEF	; 239
     d34:	b2 2e       	mov	r11, r18
     d36:	2a e0       	ldi	r18, 0x0A	; 10
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	25 c0       	rjmp	.+74     	; 0xd86 <vfprintf+0x260>
     d3c:	f2 2f       	mov	r31, r18
     d3e:	f9 7f       	andi	r31, 0xF9	; 249
     d40:	bf 2e       	mov	r11, r31
     d42:	8f 36       	cpi	r24, 0x6F	; 111
     d44:	c1 f0       	breq	.+48     	; 0xd76 <vfprintf+0x250>
     d46:	18 f4       	brcc	.+6      	; 0xd4e <vfprintf+0x228>
     d48:	88 35       	cpi	r24, 0x58	; 88
     d4a:	79 f0       	breq	.+30     	; 0xd6a <vfprintf+0x244>
     d4c:	b4 c0       	rjmp	.+360    	; 0xeb6 <vfprintf+0x390>
     d4e:	80 37       	cpi	r24, 0x70	; 112
     d50:	19 f0       	breq	.+6      	; 0xd58 <vfprintf+0x232>
     d52:	88 37       	cpi	r24, 0x78	; 120
     d54:	21 f0       	breq	.+8      	; 0xd5e <vfprintf+0x238>
     d56:	af c0       	rjmp	.+350    	; 0xeb6 <vfprintf+0x390>
     d58:	2f 2f       	mov	r18, r31
     d5a:	20 61       	ori	r18, 0x10	; 16
     d5c:	b2 2e       	mov	r11, r18
     d5e:	b4 fe       	sbrs	r11, 4
     d60:	0d c0       	rjmp	.+26     	; 0xd7c <vfprintf+0x256>
     d62:	8b 2d       	mov	r24, r11
     d64:	84 60       	ori	r24, 0x04	; 4
     d66:	b8 2e       	mov	r11, r24
     d68:	09 c0       	rjmp	.+18     	; 0xd7c <vfprintf+0x256>
     d6a:	24 ff       	sbrs	r18, 4
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <vfprintf+0x25c>
     d6e:	9f 2f       	mov	r25, r31
     d70:	96 60       	ori	r25, 0x06	; 6
     d72:	b9 2e       	mov	r11, r25
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <vfprintf+0x25c>
     d76:	28 e0       	ldi	r18, 0x08	; 8
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	05 c0       	rjmp	.+10     	; 0xd86 <vfprintf+0x260>
     d7c:	20 e1       	ldi	r18, 0x10	; 16
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <vfprintf+0x260>
     d82:	20 e1       	ldi	r18, 0x10	; 16
     d84:	32 e0       	ldi	r19, 0x02	; 2
     d86:	f8 01       	movw	r30, r16
     d88:	b7 fe       	sbrs	r11, 7
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <vfprintf+0x274>
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	0c 5f       	subi	r16, 0xFC	; 252
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	06 c0       	rjmp	.+12     	; 0xda6 <vfprintf+0x280>
     d9a:	60 81       	ld	r22, Z
     d9c:	71 81       	ldd	r23, Z+1	; 0x01
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 5f       	subi	r16, 0xFE	; 254
     da4:	1f 4f       	sbci	r17, 0xFF	; 255
     da6:	a4 01       	movw	r20, r8
     da8:	0e 94 b3 07 	call	0xf66	; 0xf66 <__ultoa_invert>
     dac:	a8 2e       	mov	r10, r24
     dae:	a8 18       	sub	r10, r8
     db0:	fb 2d       	mov	r31, r11
     db2:	ff 77       	andi	r31, 0x7F	; 127
     db4:	7f 2e       	mov	r7, r31
     db6:	76 fe       	sbrs	r7, 6
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <vfprintf+0x2aa>
     dba:	37 2d       	mov	r19, r7
     dbc:	3e 7f       	andi	r19, 0xFE	; 254
     dbe:	a5 14       	cp	r10, r5
     dc0:	50 f4       	brcc	.+20     	; 0xdd6 <vfprintf+0x2b0>
     dc2:	74 fe       	sbrs	r7, 4
     dc4:	0a c0       	rjmp	.+20     	; 0xdda <vfprintf+0x2b4>
     dc6:	72 fc       	sbrc	r7, 2
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <vfprintf+0x2b4>
     dca:	37 2d       	mov	r19, r7
     dcc:	3e 7e       	andi	r19, 0xEE	; 238
     dce:	05 c0       	rjmp	.+10     	; 0xdda <vfprintf+0x2b4>
     dd0:	ba 2c       	mov	r11, r10
     dd2:	37 2d       	mov	r19, r7
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <vfprintf+0x2b6>
     dd6:	ba 2c       	mov	r11, r10
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <vfprintf+0x2b6>
     dda:	b5 2c       	mov	r11, r5
     ddc:	34 ff       	sbrs	r19, 4
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <vfprintf+0x2d4>
     de0:	fe 01       	movw	r30, r28
     de2:	ea 0d       	add	r30, r10
     de4:	f1 1d       	adc	r31, r1
     de6:	80 81       	ld	r24, Z
     de8:	80 33       	cpi	r24, 0x30	; 48
     dea:	11 f4       	brne	.+4      	; 0xdf0 <vfprintf+0x2ca>
     dec:	39 7e       	andi	r19, 0xE9	; 233
     dee:	09 c0       	rjmp	.+18     	; 0xe02 <vfprintf+0x2dc>
     df0:	32 ff       	sbrs	r19, 2
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <vfprintf+0x2da>
     df4:	b3 94       	inc	r11
     df6:	b3 94       	inc	r11
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <vfprintf+0x2dc>
     dfa:	83 2f       	mov	r24, r19
     dfc:	86 78       	andi	r24, 0x86	; 134
     dfe:	09 f0       	breq	.+2      	; 0xe02 <vfprintf+0x2dc>
     e00:	b3 94       	inc	r11
     e02:	33 fd       	sbrc	r19, 3
     e04:	13 c0       	rjmp	.+38     	; 0xe2c <vfprintf+0x306>
     e06:	30 ff       	sbrs	r19, 0
     e08:	06 c0       	rjmp	.+12     	; 0xe16 <vfprintf+0x2f0>
     e0a:	5a 2c       	mov	r5, r10
     e0c:	b3 14       	cp	r11, r3
     e0e:	18 f4       	brcc	.+6      	; 0xe16 <vfprintf+0x2f0>
     e10:	53 0c       	add	r5, r3
     e12:	5b 18       	sub	r5, r11
     e14:	b3 2c       	mov	r11, r3
     e16:	b3 14       	cp	r11, r3
     e18:	68 f4       	brcc	.+26     	; 0xe34 <vfprintf+0x30e>
     e1a:	b7 01       	movw	r22, r14
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	3c 87       	std	Y+12, r19	; 0x0c
     e22:	0e 94 7b 07 	call	0xef6	; 0xef6 <fputc>
     e26:	b3 94       	inc	r11
     e28:	3c 85       	ldd	r19, Y+12	; 0x0c
     e2a:	f5 cf       	rjmp	.-22     	; 0xe16 <vfprintf+0x2f0>
     e2c:	b3 14       	cp	r11, r3
     e2e:	10 f4       	brcc	.+4      	; 0xe34 <vfprintf+0x30e>
     e30:	3b 18       	sub	r3, r11
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <vfprintf+0x310>
     e34:	31 2c       	mov	r3, r1
     e36:	34 ff       	sbrs	r19, 4
     e38:	12 c0       	rjmp	.+36     	; 0xe5e <vfprintf+0x338>
     e3a:	b7 01       	movw	r22, r14
     e3c:	80 e3       	ldi	r24, 0x30	; 48
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	3c 87       	std	Y+12, r19	; 0x0c
     e42:	0e 94 7b 07 	call	0xef6	; 0xef6 <fputc>
     e46:	3c 85       	ldd	r19, Y+12	; 0x0c
     e48:	32 ff       	sbrs	r19, 2
     e4a:	17 c0       	rjmp	.+46     	; 0xe7a <vfprintf+0x354>
     e4c:	31 fd       	sbrc	r19, 1
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <vfprintf+0x330>
     e50:	88 e7       	ldi	r24, 0x78	; 120
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0x334>
     e56:	88 e5       	ldi	r24, 0x58	; 88
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	b7 01       	movw	r22, r14
     e5c:	0c c0       	rjmp	.+24     	; 0xe76 <vfprintf+0x350>
     e5e:	83 2f       	mov	r24, r19
     e60:	86 78       	andi	r24, 0x86	; 134
     e62:	59 f0       	breq	.+22     	; 0xe7a <vfprintf+0x354>
     e64:	31 ff       	sbrs	r19, 1
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <vfprintf+0x346>
     e68:	8b e2       	ldi	r24, 0x2B	; 43
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <vfprintf+0x348>
     e6c:	80 e2       	ldi	r24, 0x20	; 32
     e6e:	37 fd       	sbrc	r19, 7
     e70:	8d e2       	ldi	r24, 0x2D	; 45
     e72:	b7 01       	movw	r22, r14
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 7b 07 	call	0xef6	; 0xef6 <fputc>
     e7a:	a5 14       	cp	r10, r5
     e7c:	38 f4       	brcc	.+14     	; 0xe8c <vfprintf+0x366>
     e7e:	b7 01       	movw	r22, r14
     e80:	80 e3       	ldi	r24, 0x30	; 48
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 7b 07 	call	0xef6	; 0xef6 <fputc>
     e88:	5a 94       	dec	r5
     e8a:	f7 cf       	rjmp	.-18     	; 0xe7a <vfprintf+0x354>
     e8c:	aa 94       	dec	r10
     e8e:	f4 01       	movw	r30, r8
     e90:	ea 0d       	add	r30, r10
     e92:	f1 1d       	adc	r31, r1
     e94:	80 81       	ld	r24, Z
     e96:	b7 01       	movw	r22, r14
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 7b 07 	call	0xef6	; 0xef6 <fputc>
     e9e:	a1 10       	cpse	r10, r1
     ea0:	f5 cf       	rjmp	.-22     	; 0xe8c <vfprintf+0x366>
     ea2:	33 20       	and	r3, r3
     ea4:	09 f4       	brne	.+2      	; 0xea8 <vfprintf+0x382>
     ea6:	51 ce       	rjmp	.-862    	; 0xb4a <vfprintf+0x24>
     ea8:	b7 01       	movw	r22, r14
     eaa:	80 e2       	ldi	r24, 0x20	; 32
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 7b 07 	call	0xef6	; 0xef6 <fputc>
     eb2:	3a 94       	dec	r3
     eb4:	f6 cf       	rjmp	.-20     	; 0xea2 <vfprintf+0x37c>
     eb6:	f7 01       	movw	r30, r14
     eb8:	86 81       	ldd	r24, Z+6	; 0x06
     eba:	97 81       	ldd	r25, Z+7	; 0x07
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <vfprintf+0x39c>
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	9f ef       	ldi	r25, 0xFF	; 255
     ec2:	2c 96       	adiw	r28, 0x0c	; 12
     ec4:	e2 e1       	ldi	r30, 0x12	; 18
     ec6:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__epilogue_restores__>

00000eca <strnlen_P>:
     eca:	fc 01       	movw	r30, r24
     ecc:	05 90       	lpm	r0, Z+
     ece:	61 50       	subi	r22, 0x01	; 1
     ed0:	70 40       	sbci	r23, 0x00	; 0
     ed2:	01 10       	cpse	r0, r1
     ed4:	d8 f7       	brcc	.-10     	; 0xecc <strnlen_P+0x2>
     ed6:	80 95       	com	r24
     ed8:	90 95       	com	r25
     eda:	8e 0f       	add	r24, r30
     edc:	9f 1f       	adc	r25, r31
     ede:	08 95       	ret

00000ee0 <strnlen>:
     ee0:	fc 01       	movw	r30, r24
     ee2:	61 50       	subi	r22, 0x01	; 1
     ee4:	70 40       	sbci	r23, 0x00	; 0
     ee6:	01 90       	ld	r0, Z+
     ee8:	01 10       	cpse	r0, r1
     eea:	d8 f7       	brcc	.-10     	; 0xee2 <strnlen+0x2>
     eec:	80 95       	com	r24
     eee:	90 95       	com	r25
     ef0:	8e 0f       	add	r24, r30
     ef2:	9f 1f       	adc	r25, r31
     ef4:	08 95       	ret

00000ef6 <fputc>:
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	fb 01       	movw	r30, r22
     f00:	23 81       	ldd	r18, Z+3	; 0x03
     f02:	21 fd       	sbrc	r18, 1
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <fputc+0x16>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	9f ef       	ldi	r25, 0xFF	; 255
     f0a:	28 c0       	rjmp	.+80     	; 0xf5c <fputc+0x66>
     f0c:	22 ff       	sbrs	r18, 2
     f0e:	16 c0       	rjmp	.+44     	; 0xf3c <fputc+0x46>
     f10:	46 81       	ldd	r20, Z+6	; 0x06
     f12:	57 81       	ldd	r21, Z+7	; 0x07
     f14:	24 81       	ldd	r18, Z+4	; 0x04
     f16:	35 81       	ldd	r19, Z+5	; 0x05
     f18:	42 17       	cp	r20, r18
     f1a:	53 07       	cpc	r21, r19
     f1c:	44 f4       	brge	.+16     	; 0xf2e <fputc+0x38>
     f1e:	a0 81       	ld	r26, Z
     f20:	b1 81       	ldd	r27, Z+1	; 0x01
     f22:	9d 01       	movw	r18, r26
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	31 83       	std	Z+1, r19	; 0x01
     f2a:	20 83       	st	Z, r18
     f2c:	8c 93       	st	X, r24
     f2e:	26 81       	ldd	r18, Z+6	; 0x06
     f30:	37 81       	ldd	r19, Z+7	; 0x07
     f32:	2f 5f       	subi	r18, 0xFF	; 255
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	37 83       	std	Z+7, r19	; 0x07
     f38:	26 83       	std	Z+6, r18	; 0x06
     f3a:	10 c0       	rjmp	.+32     	; 0xf5c <fputc+0x66>
     f3c:	eb 01       	movw	r28, r22
     f3e:	09 2f       	mov	r16, r25
     f40:	18 2f       	mov	r17, r24
     f42:	00 84       	ldd	r0, Z+8	; 0x08
     f44:	f1 85       	ldd	r31, Z+9	; 0x09
     f46:	e0 2d       	mov	r30, r0
     f48:	09 95       	icall
     f4a:	89 2b       	or	r24, r25
     f4c:	e1 f6       	brne	.-72     	; 0xf06 <fputc+0x10>
     f4e:	8e 81       	ldd	r24, Y+6	; 0x06
     f50:	9f 81       	ldd	r25, Y+7	; 0x07
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	9f 83       	std	Y+7, r25	; 0x07
     f56:	8e 83       	std	Y+6, r24	; 0x06
     f58:	81 2f       	mov	r24, r17
     f5a:	90 2f       	mov	r25, r16
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <__ultoa_invert>:
     f66:	fa 01       	movw	r30, r20
     f68:	aa 27       	eor	r26, r26
     f6a:	28 30       	cpi	r18, 0x08	; 8
     f6c:	51 f1       	breq	.+84     	; 0xfc2 <__ultoa_invert+0x5c>
     f6e:	20 31       	cpi	r18, 0x10	; 16
     f70:	81 f1       	breq	.+96     	; 0xfd2 <__ultoa_invert+0x6c>
     f72:	e8 94       	clt
     f74:	6f 93       	push	r22
     f76:	6e 7f       	andi	r22, 0xFE	; 254
     f78:	6e 5f       	subi	r22, 0xFE	; 254
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	af 4f       	sbci	r26, 0xFF	; 255
     f82:	b1 e0       	ldi	r27, 0x01	; 1
     f84:	3e d0       	rcall	.+124    	; 0x1002 <__ultoa_invert+0x9c>
     f86:	b4 e0       	ldi	r27, 0x04	; 4
     f88:	3c d0       	rcall	.+120    	; 0x1002 <__ultoa_invert+0x9c>
     f8a:	67 0f       	add	r22, r23
     f8c:	78 1f       	adc	r23, r24
     f8e:	89 1f       	adc	r24, r25
     f90:	9a 1f       	adc	r25, r26
     f92:	a1 1d       	adc	r26, r1
     f94:	68 0f       	add	r22, r24
     f96:	79 1f       	adc	r23, r25
     f98:	8a 1f       	adc	r24, r26
     f9a:	91 1d       	adc	r25, r1
     f9c:	a1 1d       	adc	r26, r1
     f9e:	6a 0f       	add	r22, r26
     fa0:	71 1d       	adc	r23, r1
     fa2:	81 1d       	adc	r24, r1
     fa4:	91 1d       	adc	r25, r1
     fa6:	a1 1d       	adc	r26, r1
     fa8:	20 d0       	rcall	.+64     	; 0xfea <__ultoa_invert+0x84>
     faa:	09 f4       	brne	.+2      	; 0xfae <__ultoa_invert+0x48>
     fac:	68 94       	set
     fae:	3f 91       	pop	r19
     fb0:	2a e0       	ldi	r18, 0x0A	; 10
     fb2:	26 9f       	mul	r18, r22
     fb4:	11 24       	eor	r1, r1
     fb6:	30 19       	sub	r19, r0
     fb8:	30 5d       	subi	r19, 0xD0	; 208
     fba:	31 93       	st	Z+, r19
     fbc:	de f6       	brtc	.-74     	; 0xf74 <__ultoa_invert+0xe>
     fbe:	cf 01       	movw	r24, r30
     fc0:	08 95       	ret
     fc2:	46 2f       	mov	r20, r22
     fc4:	47 70       	andi	r20, 0x07	; 7
     fc6:	40 5d       	subi	r20, 0xD0	; 208
     fc8:	41 93       	st	Z+, r20
     fca:	b3 e0       	ldi	r27, 0x03	; 3
     fcc:	0f d0       	rcall	.+30     	; 0xfec <__ultoa_invert+0x86>
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <__ultoa_invert+0x5c>
     fd0:	f6 cf       	rjmp	.-20     	; 0xfbe <__ultoa_invert+0x58>
     fd2:	46 2f       	mov	r20, r22
     fd4:	4f 70       	andi	r20, 0x0F	; 15
     fd6:	40 5d       	subi	r20, 0xD0	; 208
     fd8:	4a 33       	cpi	r20, 0x3A	; 58
     fda:	18 f0       	brcs	.+6      	; 0xfe2 <__ultoa_invert+0x7c>
     fdc:	49 5d       	subi	r20, 0xD9	; 217
     fde:	31 fd       	sbrc	r19, 1
     fe0:	40 52       	subi	r20, 0x20	; 32
     fe2:	41 93       	st	Z+, r20
     fe4:	02 d0       	rcall	.+4      	; 0xfea <__ultoa_invert+0x84>
     fe6:	a9 f7       	brne	.-22     	; 0xfd2 <__ultoa_invert+0x6c>
     fe8:	ea cf       	rjmp	.-44     	; 0xfbe <__ultoa_invert+0x58>
     fea:	b4 e0       	ldi	r27, 0x04	; 4
     fec:	a6 95       	lsr	r26
     fee:	97 95       	ror	r25
     ff0:	87 95       	ror	r24
     ff2:	77 95       	ror	r23
     ff4:	67 95       	ror	r22
     ff6:	ba 95       	dec	r27
     ff8:	c9 f7       	brne	.-14     	; 0xfec <__ultoa_invert+0x86>
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	61 05       	cpc	r22, r1
     ffe:	71 05       	cpc	r23, r1
    1000:	08 95       	ret
    1002:	9b 01       	movw	r18, r22
    1004:	ac 01       	movw	r20, r24
    1006:	0a 2e       	mov	r0, r26
    1008:	06 94       	lsr	r0
    100a:	57 95       	ror	r21
    100c:	47 95       	ror	r20
    100e:	37 95       	ror	r19
    1010:	27 95       	ror	r18
    1012:	ba 95       	dec	r27
    1014:	c9 f7       	brne	.-14     	; 0x1008 <__ultoa_invert+0xa2>
    1016:	62 0f       	add	r22, r18
    1018:	73 1f       	adc	r23, r19
    101a:	84 1f       	adc	r24, r20
    101c:	95 1f       	adc	r25, r21
    101e:	a0 1d       	adc	r26, r0
    1020:	08 95       	ret

00001022 <__prologue_saves__>:
    1022:	2f 92       	push	r2
    1024:	3f 92       	push	r3
    1026:	4f 92       	push	r4
    1028:	5f 92       	push	r5
    102a:	6f 92       	push	r6
    102c:	7f 92       	push	r7
    102e:	8f 92       	push	r8
    1030:	9f 92       	push	r9
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	ca 1b       	sub	r28, r26
    104c:	db 0b       	sbc	r29, r27
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	09 94       	ijmp

0000105a <__epilogue_restores__>:
    105a:	2a 88       	ldd	r2, Y+18	; 0x12
    105c:	39 88       	ldd	r3, Y+17	; 0x11
    105e:	48 88       	ldd	r4, Y+16	; 0x10
    1060:	5f 84       	ldd	r5, Y+15	; 0x0f
    1062:	6e 84       	ldd	r6, Y+14	; 0x0e
    1064:	7d 84       	ldd	r7, Y+13	; 0x0d
    1066:	8c 84       	ldd	r8, Y+12	; 0x0c
    1068:	9b 84       	ldd	r9, Y+11	; 0x0b
    106a:	aa 84       	ldd	r10, Y+10	; 0x0a
    106c:	b9 84       	ldd	r11, Y+9	; 0x09
    106e:	c8 84       	ldd	r12, Y+8	; 0x08
    1070:	df 80       	ldd	r13, Y+7	; 0x07
    1072:	ee 80       	ldd	r14, Y+6	; 0x06
    1074:	fd 80       	ldd	r15, Y+5	; 0x05
    1076:	0c 81       	ldd	r16, Y+4	; 0x04
    1078:	1b 81       	ldd	r17, Y+3	; 0x03
    107a:	aa 81       	ldd	r26, Y+2	; 0x02
    107c:	b9 81       	ldd	r27, Y+1	; 0x01
    107e:	ce 0f       	add	r28, r30
    1080:	d1 1d       	adc	r29, r1
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	ed 01       	movw	r28, r26
    108e:	08 95       	ret

00001090 <_exit>:
    1090:	f8 94       	cli

00001092 <__stop_program>:
    1092:	ff cf       	rjmp	.-2      	; 0x1092 <__stop_program>
