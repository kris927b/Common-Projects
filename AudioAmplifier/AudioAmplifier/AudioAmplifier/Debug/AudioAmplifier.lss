
AudioAmplifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  00001aee  00001b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  008001cc  008001cc  00001c4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012dd  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aed  00000000  00000000  00003179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001236  00000000  00000000  00003c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  00004e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000796  00000000  00000000  00005478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba0  00000000  00000000  00005c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000067ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_3>
      10:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ee       	ldi	r30, 0xEE	; 238
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3c       	cpi	r26, 0xCC	; 204
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac ec       	ldi	r26, 0xCC	; 204
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 3f       	cpi	r26, 0xF8	; 248
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <main>
      9e:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init_Pot_Meter>:
 
#include <avr/io.h>
#include "Dig_Pot_Lib.h"
#include "SPI_Lib.h"

void Init_Pot_Meter() {
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	SPI_Init_Master();
      ae:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <SPI_Init_Master>
	CS_D |= (1 << CS_0) | (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
      b2:	84 e2       	ldi	r24, 0x24	; 36
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	24 e2       	ldi	r18, 0x24	; 36
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	f9 01       	movw	r30, r18
      bc:	20 81       	ld	r18, Z
      be:	27 61       	ori	r18, 0x17	; 23
      c0:	fc 01       	movw	r30, r24
      c2:	20 83       	st	Z, r18
	CS |= (1 << CS_0) | (1 << CS_1) | (1 << CS_2) | (1 << CS_3);
      c4:	85 e2       	ldi	r24, 0x25	; 37
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	25 e2       	ldi	r18, 0x25	; 37
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	f9 01       	movw	r30, r18
      ce:	20 81       	ld	r18, Z
      d0:	27 61       	ori	r18, 0x17	; 23
      d2:	fc 01       	movw	r30, r24
      d4:	20 83       	st	Z, r18
}
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <Write_Pot_Meter>:

void Write_Pot_Meter(uint8_t value, uint8_t CS_pin) {
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	00 d0       	rcall	.+0      	; 0xe2 <Write_Pot_Meter+0x6>
      e2:	00 d0       	rcall	.+0      	; 0xe4 <Write_Pot_Meter+0x8>
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	8b 83       	std	Y+3, r24	; 0x03
      ea:	6c 83       	std	Y+4, r22	; 0x04
	CS &= ~(1 << CS_pin);
      ec:	85 e2       	ldi	r24, 0x25	; 37
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	25 e2       	ldi	r18, 0x25	; 37
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	62 2f       	mov	r22, r18
      fa:	2c 81       	ldd	r18, Y+4	; 0x04
      fc:	42 2f       	mov	r20, r18
      fe:	50 e0       	ldi	r21, 0x00	; 0
     100:	21 e0       	ldi	r18, 0x01	; 1
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <Write_Pot_Meter+0x2e>
     106:	22 0f       	add	r18, r18
     108:	33 1f       	adc	r19, r19
     10a:	4a 95       	dec	r20
     10c:	e2 f7       	brpl	.-8      	; 0x106 <Write_Pot_Meter+0x2a>
     10e:	20 95       	com	r18
     110:	26 23       	and	r18, r22
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
	uint8_t data[2] = {0b00000000, value};
     116:	19 82       	std	Y+1, r1	; 0x01
     118:	8b 81       	ldd	r24, Y+3	; 0x03
     11a:	8a 83       	std	Y+2, r24	; 0x02
	SPI_Send_Large_Data(data);
     11c:	ce 01       	movw	r24, r28
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	0e 94 1a 04 	call	0x834	; 0x834 <SPI_Send_Large_Data>
	CS |= (1 << CS_pin);
     124:	85 e2       	ldi	r24, 0x25	; 37
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	25 e2       	ldi	r18, 0x25	; 37
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	62 2f       	mov	r22, r18
     132:	2c 81       	ldd	r18, Y+4	; 0x04
     134:	42 2f       	mov	r20, r18
     136:	50 e0       	ldi	r21, 0x00	; 0
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <Write_Pot_Meter+0x66>
     13e:	22 0f       	add	r18, r18
     140:	33 1f       	adc	r19, r19
     142:	4a 95       	dec	r20
     144:	e2 f7       	brpl	.-8      	; 0x13e <Write_Pot_Meter+0x62>
     146:	26 2b       	or	r18, r22
     148:	fc 01       	movw	r30, r24
     14a:	20 83       	st	Z, r18
} 
     14c:	0f 90       	pop	r0
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <i2cInit>:
#include <avr/io.h>
#include "i2cLib.h"

void i2cInit(){
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
    TWSR &= ~((1 << TWPS0) | (1 << TWPS1)); //prescaler set to 0
     162:	89 eb       	ldi	r24, 0xB9	; 185
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	29 eb       	ldi	r18, 0xB9	; 185
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	f9 01       	movw	r30, r18
     16c:	20 81       	ld	r18, Z
     16e:	2c 7f       	andi	r18, 0xFC	; 252
     170:	fc 01       	movw	r30, r24
     172:	20 83       	st	Z, r18
    TWBR = 12; //setting the bit rate to 400kHz
     174:	88 eb       	ldi	r24, 0xB8	; 184
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	2c e0       	ldi	r18, 0x0C	; 12
     17a:	fc 01       	movw	r30, r24
     17c:	20 83       	st	Z, r18
    TWCR |= (1 << TWEN); //i2c enable 
     17e:	8c eb       	ldi	r24, 0xBC	; 188
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	2c eb       	ldi	r18, 0xBC	; 188
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	f9 01       	movw	r30, r18
     188:	20 81       	ld	r18, Z
     18a:	24 60       	ori	r18, 0x04	; 4
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <i2cStart>:

void i2cStart(){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); //setting interrupt pin, generating starting condition and enabling i2c
     19e:	8c eb       	ldi	r24, 0xBC	; 188
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	24 ea       	ldi	r18, 0xA4	; 164
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 83       	st	Z, r18
    while (!(TWCR & (1 << TWINT))); //waiting for the transmission of start condition to end
     1a8:	00 00       	nop
     1aa:	8c eb       	ldi	r24, 0xBC	; 188
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	fc 01       	movw	r30, r24
     1b0:	80 81       	ld	r24, Z
     1b2:	88 23       	and	r24, r24
     1b4:	d4 f7       	brge	.-12     	; 0x1aa <i2cStart+0x14>
}
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <i2cStop>:

void i2cStop(){
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); //setting interrupt pin, gen. stopping condition and enabling i2c 
     1c4:	8c eb       	ldi	r24, 0xBC	; 188
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	24 e9       	ldi	r18, 0x94	; 148
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18
}
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	08 95       	ret

000001d4 <i2cWrite>:

void i2cWrite(unsigned char data){
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	1f 92       	push	r1
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data; //putting data to data register
     1e0:	8b eb       	ldi	r24, 0xBB	; 187
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	29 81       	ldd	r18, Y+1	; 0x01
     1e6:	fc 01       	movw	r30, r24
     1e8:	20 83       	st	Z, r18
    TWCR = (1 << TWINT) | (1 << TWEN); //setting interrupt pin and enabling i2c
     1ea:	8c eb       	ldi	r24, 0xBC	; 188
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	24 e8       	ldi	r18, 0x84	; 132
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
	while(!(TWCR & (1 << TWINT)));
     1f4:	00 00       	nop
     1f6:	8c eb       	ldi	r24, 0xBC	; 188
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	fc 01       	movw	r30, r24
     1fc:	80 81       	ld	r24, Z
     1fe:	88 23       	and	r24, r24
     200:	d4 f7       	brge	.-12     	; 0x1f6 <i2cWrite+0x22>
}
     202:	0f 90       	pop	r0
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <sendCmd>:
#include <string.h>
#include <stdio.h>
#include "LCD_lib.h"


void sendCmd(char data) {
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	1f 92       	push	r1
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
     216:	0e 94 cb 00 	call	0x196	; 0x196 <i2cStart>
    i2cWrite(SLA_W);
     21a:	8c e7       	ldi	r24, 0x7C	; 124
     21c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x00);
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(data);
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cStop();
     22c:	0e 94 de 00 	call	0x1bc	; 0x1bc <i2cStop>
}
     230:	0f 90       	pop	r0
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <sendData>:

void sendData(char data) {
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	1f 92       	push	r1
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
     244:	0e 94 cb 00 	call	0x196	; 0x196 <i2cStart>
    i2cWrite(SLA_W);
     248:	8c e7       	ldi	r24, 0x7C	; 124
     24a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x40);
     24e:	80 e4       	ldi	r24, 0x40	; 64
     250:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(data);
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cStop();
     25a:	0e 94 de 00 	call	0x1bc	; 0x1bc <i2cStop>
}
     25e:	0f 90       	pop	r0
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <initDisp>:

void initDisp() {
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << DDD3);
     26e:	8a e2       	ldi	r24, 0x2A	; 42
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	2a e2       	ldi	r18, 0x2A	; 42
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	f9 01       	movw	r30, r18
     278:	20 81       	ld	r18, Z
     27a:	28 60       	ori	r18, 0x08	; 8
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
	PORTD |= (1 << PORTD3);
     280:	8b e2       	ldi	r24, 0x2B	; 43
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	2b e2       	ldi	r18, 0x2B	; 43
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	f9 01       	movw	r30, r18
     28a:	20 81       	ld	r18, Z
     28c:	28 60       	ori	r18, 0x08	; 8
     28e:	fc 01       	movw	r30, r24
     290:	20 83       	st	Z, r18
    i2cStart();
     292:	0e 94 cb 00 	call	0x196	; 0x196 <i2cStart>
    i2cWrite(SLA_W);
     296:	8c e7       	ldi	r24, 0x7C	; 124
     298:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x00);//cmd
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x38);//8 bit bus, 2 line disp mode, normal mode
     2a2:	88 e3       	ldi	r24, 0x38	; 56
     2a4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x00);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x39);//8 bit bus, 2 line disp mode, extended mode
     2ae:	89 e3       	ldi	r24, 0x39	; 57
     2b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x14);//internal OSC freq
     2b4:	84 e1       	ldi	r24, 0x14	; 20
     2b6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x7F);//contrast setting (Highest)
     2ba:	8f e7       	ldi	r24, 0x7F	; 127
     2bc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x50);//set ICON address
     2c0:	80 e5       	ldi	r24, 0x50	; 80
     2c2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x6C);//follower control
     2c6:	8c e6       	ldi	r24, 0x6C	; 108
     2c8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x0C);//display ON
     2cc:	8c e0       	ldi	r24, 0x0C	; 12
     2ce:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cWrite(0x01);//clear disp;ay
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2cWrite>
    i2cStop();
     2d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <i2cStop>
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <write_first_line>:

void write_first_line(char *data, uint8_t menu) {
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	6a 97       	sbiw	r28, 0x1a	; 26
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	99 8f       	std	Y+25, r25	; 0x19
     2f8:	88 8f       	std	Y+24, r24	; 0x18
     2fa:	6a 8f       	std	Y+26, r22	; 0x1a
	uint16_t len = strlen(data);
     2fc:	88 8d       	ldd	r24, Y+24	; 0x18
     2fe:	99 8d       	ldd	r25, Y+25	; 0x19
     300:	0e 94 94 0a 	call	0x1528	; 0x1528 <strlen>
     304:	9a 83       	std	Y+2, r25	; 0x02
     306:	89 83       	std	Y+1, r24	; 0x01
	char str[16] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
     308:	80 e1       	ldi	r24, 0x10	; 16
     30a:	e8 e1       	ldi	r30, 0x18	; 24
     30c:	f1 e0       	ldi	r31, 0x01	; 1
     30e:	de 01       	movw	r26, r28
     310:	18 96       	adiw	r26, 0x08	; 8
     312:	01 90       	ld	r0, Z+
     314:	0d 92       	st	X+, r0
     316:	8a 95       	dec	r24
     318:	e1 f7       	brne	.-8      	; 0x312 <write_first_line+0x30>
	uint16_t i = 0;
     31a:	1c 82       	std	Y+4, r1	; 0x04
     31c:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t j = 0;
     31e:	1e 82       	std	Y+6, r1	; 0x06
     320:	1d 82       	std	Y+5, r1	; 0x05

	if(menu) {
     322:	8a 8d       	ldd	r24, Y+26	; 0x1a
     324:	88 23       	and	r24, r24
     326:	59 f0       	breq	.+22     	; 0x33e <write_first_line+0x5c>
		str[0] = '>';
     328:	8e e3       	ldi	r24, 0x3E	; 62
     32a:	88 87       	std	Y+8, r24	; 0x08
		i = 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	9c 83       	std	Y+4, r25	; 0x04
     332:	8b 83       	std	Y+3, r24	; 0x03
		len++;
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	9a 81       	ldd	r25, Y+2	; 0x02
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	9a 83       	std	Y+2, r25	; 0x02
     33c:	89 83       	std	Y+1, r24	; 0x01
	}

	for(i; i < len; i++) {
     33e:	1b c0       	rjmp	.+54     	; 0x376 <write_first_line+0x94>
		str[i] = data[j];
     340:	28 8d       	ldd	r18, Y+24	; 0x18
     342:	39 8d       	ldd	r19, Y+25	; 0x19
     344:	8d 81       	ldd	r24, Y+5	; 0x05
     346:	9e 81       	ldd	r25, Y+6	; 0x06
     348:	82 0f       	add	r24, r18
     34a:	93 1f       	adc	r25, r19
     34c:	fc 01       	movw	r30, r24
     34e:	40 81       	ld	r20, Z
     350:	9e 01       	movw	r18, r28
     352:	28 5f       	subi	r18, 0xF8	; 248
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	8b 81       	ldd	r24, Y+3	; 0x03
     358:	9c 81       	ldd	r25, Y+4	; 0x04
     35a:	82 0f       	add	r24, r18
     35c:	93 1f       	adc	r25, r19
     35e:	fc 01       	movw	r30, r24
     360:	40 83       	st	Z, r20
		j++;
     362:	8d 81       	ldd	r24, Y+5	; 0x05
     364:	9e 81       	ldd	r25, Y+6	; 0x06
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	9e 83       	std	Y+6, r25	; 0x06
     36a:	8d 83       	std	Y+5, r24	; 0x05
		str[0] = '>';
		i = 1;
		len++;
	}

	for(i; i < len; i++) {
     36c:	8b 81       	ldd	r24, Y+3	; 0x03
     36e:	9c 81       	ldd	r25, Y+4	; 0x04
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	9c 83       	std	Y+4, r25	; 0x04
     374:	8b 83       	std	Y+3, r24	; 0x03
     376:	2b 81       	ldd	r18, Y+3	; 0x03
     378:	3c 81       	ldd	r19, Y+4	; 0x04
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	f0 f2       	brcs	.-68     	; 0x340 <write_first_line+0x5e>
		str[i] = data[j];
		j++;
	}

	for (uint8_t i = 0x00; i <= 0x0F; i++){ //0x00-0x27 first line
     384:	1f 82       	std	Y+7, r1	; 0x07
     386:	16 c0       	rjmp	.+44     	; 0x3b4 <write_first_line+0xd2>
		sendCmd(0x00);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 05 01 	call	0x20a	; 0x20a <sendCmd>
		sendCmd(0x80 | i);
     38e:	8f 81       	ldd	r24, Y+7	; 0x07
     390:	80 68       	ori	r24, 0x80	; 128
     392:	0e 94 05 01 	call	0x20a	; 0x20a <sendCmd>
		sendData(str[i]);
     396:	8f 81       	ldd	r24, Y+7	; 0x07
     398:	88 2f       	mov	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	9e 01       	movw	r18, r28
     39e:	28 5f       	subi	r18, 0xF8	; 248
     3a0:	3f 4f       	sbci	r19, 0xFF	; 255
     3a2:	82 0f       	add	r24, r18
     3a4:	93 1f       	adc	r25, r19
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
     3aa:	0e 94 1c 01 	call	0x238	; 0x238 <sendData>
	for(i; i < len; i++) {
		str[i] = data[j];
		j++;
	}

	for (uint8_t i = 0x00; i <= 0x0F; i++){ //0x00-0x27 first line
     3ae:	8f 81       	ldd	r24, Y+7	; 0x07
     3b0:	8f 5f       	subi	r24, 0xFF	; 255
     3b2:	8f 83       	std	Y+7, r24	; 0x07
     3b4:	8f 81       	ldd	r24, Y+7	; 0x07
     3b6:	80 31       	cpi	r24, 0x10	; 16
     3b8:	38 f3       	brcs	.-50     	; 0x388 <write_first_line+0xa6>
		sendCmd(0x00);
		sendCmd(0x80 | i);
		sendData(str[i]);
	}
}
     3ba:	6a 96       	adiw	r28, 0x1a	; 26
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <write_second_line>:

void write_second_line(char *data, uint8_t menu) {
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	6a 97       	sbiw	r28, 0x1a	; 26
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	99 8f       	std	Y+25, r25	; 0x19
     3e2:	88 8f       	std	Y+24, r24	; 0x18
     3e4:	6a 8f       	std	Y+26, r22	; 0x1a
	uint16_t len = strlen(data);
     3e6:	88 8d       	ldd	r24, Y+24	; 0x18
     3e8:	99 8d       	ldd	r25, Y+25	; 0x19
     3ea:	0e 94 94 0a 	call	0x1528	; 0x1528 <strlen>
     3ee:	9a 83       	std	Y+2, r25	; 0x02
     3f0:	89 83       	std	Y+1, r24	; 0x01
	char str[16] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
     3f2:	80 e1       	ldi	r24, 0x10	; 16
     3f4:	e8 e1       	ldi	r30, 0x18	; 24
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	de 01       	movw	r26, r28
     3fa:	18 96       	adiw	r26, 0x08	; 8
     3fc:	01 90       	ld	r0, Z+
     3fe:	0d 92       	st	X+, r0
     400:	8a 95       	dec	r24
     402:	e1 f7       	brne	.-8      	; 0x3fc <write_second_line+0x30>
	uint16_t i = 0;
     404:	1c 82       	std	Y+4, r1	; 0x04
     406:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t j = 0;
     408:	1e 82       	std	Y+6, r1	; 0x06
     40a:	1d 82       	std	Y+5, r1	; 0x05

	if(menu) {
     40c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     40e:	88 23       	and	r24, r24
     410:	49 f0       	breq	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		i = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9c 83       	std	Y+4, r25	; 0x04
     418:	8b 83       	std	Y+3, r24	; 0x03
		len++;
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	9a 81       	ldd	r25, Y+2	; 0x02
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01
	}
	for(i; i < len; i++) {
     424:	1b c0       	rjmp	.+54     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		str[i] = data[j];
     426:	28 8d       	ldd	r18, Y+24	; 0x18
     428:	39 8d       	ldd	r19, Y+25	; 0x19
     42a:	8d 81       	ldd	r24, Y+5	; 0x05
     42c:	9e 81       	ldd	r25, Y+6	; 0x06
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	fc 01       	movw	r30, r24
     434:	40 81       	ld	r20, Z
     436:	9e 01       	movw	r18, r28
     438:	28 5f       	subi	r18, 0xF8	; 248
     43a:	3f 4f       	sbci	r19, 0xFF	; 255
     43c:	8b 81       	ldd	r24, Y+3	; 0x03
     43e:	9c 81       	ldd	r25, Y+4	; 0x04
     440:	82 0f       	add	r24, r18
     442:	93 1f       	adc	r25, r19
     444:	fc 01       	movw	r30, r24
     446:	40 83       	st	Z, r20
		j++;
     448:	8d 81       	ldd	r24, Y+5	; 0x05
     44a:	9e 81       	ldd	r25, Y+6	; 0x06
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	9e 83       	std	Y+6, r25	; 0x06
     450:	8d 83       	std	Y+5, r24	; 0x05

	if(menu) {
		i = 1;
		len++;
	}
	for(i; i < len; i++) {
     452:	8b 81       	ldd	r24, Y+3	; 0x03
     454:	9c 81       	ldd	r25, Y+4	; 0x04
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	9c 83       	std	Y+4, r25	; 0x04
     45a:	8b 83       	std	Y+3, r24	; 0x03
     45c:	2b 81       	ldd	r18, Y+3	; 0x03
     45e:	3c 81       	ldd	r19, Y+4	; 0x04
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	9a 81       	ldd	r25, Y+2	; 0x02
     464:	28 17       	cp	r18, r24
     466:	39 07       	cpc	r19, r25
     468:	f0 f2       	brcs	.-68     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		str[i] = data[j];
		j++;
	}


	for (uint8_t i = 0x40; i <= 0x4F; i++){ //0x40-0x67 second line
     46a:	80 e4       	ldi	r24, 0x40	; 64
     46c:	8f 83       	std	Y+7, r24	; 0x07
     46e:	18 c0       	rjmp	.+48     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		sendCmd(0x00);
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	0e 94 05 01 	call	0x20a	; 0x20a <sendCmd>
		sendCmd(0x80 | i);
     476:	8f 81       	ldd	r24, Y+7	; 0x07
     478:	80 68       	ori	r24, 0x80	; 128
     47a:	0e 94 05 01 	call	0x20a	; 0x20a <sendCmd>
		sendData(str[i-0x40]);
     47e:	8f 81       	ldd	r24, Y+7	; 0x07
     480:	88 2f       	mov	r24, r24
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	80 54       	subi	r24, 0x40	; 64
     486:	91 09       	sbc	r25, r1
     488:	9e 01       	movw	r18, r28
     48a:	28 5f       	subi	r18, 0xF8	; 248
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	82 0f       	add	r24, r18
     490:	93 1f       	adc	r25, r19
     492:	fc 01       	movw	r30, r24
     494:	80 81       	ld	r24, Z
     496:	0e 94 1c 01 	call	0x238	; 0x238 <sendData>
		str[i] = data[j];
		j++;
	}


	for (uint8_t i = 0x40; i <= 0x4F; i++){ //0x40-0x67 second line
     49a:	8f 81       	ldd	r24, Y+7	; 0x07
     49c:	8f 5f       	subi	r24, 0xFF	; 255
     49e:	8f 83       	std	Y+7, r24	; 0x07
     4a0:	8f 81       	ldd	r24, Y+7	; 0x07
     4a2:	80 35       	cpi	r24, 0x50	; 80
     4a4:	28 f3       	brcs	.-54     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		sendCmd(0x00);
		sendCmd(0x80 | i);
		sendData(str[i-0x40]);
	}
}
     4a6:	6a 96       	adiw	r28, 0x1a	; 26
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <write_volume_control>:

void write_volume_control(char name[], uint8_t value) {
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	ad 97       	sbiw	r28, 0x2d	; 45
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	9c a7       	std	Y+44, r25	; 0x2c
     4ce:	8b a7       	std	Y+43, r24	; 0x2b
     4d0:	6d a7       	std	Y+45, r22	; 0x2d
	char line_1[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
     4d2:	81 e1       	ldi	r24, 0x11	; 17
     4d4:	ec e2       	ldi	r30, 0x2C	; 44
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	de 01       	movw	r26, r28
     4da:	16 96       	adiw	r26, 0x06	; 6
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	8a 95       	dec	r24
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <write_volume_control+0x24>
	char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
     4e4:	81 e1       	ldi	r24, 0x11	; 17
     4e6:	ec e2       	ldi	r30, 0x2C	; 44
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	de 01       	movw	r26, r28
     4ec:	57 96       	adiw	r26, 0x17	; 23
     4ee:	01 90       	ld	r0, Z+
     4f0:	0d 92       	st	X+, r0
     4f2:	8a 95       	dec	r24
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <write_volume_control+0x36>
	uint8_t size = strlen(name);
     4f6:	8b a5       	ldd	r24, Y+43	; 0x2b
     4f8:	9c a5       	ldd	r25, Y+44	; 0x2c
     4fa:	0e 94 94 0a 	call	0x1528	; 0x1528 <strlen>
     4fe:	8c 83       	std	Y+4, r24	; 0x04

	for (uint8_t i = 0; i < size; i++){
     500:	19 82       	std	Y+1, r1	; 0x01
     502:	16 c0       	rjmp	.+44     	; 0x530 <write_volume_control+0x78>
		line_1[i] = name[i];
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	88 2f       	mov	r24, r24
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	29 81       	ldd	r18, Y+1	; 0x01
     50c:	22 2f       	mov	r18, r18
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	4b a5       	ldd	r20, Y+43	; 0x2b
     512:	5c a5       	ldd	r21, Y+44	; 0x2c
     514:	24 0f       	add	r18, r20
     516:	35 1f       	adc	r19, r21
     518:	f9 01       	movw	r30, r18
     51a:	40 81       	ld	r20, Z
     51c:	9e 01       	movw	r18, r28
     51e:	2a 5f       	subi	r18, 0xFA	; 250
     520:	3f 4f       	sbci	r19, 0xFF	; 255
     522:	82 0f       	add	r24, r18
     524:	93 1f       	adc	r25, r19
     526:	fc 01       	movw	r30, r24
     528:	40 83       	st	Z, r20
void write_volume_control(char name[], uint8_t value) {
	char line_1[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
	char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
	uint8_t size = strlen(name);

	for (uint8_t i = 0; i < size; i++){
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	8f 5f       	subi	r24, 0xFF	; 255
     52e:	89 83       	std	Y+1, r24	; 0x01
     530:	99 81       	ldd	r25, Y+1	; 0x01
     532:	8c 81       	ldd	r24, Y+4	; 0x04
     534:	98 17       	cp	r25, r24
     536:	30 f3       	brcs	.-52     	; 0x504 <write_volume_control+0x4c>
		line_1[i] = name[i];
	}

	char str[3];
	sprintf(str, "%3d", value);
     538:	8d a5       	ldd	r24, Y+45	; 0x2d
     53a:	88 2f       	mov	r24, r24
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	29 2f       	mov	r18, r25
     540:	2f 93       	push	r18
     542:	8f 93       	push	r24
     544:	88 e2       	ldi	r24, 0x28	; 40
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	89 2f       	mov	r24, r25
     54a:	8f 93       	push	r24
     54c:	88 e2       	ldi	r24, 0x28	; 40
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	8f 93       	push	r24
     552:	ce 01       	movw	r24, r28
     554:	88 96       	adiw	r24, 0x28	; 40
     556:	29 2f       	mov	r18, r25
     558:	2f 93       	push	r18
     55a:	8f 93       	push	r24
     55c:	0e 94 9d 0a 	call	0x153a	; 0x153a <sprintf>
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0

	for (uint8_t i = 13; i < 16; i++) {
     56c:	8d e0       	ldi	r24, 0x0D	; 13
     56e:	8a 83       	std	Y+2, r24	; 0x02
     570:	19 c0       	rjmp	.+50     	; 0x5a4 <write_volume_control+0xec>
		line_1[i] = str[i - 13];
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	88 2f       	mov	r24, r24
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	2a 81       	ldd	r18, Y+2	; 0x02
     57a:	22 2f       	mov	r18, r18
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	2d 50       	subi	r18, 0x0D	; 13
     580:	31 09       	sbc	r19, r1
     582:	ae 01       	movw	r20, r28
     584:	48 5d       	subi	r20, 0xD8	; 216
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	24 0f       	add	r18, r20
     58a:	35 1f       	adc	r19, r21
     58c:	f9 01       	movw	r30, r18
     58e:	40 81       	ld	r20, Z
     590:	9e 01       	movw	r18, r28
     592:	2a 5f       	subi	r18, 0xFA	; 250
     594:	3f 4f       	sbci	r19, 0xFF	; 255
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
     59a:	fc 01       	movw	r30, r24
     59c:	40 83       	st	Z, r20
	}

	char str[3];
	sprintf(str, "%3d", value);

	for (uint8_t i = 13; i < 16; i++) {
     59e:	8a 81       	ldd	r24, Y+2	; 0x02
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	8a 83       	std	Y+2, r24	; 0x02
     5a4:	8a 81       	ldd	r24, Y+2	; 0x02
     5a6:	80 31       	cpi	r24, 0x10	; 16
     5a8:	20 f3       	brcs	.-56     	; 0x572 <write_volume_control+0xba>
		line_1[i] = str[i - 13];
	}

	uint8_t vol_size = volume_size(value);
     5aa:	8d a5       	ldd	r24, Y+45	; 0x2d
     5ac:	0e 94 00 03 	call	0x600	; 0x600 <volume_size>
     5b0:	8d 83       	std	Y+5, r24	; 0x05

	for(uint8_t i = 0; i < vol_size; i++) {
     5b2:	1b 82       	std	Y+3, r1	; 0x03
     5b4:	0e c0       	rjmp	.+28     	; 0x5d2 <write_volume_control+0x11a>
		line_2[i] = '#';
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	88 2f       	mov	r24, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	9e 01       	movw	r18, r28
     5be:	29 5e       	subi	r18, 0xE9	; 233
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
     5c2:	82 0f       	add	r24, r18
     5c4:	93 1f       	adc	r25, r19
     5c6:	23 e2       	ldi	r18, 0x23	; 35
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
		line_1[i] = str[i - 13];
	}

	uint8_t vol_size = volume_size(value);

	for(uint8_t i = 0; i < vol_size; i++) {
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	8b 83       	std	Y+3, r24	; 0x03
     5d2:	9b 81       	ldd	r25, Y+3	; 0x03
     5d4:	8d 81       	ldd	r24, Y+5	; 0x05
     5d6:	98 17       	cp	r25, r24
     5d8:	70 f3       	brcs	.-36     	; 0x5b6 <write_volume_control+0xfe>
		line_2[i] = '#';
	}

	write_first_line(line_1, 0);
     5da:	ce 01       	movw	r24, r28
     5dc:	06 96       	adiw	r24, 0x06	; 6
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write_first_line>
	write_second_line(line_2, 0);
     5e4:	ce 01       	movw	r24, r28
     5e6:	47 96       	adiw	r24, 0x17	; 23
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_second_line>
}
     5ee:	ad 96       	adiw	r28, 0x2d	; 45
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <volume_size>:

uint8_t volume_size(uint8_t value) {
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	1f 92       	push	r1
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	89 83       	std	Y+1, r24	; 0x01
	switch(value) {
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	88 2f       	mov	r24, r24
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	80 31       	cpi	r24, 0x10	; 16
     614:	91 05       	cpc	r25, r1
     616:	09 f4       	brne	.+2      	; 0x61a <volume_size+0x1a>
     618:	4a c0       	rjmp	.+148    	; 0x6ae <volume_size+0xae>
     61a:	81 31       	cpi	r24, 0x11	; 17
     61c:	91 05       	cpc	r25, r1
     61e:	cc f4       	brge	.+50     	; 0x652 <volume_size+0x52>
     620:	84 30       	cpi	r24, 0x04	; 4
     622:	91 05       	cpc	r25, r1
     624:	09 f4       	brne	.+2      	; 0x628 <volume_size+0x28>
     626:	3b c0       	rjmp	.+118    	; 0x69e <volume_size+0x9e>
     628:	85 30       	cpi	r24, 0x05	; 5
     62a:	91 05       	cpc	r25, r1
     62c:	4c f4       	brge	.+18     	; 0x640 <volume_size+0x40>
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	91 05       	cpc	r25, r1
     632:	89 f1       	breq	.+98     	; 0x696 <volume_size+0x96>
     634:	82 30       	cpi	r24, 0x02	; 2
     636:	91 05       	cpc	r25, r1
     638:	81 f1       	breq	.+96     	; 0x69a <volume_size+0x9a>
     63a:	89 2b       	or	r24, r25
     63c:	51 f1       	breq	.+84     	; 0x692 <volume_size+0x92>
     63e:	49 c0       	rjmp	.+146    	; 0x6d2 <volume_size+0xd2>
     640:	88 30       	cpi	r24, 0x08	; 8
     642:	91 05       	cpc	r25, r1
     644:	81 f1       	breq	.+96     	; 0x6a6 <volume_size+0xa6>
     646:	8c 30       	cpi	r24, 0x0C	; 12
     648:	91 05       	cpc	r25, r1
     64a:	79 f1       	breq	.+94     	; 0x6aa <volume_size+0xaa>
     64c:	06 97       	sbiw	r24, 0x06	; 6
     64e:	49 f1       	breq	.+82     	; 0x6a2 <volume_size+0xa2>
     650:	40 c0       	rjmp	.+128    	; 0x6d2 <volume_size+0xd2>
     652:	80 34       	cpi	r24, 0x40	; 64
     654:	91 05       	cpc	r25, r1
     656:	99 f1       	breq	.+102    	; 0x6be <volume_size+0xbe>
     658:	81 34       	cpi	r24, 0x41	; 65
     65a:	91 05       	cpc	r25, r1
     65c:	4c f4       	brge	.+18     	; 0x670 <volume_size+0x70>
     65e:	80 32       	cpi	r24, 0x20	; 32
     660:	91 05       	cpc	r25, r1
     662:	49 f1       	breq	.+82     	; 0x6b6 <volume_size+0xb6>
     664:	80 33       	cpi	r24, 0x30	; 48
     666:	91 05       	cpc	r25, r1
     668:	41 f1       	breq	.+80     	; 0x6ba <volume_size+0xba>
     66a:	48 97       	sbiw	r24, 0x18	; 24
     66c:	11 f1       	breq	.+68     	; 0x6b2 <volume_size+0xb2>
     66e:	31 c0       	rjmp	.+98     	; 0x6d2 <volume_size+0xd2>
     670:	80 38       	cpi	r24, 0x80	; 128
     672:	91 05       	cpc	r25, r1
     674:	41 f1       	breq	.+80     	; 0x6c6 <volume_size+0xc6>
     676:	81 38       	cpi	r24, 0x81	; 129
     678:	91 05       	cpc	r25, r1
     67a:	24 f4       	brge	.+8      	; 0x684 <volume_size+0x84>
     67c:	80 36       	cpi	r24, 0x60	; 96
     67e:	91 05       	cpc	r25, r1
     680:	01 f1       	breq	.+64     	; 0x6c2 <volume_size+0xc2>
     682:	27 c0       	rjmp	.+78     	; 0x6d2 <volume_size+0xd2>
     684:	80 3c       	cpi	r24, 0xC0	; 192
     686:	91 05       	cpc	r25, r1
     688:	01 f1       	breq	.+64     	; 0x6ca <volume_size+0xca>
     68a:	8f 3f       	cpi	r24, 0xFF	; 255
     68c:	91 05       	cpc	r25, r1
     68e:	f9 f0       	breq	.+62     	; 0x6ce <volume_size+0xce>
     690:	20 c0       	rjmp	.+64     	; 0x6d2 <volume_size+0xd2>
		case 0:
			return 1;
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	1e c0       	rjmp	.+60     	; 0x6d2 <volume_size+0xd2>
			break;
		case 1:
			return 2;
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	1c c0       	rjmp	.+56     	; 0x6d2 <volume_size+0xd2>
			break;
		case 2:
			return 3;
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	1a c0       	rjmp	.+52     	; 0x6d2 <volume_size+0xd2>
			break;
		case 4:
			return 4;
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	18 c0       	rjmp	.+48     	; 0x6d2 <volume_size+0xd2>
			break;
		case 6:
			return 5;
     6a2:	85 e0       	ldi	r24, 0x05	; 5
     6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <volume_size+0xd2>
			break;
		case 8:
			return 6;
     6a6:	86 e0       	ldi	r24, 0x06	; 6
     6a8:	14 c0       	rjmp	.+40     	; 0x6d2 <volume_size+0xd2>
			break;
		case 12:
			return 7;
     6aa:	87 e0       	ldi	r24, 0x07	; 7
     6ac:	12 c0       	rjmp	.+36     	; 0x6d2 <volume_size+0xd2>
			break;
		case 16:
			return 8;
     6ae:	88 e0       	ldi	r24, 0x08	; 8
     6b0:	10 c0       	rjmp	.+32     	; 0x6d2 <volume_size+0xd2>
			break;
		case 24:
			return 9;
     6b2:	89 e0       	ldi	r24, 0x09	; 9
     6b4:	0e c0       	rjmp	.+28     	; 0x6d2 <volume_size+0xd2>
			break;
		case 32:
			return 10;
     6b6:	8a e0       	ldi	r24, 0x0A	; 10
     6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <volume_size+0xd2>
			break;
		case 48:
			return 11;
     6ba:	8b e0       	ldi	r24, 0x0B	; 11
     6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <volume_size+0xd2>
			break;
		case 64:
			return 12;
     6be:	8c e0       	ldi	r24, 0x0C	; 12
     6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <volume_size+0xd2>
			break;
		case 96:
			return 13;
     6c2:	8d e0       	ldi	r24, 0x0D	; 13
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <volume_size+0xd2>
			break;
		case 128:
			return 14;
     6c6:	8e e0       	ldi	r24, 0x0E	; 14
     6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <volume_size+0xd2>
			break;
		case 192:
			return 15;
     6ca:	8f e0       	ldi	r24, 0x0F	; 15
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <volume_size+0xd2>
			break;
		case 255:
			return 16;
     6ce:	80 e1       	ldi	r24, 0x10	; 16
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <volume_size+0xd2>
			break;
	}
}
     6d2:	0f 90       	pop	r0
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <write_menu_items>:

void write_menu_items(char item_1[], char item_2[]) {
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	aa 97       	sbiw	r28, 0x2a	; 42
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	98 a7       	std	Y+40, r25	; 0x28
     6f0:	8f a3       	std	Y+39, r24	; 0x27
     6f2:	7a a7       	std	Y+42, r23	; 0x2a
     6f4:	69 a7       	std	Y+41, r22	; 0x29
	char line_1[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
     6f6:	81 e1       	ldi	r24, 0x11	; 17
     6f8:	ec e2       	ldi	r30, 0x2C	; 44
     6fa:	f1 e0       	ldi	r31, 0x01	; 1
     6fc:	de 01       	movw	r26, r28
     6fe:	15 96       	adiw	r26, 0x05	; 5
     700:	01 90       	ld	r0, Z+
     702:	0d 92       	st	X+, r0
     704:	8a 95       	dec	r24
     706:	e1 f7       	brne	.-8      	; 0x700 <write_menu_items+0x26>
	char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
     708:	81 e1       	ldi	r24, 0x11	; 17
     70a:	ec e2       	ldi	r30, 0x2C	; 44
     70c:	f1 e0       	ldi	r31, 0x01	; 1
     70e:	de 01       	movw	r26, r28
     710:	56 96       	adiw	r26, 0x16	; 22
     712:	01 90       	ld	r0, Z+
     714:	0d 92       	st	X+, r0
     716:	8a 95       	dec	r24
     718:	e1 f7       	brne	.-8      	; 0x712 <write_menu_items+0x38>
	uint8_t size_1 = strlen(item_1);
     71a:	8f a1       	ldd	r24, Y+39	; 0x27
     71c:	98 a5       	ldd	r25, Y+40	; 0x28
     71e:	0e 94 94 0a 	call	0x1528	; 0x1528 <strlen>
     722:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t size_2 = strlen(item_2);
     724:	89 a5       	ldd	r24, Y+41	; 0x29
     726:	9a a5       	ldd	r25, Y+42	; 0x2a
     728:	0e 94 94 0a 	call	0x1528	; 0x1528 <strlen>
     72c:	8c 83       	std	Y+4, r24	; 0x04

	for (uint8_t i = 0; i < size_1; i++){
     72e:	19 82       	std	Y+1, r1	; 0x01
     730:	16 c0       	rjmp	.+44     	; 0x75e <write_menu_items+0x84>
		line_1[i] = item_1[i];
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	88 2f       	mov	r24, r24
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	29 81       	ldd	r18, Y+1	; 0x01
     73a:	22 2f       	mov	r18, r18
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	4f a1       	ldd	r20, Y+39	; 0x27
     740:	58 a5       	ldd	r21, Y+40	; 0x28
     742:	24 0f       	add	r18, r20
     744:	35 1f       	adc	r19, r21
     746:	f9 01       	movw	r30, r18
     748:	40 81       	ld	r20, Z
     74a:	9e 01       	movw	r18, r28
     74c:	2b 5f       	subi	r18, 0xFB	; 251
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	82 0f       	add	r24, r18
     752:	93 1f       	adc	r25, r19
     754:	fc 01       	movw	r30, r24
     756:	40 83       	st	Z, r20
	char line_1[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
	char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
	uint8_t size_1 = strlen(item_1);
	uint8_t size_2 = strlen(item_2);

	for (uint8_t i = 0; i < size_1; i++){
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	89 83       	std	Y+1, r24	; 0x01
     75e:	99 81       	ldd	r25, Y+1	; 0x01
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	98 17       	cp	r25, r24
     764:	30 f3       	brcs	.-52     	; 0x732 <write_menu_items+0x58>
		line_1[i] = item_1[i];
	}

	for (uint8_t i = 0; i < size_2; i++){
     766:	1a 82       	std	Y+2, r1	; 0x02
     768:	16 c0       	rjmp	.+44     	; 0x796 <write_menu_items+0xbc>
		line_2[i] = item_2[i];
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	88 2f       	mov	r24, r24
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	2a 81       	ldd	r18, Y+2	; 0x02
     772:	22 2f       	mov	r18, r18
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	49 a5       	ldd	r20, Y+41	; 0x29
     778:	5a a5       	ldd	r21, Y+42	; 0x2a
     77a:	24 0f       	add	r18, r20
     77c:	35 1f       	adc	r19, r21
     77e:	f9 01       	movw	r30, r18
     780:	40 81       	ld	r20, Z
     782:	9e 01       	movw	r18, r28
     784:	2a 5e       	subi	r18, 0xEA	; 234
     786:	3f 4f       	sbci	r19, 0xFF	; 255
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	fc 01       	movw	r30, r24
     78e:	40 83       	st	Z, r20

	for (uint8_t i = 0; i < size_1; i++){
		line_1[i] = item_1[i];
	}

	for (uint8_t i = 0; i < size_2; i++){
     790:	8a 81       	ldd	r24, Y+2	; 0x02
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	8a 83       	std	Y+2, r24	; 0x02
     796:	9a 81       	ldd	r25, Y+2	; 0x02
     798:	8c 81       	ldd	r24, Y+4	; 0x04
     79a:	98 17       	cp	r25, r24
     79c:	30 f3       	brcs	.-52     	; 0x76a <write_menu_items+0x90>
		line_2[i] = item_2[i];
	}

	write_first_line(line_1, 1);
     79e:	ce 01       	movw	r24, r28
     7a0:	05 96       	adiw	r24, 0x05	; 5
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write_first_line>
	write_second_line(line_2, 1);
     7a8:	ce 01       	movw	r24, r28
     7aa:	46 96       	adiw	r24, 0x16	; 22
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_second_line>
     7b2:	aa 96       	adiw	r28, 0x2a	; 42
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <SPI_Init_Master>:
//MISO == "Master In Slave Out" || SPI
//SCK == SPI Clock Line			|| SCK
//SS == "Slave Select			|| CS == "Chip Select"
 
 
void SPI_Init_Master() {
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
	/* Set the MOSI & SCK as Output lines */
	DDRB |= (1 << PINB3) | (1 << PINB5);
     7cc:	84 e2       	ldi	r24, 0x24	; 36
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	24 e2       	ldi	r18, 0x24	; 36
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	f9 01       	movw	r30, r18
     7d6:	20 81       	ld	r18, Z
     7d8:	28 62       	ori	r18, 0x28	; 40
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18
	/* Set the SCK pin to low */
	PORTB &= ~(1 << PINB5);
     7de:	85 e2       	ldi	r24, 0x25	; 37
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	25 e2       	ldi	r18, 0x25	; 37
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	f9 01       	movw	r30, r18
     7e8:	20 81       	ld	r18, Z
     7ea:	2f 7d       	andi	r18, 0xDF	; 223
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
	
	/* Enable SPI */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0); 
     7f0:	8c e4       	ldi	r24, 0x4C	; 76
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	2c e4       	ldi	r18, 0x4C	; 76
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	f9 01       	movw	r30, r18
     7fa:	20 81       	ld	r18, Z
     7fc:	21 65       	ori	r18, 0x51	; 81
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <SPI_Send_Data>:

void SPI_Send_Data(uint8_t data) {
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	1f 92       	push	r1
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	89 83       	std	Y+1, r24	; 0x01
	/* Place the data in the transmitter buffer */
	SPDR = data;
     814:	8e e4       	ldi	r24, 0x4E	; 78
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	29 81       	ldd	r18, Y+1	; 0x01
     81a:	fc 01       	movw	r30, r24
     81c:	20 83       	st	Z, r18

	/* Wait for the transmitter to complete */
	while(!(SPSR & (1 << SPIF)));
     81e:	00 00       	nop
     820:	8d e4       	ldi	r24, 0x4D	; 77
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	fc 01       	movw	r30, r24
     826:	80 81       	ld	r24, Z
     828:	88 23       	and	r24, r24
     82a:	d4 f7       	brge	.-12     	; 0x820 <SPI_Send_Data+0x18>
}
     82c:	0f 90       	pop	r0
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <SPI_Send_Large_Data>:

void SPI_Send_Large_Data(uint8_t *data) {
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	00 d0       	rcall	.+0      	; 0x83a <SPI_Send_Large_Data+0x6>
     83a:	00 d0       	rcall	.+0      	; 0x83c <SPI_Send_Large_Data+0x8>
     83c:	00 d0       	rcall	.+0      	; 0x83e <SPI_Send_Large_Data+0xa>
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	9e 83       	std	Y+6, r25	; 0x06
     844:	8d 83       	std	Y+5, r24	; 0x05
	/* Find the length of the data array */
	uint16_t len = 2;
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	9c 83       	std	Y+4, r25	; 0x04
     84c:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 0; i < len; i++) {
     84e:	1a 82       	std	Y+2, r1	; 0x02
     850:	19 82       	std	Y+1, r1	; 0x01
     852:	0f c0       	rjmp	.+30     	; 0x872 <SPI_Send_Large_Data+0x3e>
		SPI_Send_Data(data[i]);
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	2d 81       	ldd	r18, Y+5	; 0x05
     85a:	3e 81       	ldd	r19, Y+6	; 0x06
     85c:	82 0f       	add	r24, r18
     85e:	93 1f       	adc	r25, r19
     860:	fc 01       	movw	r30, r24
     862:	80 81       	ld	r24, Z
     864:	0e 94 04 04 	call	0x808	; 0x808 <SPI_Send_Data>
}

void SPI_Send_Large_Data(uint8_t *data) {
	/* Find the length of the data array */
	uint16_t len = 2;
	for(int i = 0; i < len; i++) {
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	9a 83       	std	Y+2, r25	; 0x02
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	29 81       	ldd	r18, Y+1	; 0x01
     874:	3a 81       	ldd	r19, Y+2	; 0x02
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	9c 81       	ldd	r25, Y+4	; 0x04
     87a:	28 17       	cp	r18, r24
     87c:	39 07       	cpc	r19, r25
     87e:	50 f3       	brcs	.-44     	; 0x854 <SPI_Send_Large_Data+0x20>
		SPI_Send_Data(data[i]);
	}
     880:	26 96       	adiw	r28, 0x06	; 6
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <init_usart>:
/* Function to initialize the Usart behavior						*/
/* baud_rate is a number as ex. 9600								*/
/* parity_bits can either be NONE, EVEN or ODD						*/
/* stop_bits can either be ONE or TWO								*/
/* parity_bits and stop_bits have been defined in the header file	*/
void init_usart(uint16_t baud_rate, uint8_t parity_bits, uint8_t stop_bits) {
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	2c 97       	sbiw	r28, 0x0c	; 12
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	6b 83       	std	Y+3, r22	; 0x03
     8b0:	4c 83       	std	Y+4, r20	; 0x04
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0); //Enable USART Transmitter and receiver
     8b2:	81 ec       	ldi	r24, 0xC1	; 193
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	21 ec       	ldi	r18, 0xC1	; 193
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	28 61       	ori	r18, 0x18	; 24
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
	UBRR0H = (BAUD(baud_rate) >> 8);
     8c4:	05 ec       	ldi	r16, 0xC5	; 197
     8c6:	10 e0       	ldi	r17, 0x00	; 0
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	9a 81       	ldd	r25, Y+2	; 0x02
     8cc:	96 95       	lsr	r25
     8ce:	87 95       	ror	r24
     8d0:	cc 01       	movw	r24, r24
     8d2:	a0 e0       	ldi	r26, 0x00	; 0
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	80 5c       	subi	r24, 0xC0	; 192
     8d8:	9d 4b       	sbci	r25, 0xBD	; 189
     8da:	a0 4f       	sbci	r26, 0xF0	; 240
     8dc:	bf 4f       	sbci	r27, 0xFF	; 255
     8de:	29 81       	ldd	r18, Y+1	; 0x01
     8e0:	3a 81       	ldd	r19, Y+2	; 0x02
     8e2:	99 01       	movw	r18, r18
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	bc 01       	movw	r22, r24
     8ea:	cd 01       	movw	r24, r26
     8ec:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__udivmodsi4>
     8f0:	da 01       	movw	r26, r20
     8f2:	c9 01       	movw	r24, r18
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	a1 09       	sbc	r26, r1
     8f8:	b1 09       	sbc	r27, r1
     8fa:	89 2f       	mov	r24, r25
     8fc:	9a 2f       	mov	r25, r26
     8fe:	ab 2f       	mov	r26, r27
     900:	bb 27       	eor	r27, r27
     902:	f8 01       	movw	r30, r16
     904:	80 83       	st	Z, r24
	UBRR0L = BAUD(baud_rate); //Set the baud rate to 9600
     906:	04 ec       	ldi	r16, 0xC4	; 196
     908:	10 e0       	ldi	r17, 0x00	; 0
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	9a 81       	ldd	r25, Y+2	; 0x02
     90e:	96 95       	lsr	r25
     910:	87 95       	ror	r24
     912:	cc 01       	movw	r24, r24
     914:	a0 e0       	ldi	r26, 0x00	; 0
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	80 5c       	subi	r24, 0xC0	; 192
     91a:	9d 4b       	sbci	r25, 0xBD	; 189
     91c:	a0 4f       	sbci	r26, 0xF0	; 240
     91e:	bf 4f       	sbci	r27, 0xFF	; 255
     920:	29 81       	ldd	r18, Y+1	; 0x01
     922:	3a 81       	ldd	r19, Y+2	; 0x02
     924:	99 01       	movw	r18, r18
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	bc 01       	movw	r22, r24
     92c:	cd 01       	movw	r24, r26
     92e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__udivmodsi4>
     932:	da 01       	movw	r26, r20
     934:	c9 01       	movw	r24, r18
     936:	81 50       	subi	r24, 0x01	; 1
     938:	f8 01       	movw	r30, r16
     93a:	80 83       	st	Z, r24

	/* Setting the parity bits for USART transmission */
	switch (parity_bits) {
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	91 05       	cpc	r25, r1
     946:	79 f0       	breq	.+30     	; 0x966 <__stack+0x67>
     948:	82 30       	cpi	r24, 0x02	; 2
     94a:	91 05       	cpc	r25, r1
     94c:	f9 f0       	breq	.+62     	; 0x98c <__stack+0x8d>
     94e:	89 2b       	or	r24, r25
     950:	39 f5       	brne	.+78     	; 0x9a0 <__stack+0xa1>
		case NONE:
			UCSR0C &= ~(1 << UPM00) & ~(1 << UPM01);
     952:	82 ec       	ldi	r24, 0xC2	; 194
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	22 ec       	ldi	r18, 0xC2	; 194
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	2f 7c       	andi	r18, 0xCF	; 207
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
			break;
     964:	1d c0       	rjmp	.+58     	; 0x9a0 <__stack+0xa1>
		case EVEN:
			UCSR0C |= (1 << UPM01);
     966:	82 ec       	ldi	r24, 0xC2	; 194
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	22 ec       	ldi	r18, 0xC2	; 194
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	f9 01       	movw	r30, r18
     970:	20 81       	ld	r18, Z
     972:	20 62       	ori	r18, 0x20	; 32
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
			UCSR0C &= ~(1 << UPM00);
     978:	82 ec       	ldi	r24, 0xC2	; 194
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	22 ec       	ldi	r18, 0xC2	; 194
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	f9 01       	movw	r30, r18
     982:	20 81       	ld	r18, Z
     984:	2f 7e       	andi	r18, 0xEF	; 239
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
			break;
     98a:	0a c0       	rjmp	.+20     	; 0x9a0 <__stack+0xa1>
		case ODD:
			UCSR0C |= (1 << UPM00) | (1 << UPM01);
     98c:	82 ec       	ldi	r24, 0xC2	; 194
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	22 ec       	ldi	r18, 0xC2	; 194
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	f9 01       	movw	r30, r18
     996:	20 81       	ld	r18, Z
     998:	20 63       	ori	r18, 0x30	; 48
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
			break;
     99e:	00 00       	nop
	}

	/* Setting the stop bits for USART transmission */
	switch (stop_bits) {
     9a0:	8c 81       	ldd	r24, Y+4	; 0x04
     9a2:	88 2f       	mov	r24, r24
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	91 05       	cpc	r25, r1
     9aa:	19 f0       	breq	.+6      	; 0x9b2 <__stack+0xb3>
     9ac:	02 97       	sbiw	r24, 0x02	; 2
     9ae:	59 f0       	breq	.+22     	; 0x9c6 <__stack+0xc7>
     9b0:	14 c0       	rjmp	.+40     	; 0x9da <__stack+0xdb>
		case ONE:
			UCSR0C &= ~(1 << USBS0);
     9b2:	82 ec       	ldi	r24, 0xC2	; 194
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	22 ec       	ldi	r18, 0xC2	; 194
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	f9 01       	movw	r30, r18
     9bc:	20 81       	ld	r18, Z
     9be:	27 7f       	andi	r18, 0xF7	; 247
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 83       	st	Z, r18
			break;
     9c4:	0a c0       	rjmp	.+20     	; 0x9da <__stack+0xdb>
		case TWO:
			UCSR0C |= (1 << USBS0);
     9c6:	82 ec       	ldi	r24, 0xC2	; 194
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	22 ec       	ldi	r18, 0xC2	; 194
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	f9 01       	movw	r30, r18
     9d0:	20 81       	ld	r18, Z
     9d2:	28 60       	ori	r18, 0x08	; 8
     9d4:	fc 01       	movw	r30, r24
     9d6:	20 83       	st	Z, r18
			break;
     9d8:	00 00       	nop
	}
	
	/* Transmit size is 8-bits */
	UCSR0C |= (3 << UCSZ00);
     9da:	82 ec       	ldi	r24, 0xC2	; 194
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	22 ec       	ldi	r18, 0xC2	; 194
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	f9 01       	movw	r30, r18
     9e4:	20 81       	ld	r18, Z
     9e6:	26 60       	ori	r18, 0x06	; 6
     9e8:	fc 01       	movw	r30, r24
     9ea:	20 83       	st	Z, r18
}
     9ec:	2c 96       	adiw	r28, 0x0c	; 12
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	08 95       	ret

00000a02 <__vector_3>:
uint8_t screen_saver_pos_idx = 0;
char *vol_control[5];
char *main_menu[5];
char *equalizer_menu[5];

ISR(PCINT0_vect) {
     a02:	1f 92       	push	r1
     a04:	0f 92       	push	r0
     a06:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a0a:	0f 92       	push	r0
     a0c:	11 24       	eor	r1, r1
     a0e:	2f 93       	push	r18
     a10:	3f 93       	push	r19
     a12:	4f 93       	push	r20
     a14:	5f 93       	push	r21
     a16:	6f 93       	push	r22
     a18:	7f 93       	push	r23
     a1a:	8f 93       	push	r24
     a1c:	9f 93       	push	r25
     a1e:	af 93       	push	r26
     a20:	bf 93       	push	r27
     a22:	ef 93       	push	r30
     a24:	ff 93       	push	r31
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
	if((PINB & (1 << PINB7)) == 0) {
     a2e:	83 e2       	ldi	r24, 0x23	; 35
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	fc 01       	movw	r30, r24
     a34:	80 81       	ld	r24, Z
     a36:	88 23       	and	r24, r24
     a38:	34 f0       	brlt	.+12     	; 0xa46 <__vector_3+0x44>
		activity();
     a3a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <activity>
		update_display_values(0, 0);
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 43 07 	call	0xe86	; 0xe86 <update_display_values>
	}
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	bf 91       	pop	r27
     a50:	af 91       	pop	r26
     a52:	9f 91       	pop	r25
     a54:	8f 91       	pop	r24
     a56:	7f 91       	pop	r23
     a58:	6f 91       	pop	r22
     a5a:	5f 91       	pop	r21
     a5c:	4f 91       	pop	r20
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a68:	0f 90       	pop	r0
     a6a:	1f 90       	pop	r1
     a6c:	18 95       	reti

00000a6e <__vector_4>:


ISR(PCINT1_vect) {
     a6e:	1f 92       	push	r1
     a70:	0f 92       	push	r0
     a72:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	2f 93       	push	r18
     a7c:	3f 93       	push	r19
     a7e:	4f 93       	push	r20
     a80:	5f 93       	push	r21
     a82:	6f 93       	push	r22
     a84:	7f 93       	push	r23
     a86:	8f 93       	push	r24
     a88:	9f 93       	push	r25
     a8a:	af 93       	push	r26
     a8c:	bf 93       	push	r27
     a8e:	ef 93       	push	r30
     a90:	ff 93       	push	r31
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
	if((PINC & (1 << PINC0)) == 0) {
     a9a:	86 e2       	ldi	r24, 0x26	; 38
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	88 2f       	mov	r24, r24
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	81 70       	andi	r24, 0x01	; 1
     aa8:	99 27       	eor	r25, r25
     aaa:	89 2b       	or	r24, r25
     aac:	b9 f4       	brne	.+46     	; 0xadc <__vector_4+0x6e>
		if (PINC & (1 << PINC1)) { //CW
     aae:	86 e2       	ldi	r24, 0x26	; 38
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	fc 01       	movw	r30, r24
     ab4:	80 81       	ld	r24, Z
     ab6:	88 2f       	mov	r24, r24
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	82 70       	andi	r24, 0x02	; 2
     abc:	99 27       	eor	r25, r25
     abe:	89 2b       	or	r24, r25
     ac0:	39 f0       	breq	.+14     	; 0xad0 <__vector_4+0x62>
			activity();
     ac2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <activity>
			update_display_values(1, 0);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	0e 94 43 07 	call	0xe86	; 0xe86 <update_display_values>
     ace:	06 c0       	rjmp	.+12     	; 0xadc <__vector_4+0x6e>
		} else { //CCW
			activity();
     ad0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <activity>
			update_display_values(1, 1);
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	0e 94 43 07 	call	0xe86	; 0xe86 <update_display_values>
		}
	}
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	ff 91       	pop	r31
     ae2:	ef 91       	pop	r30
     ae4:	bf 91       	pop	r27
     ae6:	af 91       	pop	r26
     ae8:	9f 91       	pop	r25
     aea:	8f 91       	pop	r24
     aec:	7f 91       	pop	r23
     aee:	6f 91       	pop	r22
     af0:	5f 91       	pop	r21
     af2:	4f 91       	pop	r20
     af4:	3f 91       	pop	r19
     af6:	2f 91       	pop	r18
     af8:	0f 90       	pop	r0
     afa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     afe:	0f 90       	pop	r0
     b00:	1f 90       	pop	r1
     b02:	18 95       	reti

00000b04 <__vector_11>:


ISR(TIMER1_COMPA_vect) {
     b04:	1f 92       	push	r1
     b06:	0f 92       	push	r0
     b08:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	2f 93       	push	r18
     b12:	3f 93       	push	r19
     b14:	4f 93       	push	r20
     b16:	5f 93       	push	r21
     b18:	6f 93       	push	r22
     b1a:	7f 93       	push	r23
     b1c:	8f 93       	push	r24
     b1e:	9f 93       	push	r25
     b20:	af 93       	push	r26
     b22:	bf 93       	push	r27
     b24:	ef 93       	push	r30
     b26:	ff 93       	push	r31
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
	if(++display_counter == 10 && !screen_saver_FLAG) {
     b30:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <display_counter>
     b34:	8f 5f       	subi	r24, 0xFF	; 255
     b36:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <display_counter>
     b3a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <display_counter>
     b3e:	8a 30       	cpi	r24, 0x0A	; 10
     b40:	49 f4       	brne	.+18     	; 0xb54 <__vector_11+0x50>
     b42:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <screen_saver_FLAG>
     b46:	88 23       	and	r24, r24
     b48:	29 f4       	brne	.+10     	; 0xb54 <__vector_11+0x50>
		display_FLAG = 1;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <display_FLAG>
		display_counter = 0;
     b50:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <display_counter>
	}

	if (activity_FLAG && ++activity_counter == 20) {
     b54:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <activity_FLAG>
     b58:	88 23       	and	r24, r24
     b5a:	69 f0       	breq	.+26     	; 0xb76 <__vector_11+0x72>
     b5c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <activity_counter>
     b60:	8f 5f       	subi	r24, 0xFF	; 255
     b62:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <activity_counter>
     b66:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <activity_counter>
     b6a:	84 31       	cpi	r24, 0x14	; 20
     b6c:	21 f4       	brne	.+8      	; 0xb76 <__vector_11+0x72>
		activity_FLAG = 0;
     b6e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <activity_FLAG>
		activity_counter = 0;
     b72:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <activity_counter>
	}

	if(++back_light_counter == 500 && !activity_FLAG) {
     b76:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <back_light_counter>
     b7a:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <back_light_counter+0x1>
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <back_light_counter+0x1>
     b84:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <back_light_counter>
     b88:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <back_light_counter>
     b8c:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <back_light_counter+0x1>
     b90:	84 3f       	cpi	r24, 0xF4	; 244
     b92:	91 40       	sbci	r25, 0x01	; 1
     b94:	59 f4       	brne	.+22     	; 0xbac <__vector_11+0xa8>
     b96:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <activity_FLAG>
     b9a:	88 23       	and	r24, r24
     b9c:	39 f4       	brne	.+14     	; 0xbac <__vector_11+0xa8>
		back_light_FLAG = 1;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <back_light_FLAG>
		back_light_counter = 0;
     ba4:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <back_light_counter+0x1>
     ba8:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <back_light_counter>
	}

	if (screen_saver_FLAG) {
     bac:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <screen_saver_FLAG>
     bb0:	88 23       	and	r24, r24
     bb2:	11 f1       	breq	.+68     	; 0xbf8 <__vector_11+0xf4>
		if (++screen_saver_counter == 100 && !activity_FLAG) {
     bb4:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <screen_saver_counter>
     bb8:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <screen_saver_counter+0x1>
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <screen_saver_counter+0x1>
     bc2:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <screen_saver_counter>
     bc6:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <screen_saver_counter>
     bca:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <screen_saver_counter+0x1>
     bce:	84 36       	cpi	r24, 0x64	; 100
     bd0:	91 05       	cpc	r25, r1
     bd2:	79 f5       	brne	.+94     	; 0xc32 <__vector_11+0x12e>
     bd4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <activity_FLAG>
     bd8:	88 23       	and	r24, r24
     bda:	59 f5       	brne	.+86     	; 0xc32 <__vector_11+0x12e>
			screen_saver_counter = 0;
     bdc:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <screen_saver_counter+0x1>
     be0:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <screen_saver_counter>
			showScreenSaver();
     be4:	0e 94 65 09 	call	0x12ca	; 0x12ca <showScreenSaver>
			ctrl_index = 0;
     be8:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <__data_end>
			ctrl_menu_FLAG = 1;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ctrl_menu_FLAG>
			menu_FLAG = 0;
     bf2:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <menu_FLAG>
     bf6:	1d c0       	rjmp	.+58     	; 0xc32 <__vector_11+0x12e>
		}
	} else {
		if (++screen_saver_counter == 3000 && !activity_FLAG) {
     bf8:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <screen_saver_counter>
     bfc:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <screen_saver_counter+0x1>
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <screen_saver_counter+0x1>
     c06:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <screen_saver_counter>
     c0a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <screen_saver_counter>
     c0e:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <screen_saver_counter+0x1>
     c12:	88 3b       	cpi	r24, 0xB8	; 184
     c14:	9b 40       	sbci	r25, 0x0B	; 11
     c16:	69 f4       	brne	.+26     	; 0xc32 <__vector_11+0x12e>
     c18:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <activity_FLAG>
     c1c:	88 23       	and	r24, r24
     c1e:	49 f4       	brne	.+18     	; 0xc32 <__vector_11+0x12e>
			screen_saver_FLAG = 1;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <screen_saver_FLAG>
			screen_saver_counter = 0;
     c26:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <screen_saver_counter+0x1>
     c2a:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <screen_saver_counter>
			display_FLAG = 0;
     c2e:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <display_FLAG>
		}
	}
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	ff 91       	pop	r31
     c38:	ef 91       	pop	r30
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <main>:


int main(void) {
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	1f 92       	push	r1
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
	init_usart(9600, NONE, ONE);
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	80 e8       	ldi	r24, 0x80	; 128
     c6a:	95 e2       	ldi	r25, 0x25	; 37
     c6c:	0e 94 49 04 	call	0x892	; 0x892 <init_usart>
	Init_Pot_Meter();
     c70:	0e 94 53 00 	call	0xa6	; 0xa6 <Init_Pot_Meter>
	i2cInit();
     c74:	0e 94 ad 00 	call	0x15a	; 0x15a <i2cInit>
	initDisp();
     c78:	0e 94 33 01 	call	0x266	; 0x266 <initDisp>
	init_timer();
     c7c:	0e 94 cf 08 	call	0x119e	; 0x119e <init_timer>
	init_rot_but();
     c80:	0e 94 0d 09 	call	0x121a	; 0x121a <init_rot_but>
	initBrightnessTimer();
     c84:	0e 94 2f 09 	call	0x125e	; 0x125e <initBrightnessTimer>

	for(uint8_t i = 0; i < 4; i++) {
     c88:	19 82       	std	Y+1, r1	; 0x01
     c8a:	08 c0       	rjmp	.+16     	; 0xc9c <main+0x42>
		ctrl_index = i;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end>
		update_system();
     c92:	0e 94 0c 0a 	call	0x1418	; 0x1418 <update_system>
	initDisp();
	init_timer();
	init_rot_but();
	initBrightnessTimer();

	for(uint8_t i = 0; i < 4; i++) {
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	8f 5f       	subi	r24, 0xFF	; 255
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	84 30       	cpi	r24, 0x04	; 4
     ca0:	a8 f3       	brcs	.-22     	; 0xc8c <main+0x32>
		ctrl_index = i;
		update_system();
	}
	ctrl_index = 0;
     ca2:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <__data_end>

	vol_control[0] = "Volume";
     ca6:	8d e3       	ldi	r24, 0x3D	; 61
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <vol_control+0x1>
     cae:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <vol_control>
	vol_control[1] = "Bass";
     cb2:	84 e4       	ldi	r24, 0x44	; 68
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <vol_control+0x3>
     cba:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <vol_control+0x2>
	vol_control[2] = "Mid-range";
     cbe:	89 e4       	ldi	r24, 0x49	; 73
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <vol_control+0x5>
     cc6:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <vol_control+0x4>
	vol_control[3] = "Treble";
     cca:	83 e5       	ldi	r24, 0x53	; 83
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <vol_control+0x7>
     cd2:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <vol_control+0x6>
	vol_control[4] = "Brightness";
     cd6:	8a e5       	ldi	r24, 0x5A	; 90
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <vol_control+0x9>
     cde:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <vol_control+0x8>
	main_menu[0] = "1.Equalizer";
     ce2:	85 e6       	ldi	r24, 0x65	; 101
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <main_menu+0x1>
     cea:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <main_menu>
	main_menu[1] = "2.Brightness";
     cee:	81 e7       	ldi	r24, 0x71	; 113
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <main_menu+0x3>
     cf6:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <main_menu+0x2>
	main_menu[2] = "3.Reset";
     cfa:	8e e7       	ldi	r24, 0x7E	; 126
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <main_menu+0x5>
     d02:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <main_menu+0x4>
	main_menu[3] = "4.Exit";
     d06:	86 e8       	ldi	r24, 0x86	; 134
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <main_menu+0x7>
     d0e:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <main_menu+0x6>
	main_menu[4] = "  ";
     d12:	8d e8       	ldi	r24, 0x8D	; 141
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <main_menu+0x9>
     d1a:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <main_menu+0x8>
	equalizer_menu[0] = "1.Bass";
     d1e:	80 e9       	ldi	r24, 0x90	; 144
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <equalizer_menu+0x1>
     d26:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <equalizer_menu>
	equalizer_menu[1] = "2.Mid-range";
     d2a:	87 e9       	ldi	r24, 0x97	; 151
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <equalizer_menu+0x3>
     d32:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <equalizer_menu+0x2>
	equalizer_menu[2] = "3.Treble";
     d36:	83 ea       	ldi	r24, 0xA3	; 163
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <equalizer_menu+0x5>
     d3e:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <equalizer_menu+0x4>
	equalizer_menu[3] = "4.Back";
     d42:	8c ea       	ldi	r24, 0xAC	; 172
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <equalizer_menu+0x7>
     d4a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <equalizer_menu+0x6>
	equalizer_menu[4] = "  ";
     d4e:	8d e8       	ldi	r24, 0x8D	; 141
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <equalizer_menu+0x9>
     d56:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <equalizer_menu+0x8>
	sei();
     d5a:	78 94       	sei
    while (1) 
    {
		if(display_FLAG) {
     d5c:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <display_FLAG>
     d60:	88 23       	and	r24, r24
     d62:	21 f0       	breq	.+8      	; 0xd6c <main+0x112>
			update_display();
     d64:	0e 94 ce 06 	call	0xd9c	; 0xd9c <update_display>
			display_FLAG = 0;
     d68:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <display_FLAG>
		}

		if(activity_FLAG) {
     d6c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <activity_FLAG>
     d70:	88 23       	and	r24, r24
     d72:	51 f0       	breq	.+20     	; 0xd88 <main+0x12e>
			setBrightness(vol_values[vol_index[4]]);
     d74:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	8b 5f       	subi	r24, 0xFB	; 251
     d7e:	9e 4f       	sbci	r25, 0xFE	; 254
     d80:	fc 01       	movw	r30, r24
     d82:	80 81       	ld	r24, Z
     d84:	0e 94 56 09 	call	0x12ac	; 0x12ac <setBrightness>
		}

		if (back_light_FLAG) {
     d88:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <back_light_FLAG>
     d8c:	88 23       	and	r24, r24
     d8e:	29 f0       	breq	.+10     	; 0xd9a <main+0x140>
			setBrightness(0);
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	0e 94 56 09 	call	0x12ac	; 0x12ac <setBrightness>
			back_light_FLAG = 0;
     d96:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <back_light_FLAG>
		}
    }
     d9a:	e0 cf       	rjmp	.-64     	; 0xd5c <main+0x102>

00000d9c <update_display>:
}

void update_display() {
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
	//Send the menu item to the display
	if (ctrl_menu_FLAG) {
     da4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     da8:	88 23       	and	r24, r24
     daa:	e9 f0       	breq	.+58     	; 0xde6 <update_display+0x4a>
		write_volume_control(vol_control[ctrl_index], vol_values[vol_index[ctrl_index]]);
     dac:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     db0:	88 2f       	mov	r24, r24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	80 50       	subi	r24, 0x00	; 0
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	8b 5f       	subi	r24, 0xFB	; 251
     dc2:	9e 4f       	sbci	r25, 0xFE	; 254
     dc4:	fc 01       	movw	r30, r24
     dc6:	20 81       	ld	r18, Z
     dc8:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	86 52       	subi	r24, 0x26	; 38
     dd6:	9e 4f       	sbci	r25, 0xFE	; 254
     dd8:	fc 01       	movw	r30, r24
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	62 2f       	mov	r22, r18
     de0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <write_volume_control>
     de4:	39 c0       	rjmp	.+114    	; 0xe58 <update_display+0xbc>
	} else {
		if (equalizer_menu_FLAG) {
     de6:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <equalizer_menu_FLAG>
     dea:	88 23       	and	r24, r24
     dec:	d9 f0       	breq	.+54     	; 0xe24 <update_display+0x88>
			write_menu_items(equalizer_menu[equalizer_menu_index], equalizer_menu[equalizer_menu_index + 1]);
     dee:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <equalizer_menu_index>
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	82 51       	subi	r24, 0x12	; 18
     dfe:	9e 4f       	sbci	r25, 0xFE	; 254
     e00:	fc 01       	movw	r30, r24
     e02:	20 81       	ld	r18, Z
     e04:	31 81       	ldd	r19, Z+1	; 0x01
     e06:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <equalizer_menu_index>
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	82 51       	subi	r24, 0x12	; 18
     e14:	9e 4f       	sbci	r25, 0xFE	; 254
     e16:	fc 01       	movw	r30, r24
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	b9 01       	movw	r22, r18
     e1e:	0e 94 6d 03 	call	0x6da	; 0x6da <write_menu_items>
     e22:	1a c0       	rjmp	.+52     	; 0xe58 <update_display+0xbc>
		} else {
			write_menu_items(main_menu[menu_index], main_menu[menu_index + 1]);
     e24:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <menu_index>
     e28:	88 2f       	mov	r24, r24
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	8c 51       	subi	r24, 0x1C	; 28
     e34:	9e 4f       	sbci	r25, 0xFE	; 254
     e36:	fc 01       	movw	r30, r24
     e38:	20 81       	ld	r18, Z
     e3a:	31 81       	ldd	r19, Z+1	; 0x01
     e3c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <menu_index>
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	8c 51       	subi	r24, 0x1C	; 28
     e4a:	9e 4f       	sbci	r25, 0xFE	; 254
     e4c:	fc 01       	movw	r30, r24
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	b9 01       	movw	r22, r18
     e54:	0e 94 6d 03 	call	0x6da	; 0x6da <write_menu_items>
		}
	}
	//Update the brightness 
	if (ctrl_index == 4) {
     e58:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     e5c:	84 30       	cpi	r24, 0x04	; 4
     e5e:	81 f4       	brne	.+32     	; 0xe80 <update_display+0xe4>
		setBrightness(vol_values[vol_index[ctrl_index]]);
     e60:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	80 50       	subi	r24, 0x00	; 0
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	fc 01       	movw	r30, r24
     e6e:	80 81       	ld	r24, Z
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	8b 5f       	subi	r24, 0xFB	; 251
     e76:	9e 4f       	sbci	r25, 0xFE	; 254
     e78:	fc 01       	movw	r30, r24
     e7a:	80 81       	ld	r24, Z
     e7c:	0e 94 56 09 	call	0x12ac	; 0x12ac <setBrightness>
	}
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <update_display_values>:

void update_display_values(uint8_t device, uint8_t direction) {
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <update_display_values+0x6>
     e8c:	1f 92       	push	r1
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	8a 83       	std	Y+2, r24	; 0x02
     e94:	6b 83       	std	Y+3, r22	; 0x03
	/*	-> -> 4.Back			(EQ Menu)									*/
	/*	-> 2.Brightness			(Main Menu)									*/
	/*  -> 3.Reset				(Main Menu)									*/
	/*  -> 4.Exit				(Main Menu)									*/
	/************************************************************************/
	if (device) {											//If the device is the rotary encoder
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	88 23       	and	r24, r24
     e9a:	09 f4       	brne	.+2      	; 0xe9e <update_display_values+0x18>
     e9c:	f6 c0       	rjmp	.+492    	; 0x108a <update_display_values+0x204>
		if (direction) {									//If the direction is up
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	88 23       	and	r24, r24
     ea2:	09 f4       	brne	.+2      	; 0xea6 <update_display_values+0x20>
     ea4:	79 c0       	rjmp	.+242    	; 0xf98 <update_display_values+0x112>
			if (menu_FLAG) {								//If we are in a menu
     ea6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <menu_FLAG>
     eaa:	88 23       	and	r24, r24
     eac:	09 f4       	brne	.+2      	; 0xeb0 <update_display_values+0x2a>
     eae:	58 c0       	rjmp	.+176    	; 0xf60 <update_display_values+0xda>
				if (equalizer_menu_FLAG) {					//If we are in the equalizer menu
     eb0:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <equalizer_menu_FLAG>
     eb4:	88 23       	and	r24, r24
     eb6:	59 f1       	breq	.+86     	; 0xf0e <update_display_values+0x88>
					if (ctrl_menu_FLAG) {					//If we are in a control menu
     eb8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     ebc:	88 23       	and	r24, r24
     ebe:	e1 f0       	breq	.+56     	; 0xef8 <update_display_values+0x72>
						if(vol_index[ctrl_index] < 15) {	//If the vol index is less than 15, we can increment it
     ec0:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	80 50       	subi	r24, 0x00	; 0
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	fc 01       	movw	r30, r24
     ece:	80 81       	ld	r24, Z
     ed0:	8f 30       	cpi	r24, 0x0F	; 15
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <update_display_values+0x50>
     ed4:	5e c1       	rjmp	.+700    	; 0x1192 <update_display_values+0x30c>
							vol_index[ctrl_index]++;
     ed6:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	9c 01       	movw	r18, r24
     ee0:	20 50       	subi	r18, 0x00	; 0
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	f9 01       	movw	r30, r18
     ee6:	20 81       	ld	r18, Z
     ee8:	2f 5f       	subi	r18, 0xFF	; 255
     eea:	80 50       	subi	r24, 0x00	; 0
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	fc 01       	movw	r30, r24
     ef0:	20 83       	st	Z, r18
							update_system();
     ef2:	0e 94 0c 0a 	call	0x1418	; 0x1418 <update_system>
     ef6:	4d c1       	rjmp	.+666    	; 0x1192 <update_display_values+0x30c>
						}
					} else {								//If we are not in a ctrl menu, then we must be scrolling through the equalizer menu
						if (equalizer_menu_index < 3){		//As long as the index of the menu is less than 3 we are able to scroll further down
     ef8:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <equalizer_menu_index>
     efc:	83 30       	cpi	r24, 0x03	; 3
     efe:	08 f0       	brcs	.+2      	; 0xf02 <update_display_values+0x7c>
     f00:	48 c1       	rjmp	.+656    	; 0x1192 <update_display_values+0x30c>
							equalizer_menu_index++;
     f02:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <equalizer_menu_index>
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <equalizer_menu_index>
     f0c:	42 c1       	rjmp	.+644    	; 0x1192 <update_display_values+0x30c>
						}
					}
				} else if(ctrl_menu_FLAG){					//If we are not in the equalizer menu and the ctrl menu flag is set, we must be in the brightness menu
     f0e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     f12:	88 23       	and	r24, r24
     f14:	d1 f0       	breq	.+52     	; 0xf4a <update_display_values+0xc4>
					if(vol_index[ctrl_index] < 15) {		//So if the index is less than 15 we can increment it, just like with the equalizer above	
     f16:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	80 50       	subi	r24, 0x00	; 0
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	fc 01       	movw	r30, r24
     f24:	80 81       	ld	r24, Z
     f26:	8f 30       	cpi	r24, 0x0F	; 15
     f28:	08 f0       	brcs	.+2      	; 0xf2c <update_display_values+0xa6>
     f2a:	33 c1       	rjmp	.+614    	; 0x1192 <update_display_values+0x30c>
						vol_index[ctrl_index]++;
     f2c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9c 01       	movw	r18, r24
     f36:	20 50       	subi	r18, 0x00	; 0
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	f9 01       	movw	r30, r18
     f3c:	20 81       	ld	r18, Z
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	80 50       	subi	r24, 0x00	; 0
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	fc 01       	movw	r30, r24
     f46:	20 83       	st	Z, r18
     f48:	24 c1       	rjmp	.+584    	; 0x1192 <update_display_values+0x30c>
					}
				} else {									//If we are not in the equalizer menu, and we are not in the ctrl menu,
					if(menu_index < 3) {					//then we must be scrolling through the main menu
     f4a:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <menu_index>
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	08 f0       	brcs	.+2      	; 0xf54 <update_display_values+0xce>
     f52:	1f c1       	rjmp	.+574    	; 0x1192 <update_display_values+0x30c>
						menu_index++;						//We want to scroll through the menu if the index of the menu is less than 3. Otherwise we must stall.
     f54:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <menu_index>
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <menu_index>
     f5e:	19 c1       	rjmp	.+562    	; 0x1192 <update_display_values+0x30c>
					}
				}
			} else {
				if(vol_index[ctrl_index] < 15) {			//If we are not in a menu we must be controlling the master volume.
     f60:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	80 50       	subi	r24, 0x00	; 0
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	fc 01       	movw	r30, r24
     f6e:	80 81       	ld	r24, Z
     f70:	8f 30       	cpi	r24, 0x0F	; 15
     f72:	08 f0       	brcs	.+2      	; 0xf76 <update_display_values+0xf0>
     f74:	0e c1       	rjmp	.+540    	; 0x1192 <update_display_values+0x30c>
					vol_index[ctrl_index]++;				//So if the index of the volume is no larger than 15, we want to increment the volume
     f76:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	9c 01       	movw	r18, r24
     f80:	20 50       	subi	r18, 0x00	; 0
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	f9 01       	movw	r30, r18
     f86:	20 81       	ld	r18, Z
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	80 50       	subi	r24, 0x00	; 0
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	fc 01       	movw	r30, r24
     f90:	20 83       	st	Z, r18
					update_system();
     f92:	0e 94 0c 0a 	call	0x1418	; 0x1418 <update_system>
     f96:	fd c0       	rjmp	.+506    	; 0x1192 <update_display_values+0x30c>
				}
			}
		} else {											//Else the direction must be down
			if (menu_FLAG) {								//If we are in the main menu
     f98:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <menu_FLAG>
     f9c:	88 23       	and	r24, r24
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <update_display_values+0x11c>
     fa0:	58 c0       	rjmp	.+176    	; 0x1052 <update_display_values+0x1cc>
				if (equalizer_menu_FLAG) {					//If we are in the EQ menu
     fa2:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <equalizer_menu_FLAG>
     fa6:	88 23       	and	r24, r24
     fa8:	59 f1       	breq	.+86     	; 0x1000 <update_display_values+0x17a>
					if (ctrl_menu_FLAG) {					//If we are in a ctrl menu
     faa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
     fae:	88 23       	and	r24, r24
     fb0:	e1 f0       	breq	.+56     	; 0xfea <update_display_values+0x164>
						if(vol_index[ctrl_index] > 0) {		//If the ctrl index is still bigger than zero, then we can decrement it.
     fb2:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	80 50       	subi	r24, 0x00	; 0
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	fc 01       	movw	r30, r24
     fc0:	80 81       	ld	r24, Z
     fc2:	88 23       	and	r24, r24
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <update_display_values+0x142>
     fc6:	e5 c0       	rjmp	.+458    	; 0x1192 <update_display_values+0x30c>
							vol_index[ctrl_index]--;
     fc8:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c 01       	movw	r18, r24
     fd2:	20 50       	subi	r18, 0x00	; 0
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	21 50       	subi	r18, 0x01	; 1
     fdc:	80 50       	subi	r24, 0x00	; 0
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	fc 01       	movw	r30, r24
     fe2:	20 83       	st	Z, r18
							update_system();
     fe4:	0e 94 0c 0a 	call	0x1418	; 0x1418 <update_system>
     fe8:	d4 c0       	rjmp	.+424    	; 0x1192 <update_display_values+0x30c>
						}
					} else {								//If we re not in a control menu, we must be scrolling through the EQ menu.
						if (equalizer_menu_index > 0) {		//As long as the index is larger than zero, we can scroll through the menu points
     fea:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <equalizer_menu_index>
     fee:	88 23       	and	r24, r24
     ff0:	09 f4       	brne	.+2      	; 0xff4 <update_display_values+0x16e>
     ff2:	cf c0       	rjmp	.+414    	; 0x1192 <update_display_values+0x30c>
							equalizer_menu_index--;
     ff4:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <equalizer_menu_index>
     ff8:	81 50       	subi	r24, 0x01	; 1
     ffa:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <equalizer_menu_index>
     ffe:	c9 c0       	rjmp	.+402    	; 0x1192 <update_display_values+0x30c>
						}
					}
				} else if(ctrl_menu_FLAG){					//If we are in the main menu and in a ctrl menu
    1000:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
    1004:	88 23       	and	r24, r24
    1006:	d1 f0       	breq	.+52     	; 0x103c <update_display_values+0x1b6>
					if(vol_index[ctrl_index] > 0) {			//Then if the menu index is bigger than zero, then we want to decrement the index
    1008:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	80 50       	subi	r24, 0x00	; 0
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	fc 01       	movw	r30, r24
    1016:	80 81       	ld	r24, Z
    1018:	88 23       	and	r24, r24
    101a:	09 f4       	brne	.+2      	; 0x101e <update_display_values+0x198>
    101c:	ba c0       	rjmp	.+372    	; 0x1192 <update_display_values+0x30c>
						vol_index[ctrl_index]--;
    101e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9c 01       	movw	r18, r24
    1028:	20 50       	subi	r18, 0x00	; 0
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	f9 01       	movw	r30, r18
    102e:	20 81       	ld	r18, Z
    1030:	21 50       	subi	r18, 0x01	; 1
    1032:	80 50       	subi	r24, 0x00	; 0
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
    103a:	ab c0       	rjmp	.+342    	; 0x1192 <update_display_values+0x30c>
					}
				} else {									//If none of the above is true, then we must be in the main menu
					if(menu_index > 0) {					//So if the index is larger than 0 then we can scroll down trough the menu
    103c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <menu_index>
    1040:	88 23       	and	r24, r24
    1042:	09 f4       	brne	.+2      	; 0x1046 <update_display_values+0x1c0>
    1044:	a6 c0       	rjmp	.+332    	; 0x1192 <update_display_values+0x30c>
						menu_index--;
    1046:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <menu_index>
    104a:	81 50       	subi	r24, 0x01	; 1
    104c:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <menu_index>
    1050:	a0 c0       	rjmp	.+320    	; 0x1192 <update_display_values+0x30c>
					}
				}
			} else {										//If we are not in the menu, We must be controlling the master volume
				if(vol_index[ctrl_index] > 0) {				//If the ctrl index is bigger than zero, then we can decrement the master volume
    1052:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	80 50       	subi	r24, 0x00	; 0
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	fc 01       	movw	r30, r24
    1060:	80 81       	ld	r24, Z
    1062:	88 23       	and	r24, r24
    1064:	09 f4       	brne	.+2      	; 0x1068 <update_display_values+0x1e2>
    1066:	95 c0       	rjmp	.+298    	; 0x1192 <update_display_values+0x30c>
					vol_index[ctrl_index]--;
    1068:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	9c 01       	movw	r18, r24
    1072:	20 50       	subi	r18, 0x00	; 0
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    1076:	f9 01       	movw	r30, r18
    1078:	20 81       	ld	r18, Z
    107a:	21 50       	subi	r18, 0x01	; 1
    107c:	80 50       	subi	r24, 0x00	; 0
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	fc 01       	movw	r30, r24
    1082:	20 83       	st	Z, r18
					update_system();
    1084:	0e 94 0c 0a 	call	0x1418	; 0x1418 <update_system>
    1088:	84 c0       	rjmp	.+264    	; 0x1192 <update_display_values+0x30c>
				}
			}
		}
	} else {												//The button is pressed 
		if (menu_FLAG) {									// are we in the menu?
    108a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <menu_FLAG>
    108e:	88 23       	and	r24, r24
    1090:	09 f4       	brne	.+2      	; 0x1094 <update_display_values+0x20e>
    1092:	7c c0       	rjmp	.+248    	; 0x118c <update_display_values+0x306>
			if (equalizer_menu_FLAG) {						//Are we in the equalizer menu?
    1094:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <equalizer_menu_FLAG>
    1098:	88 23       	and	r24, r24
    109a:	69 f1       	breq	.+90     	; 0x10f6 <update_display_values+0x270>
				if (equalizer_menu_index == 3) {			//If the index is 3 we wanna to go back
    109c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <equalizer_menu_index>
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	29 f4       	brne	.+10     	; 0x10ae <update_display_values+0x228>
					equalizer_menu_FLAG = 0;
    10a4:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <equalizer_menu_FLAG>
					equalizer_menu_index = 0;
    10a8:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <equalizer_menu_index>
    10ac:	72 c0       	rjmp	.+228    	; 0x1192 <update_display_values+0x30c>
				} else if(ctrl_menu_FLAG) {					//If we are in a control menu, we wanna to go back to the equalizer menu
    10ae:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
    10b2:	88 23       	and	r24, r24
    10b4:	19 f0       	breq	.+6      	; 0x10bc <update_display_values+0x236>
					ctrl_menu_FLAG = 0;
    10b6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ctrl_menu_FLAG>
    10ba:	6b c0       	rjmp	.+214    	; 0x1192 <update_display_values+0x30c>
				} else {									//If nothing of the above option is true, then we wanna go into a control menu. 
					ctrl_menu_FLAG = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ctrl_menu_FLAG>
					switch(equalizer_menu_index) {			//Select the right index
    10c2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <equalizer_menu_index>
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	51 f0       	breq	.+20     	; 0x10e4 <update_display_values+0x25e>
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	91 05       	cpc	r25, r1
    10d4:	59 f0       	breq	.+22     	; 0x10ec <update_display_values+0x266>
    10d6:	89 2b       	or	r24, r25
    10d8:	09 f0       	breq	.+2      	; 0x10dc <update_display_values+0x256>
    10da:	5b c0       	rjmp	.+182    	; 0x1192 <update_display_values+0x30c>
						case 0:
							ctrl_index = 1;					//Select the Bass menu
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end>
							break;
    10e2:	08 c0       	rjmp	.+16     	; 0x10f4 <update_display_values+0x26e>
						case 1:								
							ctrl_index = 2;					//Select the Mid range menu
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end>
							break;
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <update_display_values+0x26e>
						case 2:
							ctrl_index = 3;					//Select the Treble menu
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end>
							break;
    10f2:	00 00       	nop
    10f4:	4e c0       	rjmp	.+156    	; 0x1192 <update_display_values+0x30c>
					}
				}
			} else {										//If we are not in the EQ menu, then we must be in the main menu
				if(ctrl_menu_FLAG) {						//If we are in a ctrl menu, we must be in the brightness menu
    10f6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ctrl_menu_FLAG>
    10fa:	88 23       	and	r24, r24
    10fc:	19 f0       	breq	.+6      	; 0x1104 <update_display_values+0x27e>
					ctrl_menu_FLAG = 0;						//However since it is a button press we want to set the flag to false so we get out of the menu	
    10fe:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ctrl_menu_FLAG>
    1102:	47 c0       	rjmp	.+142    	; 0x1192 <update_display_values+0x30c>
				} else {									//If we are in the main menu
					switch (menu_index) {					//We ant to figure out what we want to do, depending on what menu item we are highlighting
    1104:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <menu_index>
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	81 f0       	breq	.+32     	; 0x1132 <update_display_values+0x2ac>
    1112:	82 30       	cpi	r24, 0x02	; 2
    1114:	91 05       	cpc	r25, r1
    1116:	1c f4       	brge	.+6      	; 0x111e <update_display_values+0x298>
    1118:	89 2b       	or	r24, r25
    111a:	39 f0       	breq	.+14     	; 0x112a <update_display_values+0x2a4>
    111c:	3a c0       	rjmp	.+116    	; 0x1192 <update_display_values+0x30c>
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	91 05       	cpc	r25, r1
    1122:	71 f0       	breq	.+28     	; 0x1140 <update_display_values+0x2ba>
    1124:	03 97       	sbiw	r24, 0x03	; 3
    1126:	49 f1       	breq	.+82     	; 0x117a <update_display_values+0x2f4>
    1128:	34 c0       	rjmp	.+104    	; 0x1192 <update_display_values+0x30c>
						case 0:								
							equalizer_menu_FLAG = 1;		//If we are highlighting EQ menu, then we want to access it
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <equalizer_menu_FLAG>
							break;
    1130:	2c c0       	rjmp	.+88     	; 0x118a <update_display_values+0x304>
						case 1:
							ctrl_menu_FLAG = 1;				//If we are highlighting the Brightness menu, then we wanna access it
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ctrl_menu_FLAG>
							ctrl_index = 4;
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end>
							break;
    113e:	25 c0       	rjmp	.+74     	; 0x118a <update_display_values+0x304>
						case 2:								//If we are highlighting Reset, then we wanna reset all values
							for(uint8_t i = 0; i < 5; i++) {//Reset the values
    1140:	19 82       	std	Y+1, r1	; 0x01
    1142:	17 c0       	rjmp	.+46     	; 0x1172 <update_display_values+0x2ec>
								if (i >= 4) {
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	48 f0       	brcs	.+18     	; 0x115c <update_display_values+0x2d6>
									vol_index[i] = 15;
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	80 50       	subi	r24, 0x00	; 0
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	2f e0       	ldi	r18, 0x0F	; 15
    1156:	fc 01       	movw	r30, r24
    1158:	20 83       	st	Z, r18
    115a:	08 c0       	rjmp	.+16     	; 0x116c <update_display_values+0x2e6>
								} else {
									vol_index[i] = 7;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	80 50       	subi	r24, 0x00	; 0
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	27 e0       	ldi	r18, 0x07	; 7
    1168:	fc 01       	movw	r30, r24
    116a:	20 83       	st	Z, r18
						case 1:
							ctrl_menu_FLAG = 1;				//If we are highlighting the Brightness menu, then we wanna access it
							ctrl_index = 4;
							break;
						case 2:								//If we are highlighting Reset, then we wanna reset all values
							for(uint8_t i = 0; i < 5; i++) {//Reset the values
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	8f 5f       	subi	r24, 0xFF	; 255
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	85 30       	cpi	r24, 0x05	; 5
    1176:	30 f3       	brcs	.-52     	; 0x1144 <update_display_values+0x2be>
									vol_index[i] = 15;
								} else {
									vol_index[i] = 7;
								}
							}
							break;
    1178:	08 c0       	rjmp	.+16     	; 0x118a <update_display_values+0x304>
						case 3:
							menu_FLAG = 0;					//If we are highlighting the Exit point, then we wanna back out and view the master volume ctrl.
    117a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <menu_FLAG>
							ctrl_index = 0;
    117e:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <__data_end>
							ctrl_menu_FLAG = 1;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ctrl_menu_FLAG>
							break;
    1188:	00 00       	nop
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <update_display_values+0x30c>
					}
				}
			}
		} else {
			menu_FLAG = 1;									//If a button press occurs and we are at the master volume, then we want to go to the main menu
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <menu_FLAG>
		}
	}
}
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <init_timer>:

void init_timer() {
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    11a6:	84 e8       	ldi	r24, 0x84	; 132
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	fc 01       	movw	r30, r24
    11ac:	11 82       	std	Z+1, r1	; 0x01
    11ae:	10 82       	st	Z, r1

	OCR1A = 20000;
    11b0:	88 e8       	ldi	r24, 0x88	; 136
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	20 e2       	ldi	r18, 0x20	; 32
    11b6:	3e e4       	ldi	r19, 0x4E	; 78
    11b8:	fc 01       	movw	r30, r24
    11ba:	31 83       	std	Z+1, r19	; 0x01
    11bc:	20 83       	st	Z, r18

	TIMSK1 |= (1 << OCF1A);
    11be:	8f e6       	ldi	r24, 0x6F	; 111
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	2f e6       	ldi	r18, 0x6F	; 111
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	f9 01       	movw	r30, r18
    11c8:	20 81       	ld	r18, Z
    11ca:	22 60       	ori	r18, 0x02	; 2
    11cc:	fc 01       	movw	r30, r24
    11ce:	20 83       	st	Z, r18

	TCCR1B |= (1 << CS11) | (1 << WGM12);
    11d0:	81 e8       	ldi	r24, 0x81	; 129
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	21 e8       	ldi	r18, 0x81	; 129
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	f9 01       	movw	r30, r18
    11da:	20 81       	ld	r18, Z
    11dc:	2a 60       	ori	r18, 0x0A	; 10
    11de:	fc 01       	movw	r30, r24
    11e0:	20 83       	st	Z, r18
}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <activity>:

void activity() {
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	activity_FLAG = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <activity_FLAG>
	activity_counter = 0;
    11f6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <activity_counter>
	back_light_counter = 0;
    11fa:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <back_light_counter+0x1>
    11fe:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <back_light_counter>
	screen_saver_counter = 0;
    1202:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <screen_saver_counter+0x1>
    1206:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <screen_saver_counter>
	screen_saver_FLAG = 0;
    120a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <screen_saver_FLAG>
	display_FLAG = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <display_FLAG>
}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	08 95       	ret

0000121a <init_rot_but>:

void init_rot_but() {
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	PCICR |= (1 << PCIE1) | (1 << PCIE0);
    1222:	88 e6       	ldi	r24, 0x68	; 104
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	28 e6       	ldi	r18, 0x68	; 104
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	f9 01       	movw	r30, r18
    122c:	20 81       	ld	r18, Z
    122e:	23 60       	ori	r18, 0x03	; 3
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
	PCMSK1 |= (1 << PCINT8);
    1234:	8c e6       	ldi	r24, 0x6C	; 108
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	2c e6       	ldi	r18, 0x6C	; 108
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	f9 01       	movw	r30, r18
    123e:	20 81       	ld	r18, Z
    1240:	21 60       	ori	r18, 0x01	; 1
    1242:	fc 01       	movw	r30, r24
    1244:	20 83       	st	Z, r18
	PCMSK0 |= (1 << PCINT7);
    1246:	8b e6       	ldi	r24, 0x6B	; 107
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	2b e6       	ldi	r18, 0x6B	; 107
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	f9 01       	movw	r30, r18
    1250:	20 81       	ld	r18, Z
    1252:	20 68       	ori	r18, 0x80	; 128
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <initBrightnessTimer>:

void initBrightnessTimer() {
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << DDD3); //setting pind3 as output
    1266:	8a e2       	ldi	r24, 0x2A	; 42
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	2a e2       	ldi	r18, 0x2A	; 42
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	f9 01       	movw	r30, r18
    1270:	20 81       	ld	r18, Z
    1272:	28 60       	ori	r18, 0x08	; 8
    1274:	fc 01       	movw	r30, r24
    1276:	20 83       	st	Z, r18
	TCCR2A |= (1 << COM2B1) | (1 << WGM21) | (1 << WGM20); //non-inverting mode for OC2B, fastPWM
    1278:	80 eb       	ldi	r24, 0xB0	; 176
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	20 eb       	ldi	r18, 0xB0	; 176
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	f9 01       	movw	r30, r18
    1282:	20 81       	ld	r18, Z
    1284:	23 62       	ori	r18, 0x23	; 35
    1286:	fc 01       	movw	r30, r24
    1288:	20 83       	st	Z, r18
	TCCR2B |= (1 << CS20); //prescaler 8
    128a:	81 eb       	ldi	r24, 0xB1	; 177
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	21 eb       	ldi	r18, 0xB1	; 177
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	f9 01       	movw	r30, r18
    1294:	20 81       	ld	r18, Z
    1296:	21 60       	ori	r18, 0x01	; 1
    1298:	fc 01       	movw	r30, r24
    129a:	20 83       	st	Z, r18
	OCR2B = 255;
    129c:	84 eb       	ldi	r24, 0xB4	; 180
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	2f ef       	ldi	r18, 0xFF	; 255
    12a2:	fc 01       	movw	r30, r24
    12a4:	20 83       	st	Z, r18
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <setBrightness>:

void setBrightness(uint8_t brightness) {
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	1f 92       	push	r1
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	89 83       	std	Y+1, r24	; 0x01
	OCR2B = brightness;
    12b8:	84 eb       	ldi	r24, 0xB4	; 180
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	29 81       	ldd	r18, Y+1	; 0x01
    12be:	fc 01       	movw	r30, r24
    12c0:	20 83       	st	Z, r18
}
    12c2:	0f 90       	pop	r0
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <showScreenSaver>:

void showScreenSaver() {
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	ed 97       	sbiw	r28, 0x3d	; 61
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
	char line[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
    12e2:	81 e1       	ldi	r24, 0x11	; 17
    12e4:	e3 eb       	ldi	r30, 0xB3	; 179
    12e6:	f1 e0       	ldi	r31, 0x01	; 1
    12e8:	de 01       	movw	r26, r28
    12ea:	13 96       	adiw	r26, 0x03	; 3
    12ec:	01 90       	ld	r0, Z+
    12ee:	0d 92       	st	X+, r0
    12f0:	8a 95       	dec	r24
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <showScreenSaver+0x22>
	char screen_saver[8] = "t(-_-t)";
    12f4:	88 e0       	ldi	r24, 0x08	; 8
    12f6:	e4 ec       	ldi	r30, 0xC4	; 196
    12f8:	f1 e0       	ldi	r31, 0x01	; 1
    12fa:	de 01       	movw	r26, r28
    12fc:	54 96       	adiw	r26, 0x14	; 20
    12fe:	01 90       	ld	r0, Z+
    1300:	0d 92       	st	X+, r0
    1302:	8a 95       	dec	r24
    1304:	e1 f7       	brne	.-8      	; 0x12fe <showScreenSaver+0x34>
	uint8_t i = 0;
    1306:	19 82       	std	Y+1, r1	; 0x01
	uint8_t j = 0;
    1308:	1a 82       	std	Y+2, r1	; 0x02

	if (screen_saver_pos_idx >= 10){
    130a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <screen_saver_pos_idx>
    130e:	8a 30       	cpi	r24, 0x0A	; 10
    1310:	28 f0       	brcs	.+10     	; 0x131c <showScreenSaver+0x52>
		i = screen_saver_pos_idx - 10;
    1312:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <screen_saver_pos_idx>
    1316:	8a 50       	subi	r24, 0x0A	; 10
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <showScreenSaver+0x58>
	} else {
		i = screen_saver_pos_idx;
    131c:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <screen_saver_pos_idx>
    1320:	89 83       	std	Y+1, r24	; 0x01
	}

	for (i; i < strlen(screen_saver) + screen_saver_pos_idx; i++){
    1322:	1a c0       	rjmp	.+52     	; 0x1358 <showScreenSaver+0x8e>
		line[i] = screen_saver[j];
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	2a 81       	ldd	r18, Y+2	; 0x02
    132c:	22 2f       	mov	r18, r18
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	ae 01       	movw	r20, r28
    1332:	4c 5e       	subi	r20, 0xEC	; 236
    1334:	5f 4f       	sbci	r21, 0xFF	; 255
    1336:	24 0f       	add	r18, r20
    1338:	35 1f       	adc	r19, r21
    133a:	f9 01       	movw	r30, r18
    133c:	40 81       	ld	r20, Z
    133e:	9e 01       	movw	r18, r28
    1340:	2d 5f       	subi	r18, 0xFD	; 253
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	82 0f       	add	r24, r18
    1346:	93 1f       	adc	r25, r19
    1348:	fc 01       	movw	r30, r24
    134a:	40 83       	st	Z, r20
		j++;
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	8a 83       	std	Y+2, r24	; 0x02
		i = screen_saver_pos_idx - 10;
	} else {
		i = screen_saver_pos_idx;
	}

	for (i; i < strlen(screen_saver) + screen_saver_pos_idx; i++){
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	8f 5f       	subi	r24, 0xFF	; 255
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	08 2f       	mov	r16, r24
    135c:	10 e0       	ldi	r17, 0x00	; 0
    135e:	ce 01       	movw	r24, r28
    1360:	44 96       	adiw	r24, 0x14	; 20
    1362:	0e 94 94 0a 	call	0x1528	; 0x1528 <strlen>
    1366:	9c 01       	movw	r18, r24
    1368:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <screen_saver_pos_idx>
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	82 0f       	add	r24, r18
    1372:	93 1f       	adc	r25, r19
    1374:	08 17       	cp	r16, r24
    1376:	19 07       	cpc	r17, r25
    1378:	a8 f2       	brcs	.-86     	; 0x1324 <showScreenSaver+0x5a>
		line[i] = screen_saver[j];
		j++;
	}

	if (screen_saver_pos_idx < 10) {
    137a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <screen_saver_pos_idx>
    137e:	8a 30       	cpi	r24, 0x0A	; 10
    1380:	c8 f4       	brcc	.+50     	; 0x13b4 <showScreenSaver+0xea>
		screen_saver_pos_idx++;
    1382:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <screen_saver_pos_idx>
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <screen_saver_pos_idx>
		write_first_line(line, 0);
    138c:	ce 01       	movw	r24, r28
    138e:	03 96       	adiw	r24, 0x03	; 3
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write_first_line>
		char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
    1396:	81 e1       	ldi	r24, 0x11	; 17
    1398:	e3 eb       	ldi	r30, 0xB3	; 179
    139a:	f1 e0       	ldi	r31, 0x01	; 1
    139c:	de 01       	movw	r26, r28
    139e:	5c 96       	adiw	r26, 0x1c	; 28
    13a0:	01 90       	ld	r0, Z+
    13a2:	0d 92       	st	X+, r0
    13a4:	8a 95       	dec	r24
    13a6:	e1 f7       	brne	.-8      	; 0x13a0 <showScreenSaver+0xd6>
		write_second_line(line_2, 0);
    13a8:	ce 01       	movw	r24, r28
    13aa:	4c 96       	adiw	r24, 0x1c	; 28
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_second_line>
    13b2:	27 c0       	rjmp	.+78     	; 0x1402 <showScreenSaver+0x138>
	} else if (screen_saver_pos_idx >= 10 && screen_saver_pos_idx < 20) {
    13b4:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <screen_saver_pos_idx>
    13b8:	8a 30       	cpi	r24, 0x0A	; 10
    13ba:	e8 f0       	brcs	.+58     	; 0x13f6 <showScreenSaver+0x12c>
    13bc:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <screen_saver_pos_idx>
    13c0:	84 31       	cpi	r24, 0x14	; 20
    13c2:	c8 f4       	brcc	.+50     	; 0x13f6 <showScreenSaver+0x12c>
		screen_saver_pos_idx++;
    13c4:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <screen_saver_pos_idx>
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <screen_saver_pos_idx>
		char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
    13ce:	81 e1       	ldi	r24, 0x11	; 17
    13d0:	e3 eb       	ldi	r30, 0xB3	; 179
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	de 01       	movw	r26, r28
    13d6:	9d 96       	adiw	r26, 0x2d	; 45
    13d8:	01 90       	ld	r0, Z+
    13da:	0d 92       	st	X+, r0
    13dc:	8a 95       	dec	r24
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <showScreenSaver+0x10e>
		write_first_line(line_2, 0);
    13e0:	ce 01       	movw	r24, r28
    13e2:	8d 96       	adiw	r24, 0x2d	; 45
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write_first_line>
		write_second_line(line, 0);
    13ea:	ce 01       	movw	r24, r28
    13ec:	03 96       	adiw	r24, 0x03	; 3
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <write_second_line>
	if (screen_saver_pos_idx < 10) {
		screen_saver_pos_idx++;
		write_first_line(line, 0);
		char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
		write_second_line(line_2, 0);
	} else if (screen_saver_pos_idx >= 10 && screen_saver_pos_idx < 20) {
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <showScreenSaver+0x138>
		screen_saver_pos_idx++;
		char line_2[17] = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0};
		write_first_line(line_2, 0);
		write_second_line(line, 0);
	} else if (screen_saver_pos_idx == 20) {
    13f6:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <screen_saver_pos_idx>
    13fa:	84 31       	cpi	r24, 0x14	; 20
    13fc:	11 f4       	brne	.+4      	; 0x1402 <showScreenSaver+0x138>
		screen_saver_pos_idx = 0;
    13fe:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <screen_saver_pos_idx>
	}
}
    1402:	ed 96       	adiw	r28, 0x3d	; 61
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	08 95       	ret

00001418 <update_system>:

void update_system() {
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	switch (ctrl_index) {
    1420:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	f9 f0       	breq	.+62     	; 0x146c <update_system+0x54>
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	1c f4       	brge	.+6      	; 0x143a <update_system+0x22>
    1434:	89 2b       	or	r24, r25
    1436:	39 f0       	breq	.+14     	; 0x1446 <update_system+0x2e>
			break;
		case 3:
			Write_Pot_Meter((255 - (vol_values[vol_index[ctrl_index]])), CS_3);
			break;
		default:
			break;
    1438:	52 c0       	rjmp	.+164    	; 0x14de <update_system+0xc6>
		screen_saver_pos_idx = 0;
	}
}

void update_system() {
	switch (ctrl_index) {
    143a:	82 30       	cpi	r24, 0x02	; 2
    143c:	91 05       	cpc	r25, r1
    143e:	49 f1       	breq	.+82     	; 0x1492 <update_system+0x7a>
    1440:	03 97       	sbiw	r24, 0x03	; 3
    1442:	d1 f1       	breq	.+116    	; 0x14b8 <update_system+0xa0>
			break;
		case 3:
			Write_Pot_Meter((255 - (vol_values[vol_index[ctrl_index]])), CS_3);
			break;
		default:
			break;
    1444:	4c c0       	rjmp	.+152    	; 0x14de <update_system+0xc6>
}

void update_system() {
	switch (ctrl_index) {
		case 0:
			Write_Pot_Meter((255 - (vol_values[vol_index[ctrl_index]])), CS_0);
    1446:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	80 50       	subi	r24, 0x00	; 0
    1450:	9f 4f       	sbci	r25, 0xFF	; 255
    1452:	fc 01       	movw	r30, r24
    1454:	80 81       	ld	r24, Z
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	8b 5f       	subi	r24, 0xFB	; 251
    145c:	9e 4f       	sbci	r25, 0xFE	; 254
    145e:	fc 01       	movw	r30, r24
    1460:	80 81       	ld	r24, Z
    1462:	80 95       	com	r24
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	0e 94 6e 00 	call	0xdc	; 0xdc <Write_Pot_Meter>
			break;
    146a:	39 c0       	rjmp	.+114    	; 0x14de <update_system+0xc6>
		case 1:
			Write_Pot_Meter((255 - (vol_values[vol_index[ctrl_index]])), CS_1);
    146c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	80 50       	subi	r24, 0x00	; 0
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	fc 01       	movw	r30, r24
    147a:	80 81       	ld	r24, Z
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	8b 5f       	subi	r24, 0xFB	; 251
    1482:	9e 4f       	sbci	r25, 0xFE	; 254
    1484:	fc 01       	movw	r30, r24
    1486:	80 81       	ld	r24, Z
    1488:	80 95       	com	r24
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	0e 94 6e 00 	call	0xdc	; 0xdc <Write_Pot_Meter>
			break;
    1490:	26 c0       	rjmp	.+76     	; 0x14de <update_system+0xc6>
		case 2:
			Write_Pot_Meter((255 - (vol_values[vol_index[ctrl_index]])), CS_2);
    1492:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	80 50       	subi	r24, 0x00	; 0
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	fc 01       	movw	r30, r24
    14a0:	80 81       	ld	r24, Z
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	8b 5f       	subi	r24, 0xFB	; 251
    14a8:	9e 4f       	sbci	r25, 0xFE	; 254
    14aa:	fc 01       	movw	r30, r24
    14ac:	80 81       	ld	r24, Z
    14ae:	80 95       	com	r24
    14b0:	62 e0       	ldi	r22, 0x02	; 2
    14b2:	0e 94 6e 00 	call	0xdc	; 0xdc <Write_Pot_Meter>
			break;
    14b6:	13 c0       	rjmp	.+38     	; 0x14de <update_system+0xc6>
		case 3:
			Write_Pot_Meter((255 - (vol_values[vol_index[ctrl_index]])), CS_3);
    14b8:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	80 50       	subi	r24, 0x00	; 0
    14c2:	9f 4f       	sbci	r25, 0xFF	; 255
    14c4:	fc 01       	movw	r30, r24
    14c6:	80 81       	ld	r24, Z
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	8b 5f       	subi	r24, 0xFB	; 251
    14ce:	9e 4f       	sbci	r25, 0xFE	; 254
    14d0:	fc 01       	movw	r30, r24
    14d2:	80 81       	ld	r24, Z
    14d4:	80 95       	com	r24
    14d6:	64 e0       	ldi	r22, 0x04	; 4
    14d8:	0e 94 6e 00 	call	0xdc	; 0xdc <Write_Pot_Meter>
			break;
    14dc:	00 00       	nop
		default:
			break;
	}
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <__udivmodsi4>:
    14e4:	a1 e2       	ldi	r26, 0x21	; 33
    14e6:	1a 2e       	mov	r1, r26
    14e8:	aa 1b       	sub	r26, r26
    14ea:	bb 1b       	sub	r27, r27
    14ec:	fd 01       	movw	r30, r26
    14ee:	0d c0       	rjmp	.+26     	; 0x150a <__udivmodsi4_ep>

000014f0 <__udivmodsi4_loop>:
    14f0:	aa 1f       	adc	r26, r26
    14f2:	bb 1f       	adc	r27, r27
    14f4:	ee 1f       	adc	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	a2 17       	cp	r26, r18
    14fa:	b3 07       	cpc	r27, r19
    14fc:	e4 07       	cpc	r30, r20
    14fe:	f5 07       	cpc	r31, r21
    1500:	20 f0       	brcs	.+8      	; 0x150a <__udivmodsi4_ep>
    1502:	a2 1b       	sub	r26, r18
    1504:	b3 0b       	sbc	r27, r19
    1506:	e4 0b       	sbc	r30, r20
    1508:	f5 0b       	sbc	r31, r21

0000150a <__udivmodsi4_ep>:
    150a:	66 1f       	adc	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	88 1f       	adc	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	1a 94       	dec	r1
    1514:	69 f7       	brne	.-38     	; 0x14f0 <__udivmodsi4_loop>
    1516:	60 95       	com	r22
    1518:	70 95       	com	r23
    151a:	80 95       	com	r24
    151c:	90 95       	com	r25
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	bd 01       	movw	r22, r26
    1524:	cf 01       	movw	r24, r30
    1526:	08 95       	ret

00001528 <strlen>:
    1528:	fc 01       	movw	r30, r24
    152a:	01 90       	ld	r0, Z+
    152c:	00 20       	and	r0, r0
    152e:	e9 f7       	brne	.-6      	; 0x152a <strlen+0x2>
    1530:	80 95       	com	r24
    1532:	90 95       	com	r25
    1534:	8e 0f       	add	r24, r30
    1536:	9f 1f       	adc	r25, r31
    1538:	08 95       	ret

0000153a <sprintf>:
    153a:	ae e0       	ldi	r26, 0x0E	; 14
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e3 ea       	ldi	r30, 0xA3	; 163
    1540:	fa e0       	ldi	r31, 0x0A	; 10
    1542:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__prologue_saves__+0x1c>
    1546:	0d 89       	ldd	r16, Y+21	; 0x15
    1548:	1e 89       	ldd	r17, Y+22	; 0x16
    154a:	86 e0       	ldi	r24, 0x06	; 6
    154c:	8c 83       	std	Y+4, r24	; 0x04
    154e:	1a 83       	std	Y+2, r17	; 0x02
    1550:	09 83       	std	Y+1, r16	; 0x01
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	9f e7       	ldi	r25, 0x7F	; 127
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
    155a:	ae 01       	movw	r20, r28
    155c:	47 5e       	subi	r20, 0xE7	; 231
    155e:	5f 4f       	sbci	r21, 0xFF	; 255
    1560:	6f 89       	ldd	r22, Y+23	; 0x17
    1562:	78 8d       	ldd	r23, Y+24	; 0x18
    1564:	ce 01       	movw	r24, r28
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	0e 94 c0 0a 	call	0x1580	; 0x1580 <vfprintf>
    156c:	2f 81       	ldd	r18, Y+7	; 0x07
    156e:	38 85       	ldd	r19, Y+8	; 0x08
    1570:	f8 01       	movw	r30, r16
    1572:	e2 0f       	add	r30, r18
    1574:	f3 1f       	adc	r31, r19
    1576:	10 82       	st	Z, r1
    1578:	2e 96       	adiw	r28, 0x0e	; 14
    157a:	e4 e0       	ldi	r30, 0x04	; 4
    157c:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__epilogue_restores__+0x1c>

00001580 <vfprintf>:
    1580:	ac e0       	ldi	r26, 0x0C	; 12
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e6 ec       	ldi	r30, 0xC6	; 198
    1586:	fa e0       	ldi	r31, 0x0A	; 10
    1588:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__prologue_saves__>
    158c:	7c 01       	movw	r14, r24
    158e:	6b 01       	movw	r12, r22
    1590:	8a 01       	movw	r16, r20
    1592:	fc 01       	movw	r30, r24
    1594:	17 82       	std	Z+7, r1	; 0x07
    1596:	16 82       	std	Z+6, r1	; 0x06
    1598:	83 81       	ldd	r24, Z+3	; 0x03
    159a:	81 ff       	sbrs	r24, 1
    159c:	bd c1       	rjmp	.+890    	; 0x1918 <vfprintf+0x398>
    159e:	ce 01       	movw	r24, r28
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	4c 01       	movw	r8, r24
    15a4:	f7 01       	movw	r30, r14
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	f6 01       	movw	r30, r12
    15aa:	93 fd       	sbrc	r25, 3
    15ac:	85 91       	lpm	r24, Z+
    15ae:	93 ff       	sbrs	r25, 3
    15b0:	81 91       	ld	r24, Z+
    15b2:	6f 01       	movw	r12, r30
    15b4:	88 23       	and	r24, r24
    15b6:	09 f4       	brne	.+2      	; 0x15ba <vfprintf+0x3a>
    15b8:	ab c1       	rjmp	.+854    	; 0x1910 <vfprintf+0x390>
    15ba:	85 32       	cpi	r24, 0x25	; 37
    15bc:	39 f4       	brne	.+14     	; 0x15cc <vfprintf+0x4c>
    15be:	93 fd       	sbrc	r25, 3
    15c0:	85 91       	lpm	r24, Z+
    15c2:	93 ff       	sbrs	r25, 3
    15c4:	81 91       	ld	r24, Z+
    15c6:	6f 01       	movw	r12, r30
    15c8:	85 32       	cpi	r24, 0x25	; 37
    15ca:	29 f4       	brne	.+10     	; 0x15d6 <vfprintf+0x56>
    15cc:	b7 01       	movw	r22, r14
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    15d4:	e7 cf       	rjmp	.-50     	; 0x15a4 <vfprintf+0x24>
    15d6:	51 2c       	mov	r5, r1
    15d8:	31 2c       	mov	r3, r1
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	20 32       	cpi	r18, 0x20	; 32
    15de:	a0 f4       	brcc	.+40     	; 0x1608 <vfprintf+0x88>
    15e0:	8b 32       	cpi	r24, 0x2B	; 43
    15e2:	69 f0       	breq	.+26     	; 0x15fe <vfprintf+0x7e>
    15e4:	30 f4       	brcc	.+12     	; 0x15f2 <vfprintf+0x72>
    15e6:	80 32       	cpi	r24, 0x20	; 32
    15e8:	59 f0       	breq	.+22     	; 0x1600 <vfprintf+0x80>
    15ea:	83 32       	cpi	r24, 0x23	; 35
    15ec:	69 f4       	brne	.+26     	; 0x1608 <vfprintf+0x88>
    15ee:	20 61       	ori	r18, 0x10	; 16
    15f0:	2c c0       	rjmp	.+88     	; 0x164a <vfprintf+0xca>
    15f2:	8d 32       	cpi	r24, 0x2D	; 45
    15f4:	39 f0       	breq	.+14     	; 0x1604 <vfprintf+0x84>
    15f6:	80 33       	cpi	r24, 0x30	; 48
    15f8:	39 f4       	brne	.+14     	; 0x1608 <vfprintf+0x88>
    15fa:	21 60       	ori	r18, 0x01	; 1
    15fc:	26 c0       	rjmp	.+76     	; 0x164a <vfprintf+0xca>
    15fe:	22 60       	ori	r18, 0x02	; 2
    1600:	24 60       	ori	r18, 0x04	; 4
    1602:	23 c0       	rjmp	.+70     	; 0x164a <vfprintf+0xca>
    1604:	28 60       	ori	r18, 0x08	; 8
    1606:	21 c0       	rjmp	.+66     	; 0x164a <vfprintf+0xca>
    1608:	27 fd       	sbrc	r18, 7
    160a:	27 c0       	rjmp	.+78     	; 0x165a <vfprintf+0xda>
    160c:	30 ed       	ldi	r19, 0xD0	; 208
    160e:	38 0f       	add	r19, r24
    1610:	3a 30       	cpi	r19, 0x0A	; 10
    1612:	78 f4       	brcc	.+30     	; 0x1632 <vfprintf+0xb2>
    1614:	26 ff       	sbrs	r18, 6
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <vfprintf+0xa4>
    1618:	fa e0       	ldi	r31, 0x0A	; 10
    161a:	5f 9e       	mul	r5, r31
    161c:	30 0d       	add	r19, r0
    161e:	11 24       	eor	r1, r1
    1620:	53 2e       	mov	r5, r19
    1622:	13 c0       	rjmp	.+38     	; 0x164a <vfprintf+0xca>
    1624:	8a e0       	ldi	r24, 0x0A	; 10
    1626:	38 9e       	mul	r3, r24
    1628:	30 0d       	add	r19, r0
    162a:	11 24       	eor	r1, r1
    162c:	33 2e       	mov	r3, r19
    162e:	20 62       	ori	r18, 0x20	; 32
    1630:	0c c0       	rjmp	.+24     	; 0x164a <vfprintf+0xca>
    1632:	8e 32       	cpi	r24, 0x2E	; 46
    1634:	21 f4       	brne	.+8      	; 0x163e <vfprintf+0xbe>
    1636:	26 fd       	sbrc	r18, 6
    1638:	6b c1       	rjmp	.+726    	; 0x1910 <vfprintf+0x390>
    163a:	20 64       	ori	r18, 0x40	; 64
    163c:	06 c0       	rjmp	.+12     	; 0x164a <vfprintf+0xca>
    163e:	8c 36       	cpi	r24, 0x6C	; 108
    1640:	11 f4       	brne	.+4      	; 0x1646 <vfprintf+0xc6>
    1642:	20 68       	ori	r18, 0x80	; 128
    1644:	02 c0       	rjmp	.+4      	; 0x164a <vfprintf+0xca>
    1646:	88 36       	cpi	r24, 0x68	; 104
    1648:	41 f4       	brne	.+16     	; 0x165a <vfprintf+0xda>
    164a:	f6 01       	movw	r30, r12
    164c:	93 fd       	sbrc	r25, 3
    164e:	85 91       	lpm	r24, Z+
    1650:	93 ff       	sbrs	r25, 3
    1652:	81 91       	ld	r24, Z+
    1654:	6f 01       	movw	r12, r30
    1656:	81 11       	cpse	r24, r1
    1658:	c1 cf       	rjmp	.-126    	; 0x15dc <vfprintf+0x5c>
    165a:	98 2f       	mov	r25, r24
    165c:	9f 7d       	andi	r25, 0xDF	; 223
    165e:	95 54       	subi	r25, 0x45	; 69
    1660:	93 30       	cpi	r25, 0x03	; 3
    1662:	28 f4       	brcc	.+10     	; 0x166e <vfprintf+0xee>
    1664:	0c 5f       	subi	r16, 0xFC	; 252
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	ff e3       	ldi	r31, 0x3F	; 63
    166a:	f9 83       	std	Y+1, r31	; 0x01
    166c:	0d c0       	rjmp	.+26     	; 0x1688 <vfprintf+0x108>
    166e:	83 36       	cpi	r24, 0x63	; 99
    1670:	31 f0       	breq	.+12     	; 0x167e <vfprintf+0xfe>
    1672:	83 37       	cpi	r24, 0x73	; 115
    1674:	71 f0       	breq	.+28     	; 0x1692 <vfprintf+0x112>
    1676:	83 35       	cpi	r24, 0x53	; 83
    1678:	09 f0       	breq	.+2      	; 0x167c <vfprintf+0xfc>
    167a:	5b c0       	rjmp	.+182    	; 0x1732 <vfprintf+0x1b2>
    167c:	22 c0       	rjmp	.+68     	; 0x16c2 <vfprintf+0x142>
    167e:	f8 01       	movw	r30, r16
    1680:	80 81       	ld	r24, Z
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	0e 5f       	subi	r16, 0xFE	; 254
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	44 24       	eor	r4, r4
    168a:	43 94       	inc	r4
    168c:	51 2c       	mov	r5, r1
    168e:	54 01       	movw	r10, r8
    1690:	15 c0       	rjmp	.+42     	; 0x16bc <vfprintf+0x13c>
    1692:	38 01       	movw	r6, r16
    1694:	f2 e0       	ldi	r31, 0x02	; 2
    1696:	6f 0e       	add	r6, r31
    1698:	71 1c       	adc	r7, r1
    169a:	f8 01       	movw	r30, r16
    169c:	a0 80       	ld	r10, Z
    169e:	b1 80       	ldd	r11, Z+1	; 0x01
    16a0:	26 ff       	sbrs	r18, 6
    16a2:	03 c0       	rjmp	.+6      	; 0x16aa <vfprintf+0x12a>
    16a4:	65 2d       	mov	r22, r5
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <vfprintf+0x12e>
    16aa:	6f ef       	ldi	r22, 0xFF	; 255
    16ac:	7f ef       	ldi	r23, 0xFF	; 255
    16ae:	c5 01       	movw	r24, r10
    16b0:	2c 87       	std	Y+12, r18	; 0x0c
    16b2:	0e 94 9d 0c 	call	0x193a	; 0x193a <strnlen>
    16b6:	2c 01       	movw	r4, r24
    16b8:	83 01       	movw	r16, r6
    16ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    16bc:	2f 77       	andi	r18, 0x7F	; 127
    16be:	22 2e       	mov	r2, r18
    16c0:	17 c0       	rjmp	.+46     	; 0x16f0 <vfprintf+0x170>
    16c2:	38 01       	movw	r6, r16
    16c4:	f2 e0       	ldi	r31, 0x02	; 2
    16c6:	6f 0e       	add	r6, r31
    16c8:	71 1c       	adc	r7, r1
    16ca:	f8 01       	movw	r30, r16
    16cc:	a0 80       	ld	r10, Z
    16ce:	b1 80       	ldd	r11, Z+1	; 0x01
    16d0:	26 ff       	sbrs	r18, 6
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <vfprintf+0x15a>
    16d4:	65 2d       	mov	r22, r5
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <vfprintf+0x15e>
    16da:	6f ef       	ldi	r22, 0xFF	; 255
    16dc:	7f ef       	ldi	r23, 0xFF	; 255
    16de:	c5 01       	movw	r24, r10
    16e0:	2c 87       	std	Y+12, r18	; 0x0c
    16e2:	0e 94 92 0c 	call	0x1924	; 0x1924 <strnlen_P>
    16e6:	2c 01       	movw	r4, r24
    16e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ea:	20 68       	ori	r18, 0x80	; 128
    16ec:	22 2e       	mov	r2, r18
    16ee:	83 01       	movw	r16, r6
    16f0:	23 fc       	sbrc	r2, 3
    16f2:	1b c0       	rjmp	.+54     	; 0x172a <vfprintf+0x1aa>
    16f4:	83 2d       	mov	r24, r3
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	48 16       	cp	r4, r24
    16fa:	59 06       	cpc	r5, r25
    16fc:	b0 f4       	brcc	.+44     	; 0x172a <vfprintf+0x1aa>
    16fe:	b7 01       	movw	r22, r14
    1700:	80 e2       	ldi	r24, 0x20	; 32
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    1708:	3a 94       	dec	r3
    170a:	f4 cf       	rjmp	.-24     	; 0x16f4 <vfprintf+0x174>
    170c:	f5 01       	movw	r30, r10
    170e:	27 fc       	sbrc	r2, 7
    1710:	85 91       	lpm	r24, Z+
    1712:	27 fe       	sbrs	r2, 7
    1714:	81 91       	ld	r24, Z+
    1716:	5f 01       	movw	r10, r30
    1718:	b7 01       	movw	r22, r14
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    1720:	31 10       	cpse	r3, r1
    1722:	3a 94       	dec	r3
    1724:	f1 e0       	ldi	r31, 0x01	; 1
    1726:	4f 1a       	sub	r4, r31
    1728:	51 08       	sbc	r5, r1
    172a:	41 14       	cp	r4, r1
    172c:	51 04       	cpc	r5, r1
    172e:	71 f7       	brne	.-36     	; 0x170c <vfprintf+0x18c>
    1730:	e5 c0       	rjmp	.+458    	; 0x18fc <vfprintf+0x37c>
    1732:	84 36       	cpi	r24, 0x64	; 100
    1734:	11 f0       	breq	.+4      	; 0x173a <vfprintf+0x1ba>
    1736:	89 36       	cpi	r24, 0x69	; 105
    1738:	39 f5       	brne	.+78     	; 0x1788 <vfprintf+0x208>
    173a:	f8 01       	movw	r30, r16
    173c:	27 ff       	sbrs	r18, 7
    173e:	07 c0       	rjmp	.+14     	; 0x174e <vfprintf+0x1ce>
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	0c 5f       	subi	r16, 0xFC	; 252
    174a:	1f 4f       	sbci	r17, 0xFF	; 255
    174c:	08 c0       	rjmp	.+16     	; 0x175e <vfprintf+0x1de>
    174e:	60 81       	ld	r22, Z
    1750:	71 81       	ldd	r23, Z+1	; 0x01
    1752:	07 2e       	mov	r0, r23
    1754:	00 0c       	add	r0, r0
    1756:	88 0b       	sbc	r24, r24
    1758:	99 0b       	sbc	r25, r25
    175a:	0e 5f       	subi	r16, 0xFE	; 254
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	2f 76       	andi	r18, 0x6F	; 111
    1760:	72 2e       	mov	r7, r18
    1762:	97 ff       	sbrs	r25, 7
    1764:	09 c0       	rjmp	.+18     	; 0x1778 <vfprintf+0x1f8>
    1766:	90 95       	com	r25
    1768:	80 95       	com	r24
    176a:	70 95       	com	r23
    176c:	61 95       	neg	r22
    176e:	7f 4f       	sbci	r23, 0xFF	; 255
    1770:	8f 4f       	sbci	r24, 0xFF	; 255
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	20 68       	ori	r18, 0x80	; 128
    1776:	72 2e       	mov	r7, r18
    1778:	2a e0       	ldi	r18, 0x0A	; 10
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	a4 01       	movw	r20, r8
    177e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__ultoa_invert>
    1782:	a8 2e       	mov	r10, r24
    1784:	a8 18       	sub	r10, r8
    1786:	44 c0       	rjmp	.+136    	; 0x1810 <vfprintf+0x290>
    1788:	85 37       	cpi	r24, 0x75	; 117
    178a:	29 f4       	brne	.+10     	; 0x1796 <vfprintf+0x216>
    178c:	2f 7e       	andi	r18, 0xEF	; 239
    178e:	b2 2e       	mov	r11, r18
    1790:	2a e0       	ldi	r18, 0x0A	; 10
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	25 c0       	rjmp	.+74     	; 0x17e0 <vfprintf+0x260>
    1796:	f2 2f       	mov	r31, r18
    1798:	f9 7f       	andi	r31, 0xF9	; 249
    179a:	bf 2e       	mov	r11, r31
    179c:	8f 36       	cpi	r24, 0x6F	; 111
    179e:	c1 f0       	breq	.+48     	; 0x17d0 <vfprintf+0x250>
    17a0:	18 f4       	brcc	.+6      	; 0x17a8 <vfprintf+0x228>
    17a2:	88 35       	cpi	r24, 0x58	; 88
    17a4:	79 f0       	breq	.+30     	; 0x17c4 <vfprintf+0x244>
    17a6:	b4 c0       	rjmp	.+360    	; 0x1910 <vfprintf+0x390>
    17a8:	80 37       	cpi	r24, 0x70	; 112
    17aa:	19 f0       	breq	.+6      	; 0x17b2 <vfprintf+0x232>
    17ac:	88 37       	cpi	r24, 0x78	; 120
    17ae:	21 f0       	breq	.+8      	; 0x17b8 <vfprintf+0x238>
    17b0:	af c0       	rjmp	.+350    	; 0x1910 <vfprintf+0x390>
    17b2:	2f 2f       	mov	r18, r31
    17b4:	20 61       	ori	r18, 0x10	; 16
    17b6:	b2 2e       	mov	r11, r18
    17b8:	b4 fe       	sbrs	r11, 4
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <vfprintf+0x256>
    17bc:	8b 2d       	mov	r24, r11
    17be:	84 60       	ori	r24, 0x04	; 4
    17c0:	b8 2e       	mov	r11, r24
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <vfprintf+0x256>
    17c4:	24 ff       	sbrs	r18, 4
    17c6:	0a c0       	rjmp	.+20     	; 0x17dc <vfprintf+0x25c>
    17c8:	9f 2f       	mov	r25, r31
    17ca:	96 60       	ori	r25, 0x06	; 6
    17cc:	b9 2e       	mov	r11, r25
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <vfprintf+0x25c>
    17d0:	28 e0       	ldi	r18, 0x08	; 8
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	05 c0       	rjmp	.+10     	; 0x17e0 <vfprintf+0x260>
    17d6:	20 e1       	ldi	r18, 0x10	; 16
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <vfprintf+0x260>
    17dc:	20 e1       	ldi	r18, 0x10	; 16
    17de:	32 e0       	ldi	r19, 0x02	; 2
    17e0:	f8 01       	movw	r30, r16
    17e2:	b7 fe       	sbrs	r11, 7
    17e4:	07 c0       	rjmp	.+14     	; 0x17f4 <vfprintf+0x274>
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	0c 5f       	subi	r16, 0xFC	; 252
    17f0:	1f 4f       	sbci	r17, 0xFF	; 255
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0x280>
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 5f       	subi	r16, 0xFE	; 254
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1800:	a4 01       	movw	r20, r8
    1802:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__ultoa_invert>
    1806:	a8 2e       	mov	r10, r24
    1808:	a8 18       	sub	r10, r8
    180a:	fb 2d       	mov	r31, r11
    180c:	ff 77       	andi	r31, 0x7F	; 127
    180e:	7f 2e       	mov	r7, r31
    1810:	76 fe       	sbrs	r7, 6
    1812:	0b c0       	rjmp	.+22     	; 0x182a <vfprintf+0x2aa>
    1814:	37 2d       	mov	r19, r7
    1816:	3e 7f       	andi	r19, 0xFE	; 254
    1818:	a5 14       	cp	r10, r5
    181a:	50 f4       	brcc	.+20     	; 0x1830 <vfprintf+0x2b0>
    181c:	74 fe       	sbrs	r7, 4
    181e:	0a c0       	rjmp	.+20     	; 0x1834 <vfprintf+0x2b4>
    1820:	72 fc       	sbrc	r7, 2
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <vfprintf+0x2b4>
    1824:	37 2d       	mov	r19, r7
    1826:	3e 7e       	andi	r19, 0xEE	; 238
    1828:	05 c0       	rjmp	.+10     	; 0x1834 <vfprintf+0x2b4>
    182a:	ba 2c       	mov	r11, r10
    182c:	37 2d       	mov	r19, r7
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <vfprintf+0x2b6>
    1830:	ba 2c       	mov	r11, r10
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <vfprintf+0x2b6>
    1834:	b5 2c       	mov	r11, r5
    1836:	34 ff       	sbrs	r19, 4
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <vfprintf+0x2d4>
    183a:	fe 01       	movw	r30, r28
    183c:	ea 0d       	add	r30, r10
    183e:	f1 1d       	adc	r31, r1
    1840:	80 81       	ld	r24, Z
    1842:	80 33       	cpi	r24, 0x30	; 48
    1844:	11 f4       	brne	.+4      	; 0x184a <vfprintf+0x2ca>
    1846:	39 7e       	andi	r19, 0xE9	; 233
    1848:	09 c0       	rjmp	.+18     	; 0x185c <vfprintf+0x2dc>
    184a:	32 ff       	sbrs	r19, 2
    184c:	06 c0       	rjmp	.+12     	; 0x185a <vfprintf+0x2da>
    184e:	b3 94       	inc	r11
    1850:	b3 94       	inc	r11
    1852:	04 c0       	rjmp	.+8      	; 0x185c <vfprintf+0x2dc>
    1854:	83 2f       	mov	r24, r19
    1856:	86 78       	andi	r24, 0x86	; 134
    1858:	09 f0       	breq	.+2      	; 0x185c <vfprintf+0x2dc>
    185a:	b3 94       	inc	r11
    185c:	33 fd       	sbrc	r19, 3
    185e:	13 c0       	rjmp	.+38     	; 0x1886 <vfprintf+0x306>
    1860:	30 ff       	sbrs	r19, 0
    1862:	06 c0       	rjmp	.+12     	; 0x1870 <vfprintf+0x2f0>
    1864:	5a 2c       	mov	r5, r10
    1866:	b3 14       	cp	r11, r3
    1868:	18 f4       	brcc	.+6      	; 0x1870 <vfprintf+0x2f0>
    186a:	53 0c       	add	r5, r3
    186c:	5b 18       	sub	r5, r11
    186e:	b3 2c       	mov	r11, r3
    1870:	b3 14       	cp	r11, r3
    1872:	68 f4       	brcc	.+26     	; 0x188e <vfprintf+0x30e>
    1874:	b7 01       	movw	r22, r14
    1876:	80 e2       	ldi	r24, 0x20	; 32
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	3c 87       	std	Y+12, r19	; 0x0c
    187c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    1880:	b3 94       	inc	r11
    1882:	3c 85       	ldd	r19, Y+12	; 0x0c
    1884:	f5 cf       	rjmp	.-22     	; 0x1870 <vfprintf+0x2f0>
    1886:	b3 14       	cp	r11, r3
    1888:	10 f4       	brcc	.+4      	; 0x188e <vfprintf+0x30e>
    188a:	3b 18       	sub	r3, r11
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <vfprintf+0x310>
    188e:	31 2c       	mov	r3, r1
    1890:	34 ff       	sbrs	r19, 4
    1892:	12 c0       	rjmp	.+36     	; 0x18b8 <vfprintf+0x338>
    1894:	b7 01       	movw	r22, r14
    1896:	80 e3       	ldi	r24, 0x30	; 48
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	3c 87       	std	Y+12, r19	; 0x0c
    189c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    18a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    18a2:	32 ff       	sbrs	r19, 2
    18a4:	17 c0       	rjmp	.+46     	; 0x18d4 <vfprintf+0x354>
    18a6:	31 fd       	sbrc	r19, 1
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <vfprintf+0x330>
    18aa:	88 e7       	ldi	r24, 0x78	; 120
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <vfprintf+0x334>
    18b0:	88 e5       	ldi	r24, 0x58	; 88
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	b7 01       	movw	r22, r14
    18b6:	0c c0       	rjmp	.+24     	; 0x18d0 <vfprintf+0x350>
    18b8:	83 2f       	mov	r24, r19
    18ba:	86 78       	andi	r24, 0x86	; 134
    18bc:	59 f0       	breq	.+22     	; 0x18d4 <vfprintf+0x354>
    18be:	31 ff       	sbrs	r19, 1
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <vfprintf+0x346>
    18c2:	8b e2       	ldi	r24, 0x2B	; 43
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <vfprintf+0x348>
    18c6:	80 e2       	ldi	r24, 0x20	; 32
    18c8:	37 fd       	sbrc	r19, 7
    18ca:	8d e2       	ldi	r24, 0x2D	; 45
    18cc:	b7 01       	movw	r22, r14
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    18d4:	a5 14       	cp	r10, r5
    18d6:	38 f4       	brcc	.+14     	; 0x18e6 <vfprintf+0x366>
    18d8:	b7 01       	movw	r22, r14
    18da:	80 e3       	ldi	r24, 0x30	; 48
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    18e2:	5a 94       	dec	r5
    18e4:	f7 cf       	rjmp	.-18     	; 0x18d4 <vfprintf+0x354>
    18e6:	aa 94       	dec	r10
    18e8:	f4 01       	movw	r30, r8
    18ea:	ea 0d       	add	r30, r10
    18ec:	f1 1d       	adc	r31, r1
    18ee:	80 81       	ld	r24, Z
    18f0:	b7 01       	movw	r22, r14
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    18f8:	a1 10       	cpse	r10, r1
    18fa:	f5 cf       	rjmp	.-22     	; 0x18e6 <vfprintf+0x366>
    18fc:	33 20       	and	r3, r3
    18fe:	09 f4       	brne	.+2      	; 0x1902 <vfprintf+0x382>
    1900:	51 ce       	rjmp	.-862    	; 0x15a4 <vfprintf+0x24>
    1902:	b7 01       	movw	r22, r14
    1904:	80 e2       	ldi	r24, 0x20	; 32
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    190c:	3a 94       	dec	r3
    190e:	f6 cf       	rjmp	.-20     	; 0x18fc <vfprintf+0x37c>
    1910:	f7 01       	movw	r30, r14
    1912:	86 81       	ldd	r24, Z+6	; 0x06
    1914:	97 81       	ldd	r25, Z+7	; 0x07
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x39c>
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	9f ef       	ldi	r25, 0xFF	; 255
    191c:	2c 96       	adiw	r28, 0x0c	; 12
    191e:	e2 e1       	ldi	r30, 0x12	; 18
    1920:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__epilogue_restores__>

00001924 <strnlen_P>:
    1924:	fc 01       	movw	r30, r24
    1926:	05 90       	lpm	r0, Z+
    1928:	61 50       	subi	r22, 0x01	; 1
    192a:	70 40       	sbci	r23, 0x00	; 0
    192c:	01 10       	cpse	r0, r1
    192e:	d8 f7       	brcc	.-10     	; 0x1926 <strnlen_P+0x2>
    1930:	80 95       	com	r24
    1932:	90 95       	com	r25
    1934:	8e 0f       	add	r24, r30
    1936:	9f 1f       	adc	r25, r31
    1938:	08 95       	ret

0000193a <strnlen>:
    193a:	fc 01       	movw	r30, r24
    193c:	61 50       	subi	r22, 0x01	; 1
    193e:	70 40       	sbci	r23, 0x00	; 0
    1940:	01 90       	ld	r0, Z+
    1942:	01 10       	cpse	r0, r1
    1944:	d8 f7       	brcc	.-10     	; 0x193c <strnlen+0x2>
    1946:	80 95       	com	r24
    1948:	90 95       	com	r25
    194a:	8e 0f       	add	r24, r30
    194c:	9f 1f       	adc	r25, r31
    194e:	08 95       	ret

00001950 <fputc>:
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	fb 01       	movw	r30, r22
    195a:	23 81       	ldd	r18, Z+3	; 0x03
    195c:	21 fd       	sbrc	r18, 1
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <fputc+0x16>
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	9f ef       	ldi	r25, 0xFF	; 255
    1964:	28 c0       	rjmp	.+80     	; 0x19b6 <fputc+0x66>
    1966:	22 ff       	sbrs	r18, 2
    1968:	16 c0       	rjmp	.+44     	; 0x1996 <fputc+0x46>
    196a:	46 81       	ldd	r20, Z+6	; 0x06
    196c:	57 81       	ldd	r21, Z+7	; 0x07
    196e:	24 81       	ldd	r18, Z+4	; 0x04
    1970:	35 81       	ldd	r19, Z+5	; 0x05
    1972:	42 17       	cp	r20, r18
    1974:	53 07       	cpc	r21, r19
    1976:	44 f4       	brge	.+16     	; 0x1988 <fputc+0x38>
    1978:	a0 81       	ld	r26, Z
    197a:	b1 81       	ldd	r27, Z+1	; 0x01
    197c:	9d 01       	movw	r18, r26
    197e:	2f 5f       	subi	r18, 0xFF	; 255
    1980:	3f 4f       	sbci	r19, 0xFF	; 255
    1982:	31 83       	std	Z+1, r19	; 0x01
    1984:	20 83       	st	Z, r18
    1986:	8c 93       	st	X, r24
    1988:	26 81       	ldd	r18, Z+6	; 0x06
    198a:	37 81       	ldd	r19, Z+7	; 0x07
    198c:	2f 5f       	subi	r18, 0xFF	; 255
    198e:	3f 4f       	sbci	r19, 0xFF	; 255
    1990:	37 83       	std	Z+7, r19	; 0x07
    1992:	26 83       	std	Z+6, r18	; 0x06
    1994:	10 c0       	rjmp	.+32     	; 0x19b6 <fputc+0x66>
    1996:	eb 01       	movw	r28, r22
    1998:	09 2f       	mov	r16, r25
    199a:	18 2f       	mov	r17, r24
    199c:	00 84       	ldd	r0, Z+8	; 0x08
    199e:	f1 85       	ldd	r31, Z+9	; 0x09
    19a0:	e0 2d       	mov	r30, r0
    19a2:	09 95       	icall
    19a4:	89 2b       	or	r24, r25
    19a6:	e1 f6       	brne	.-72     	; 0x1960 <fputc+0x10>
    19a8:	8e 81       	ldd	r24, Y+6	; 0x06
    19aa:	9f 81       	ldd	r25, Y+7	; 0x07
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	9f 83       	std	Y+7, r25	; 0x07
    19b0:	8e 83       	std	Y+6, r24	; 0x06
    19b2:	81 2f       	mov	r24, r17
    19b4:	90 2f       	mov	r25, r16
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	08 95       	ret

000019c0 <__ultoa_invert>:
    19c0:	fa 01       	movw	r30, r20
    19c2:	aa 27       	eor	r26, r26
    19c4:	28 30       	cpi	r18, 0x08	; 8
    19c6:	51 f1       	breq	.+84     	; 0x1a1c <__ultoa_invert+0x5c>
    19c8:	20 31       	cpi	r18, 0x10	; 16
    19ca:	81 f1       	breq	.+96     	; 0x1a2c <__ultoa_invert+0x6c>
    19cc:	e8 94       	clt
    19ce:	6f 93       	push	r22
    19d0:	6e 7f       	andi	r22, 0xFE	; 254
    19d2:	6e 5f       	subi	r22, 0xFE	; 254
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	8f 4f       	sbci	r24, 0xFF	; 255
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	af 4f       	sbci	r26, 0xFF	; 255
    19dc:	b1 e0       	ldi	r27, 0x01	; 1
    19de:	3e d0       	rcall	.+124    	; 0x1a5c <__ultoa_invert+0x9c>
    19e0:	b4 e0       	ldi	r27, 0x04	; 4
    19e2:	3c d0       	rcall	.+120    	; 0x1a5c <__ultoa_invert+0x9c>
    19e4:	67 0f       	add	r22, r23
    19e6:	78 1f       	adc	r23, r24
    19e8:	89 1f       	adc	r24, r25
    19ea:	9a 1f       	adc	r25, r26
    19ec:	a1 1d       	adc	r26, r1
    19ee:	68 0f       	add	r22, r24
    19f0:	79 1f       	adc	r23, r25
    19f2:	8a 1f       	adc	r24, r26
    19f4:	91 1d       	adc	r25, r1
    19f6:	a1 1d       	adc	r26, r1
    19f8:	6a 0f       	add	r22, r26
    19fa:	71 1d       	adc	r23, r1
    19fc:	81 1d       	adc	r24, r1
    19fe:	91 1d       	adc	r25, r1
    1a00:	a1 1d       	adc	r26, r1
    1a02:	20 d0       	rcall	.+64     	; 0x1a44 <__ultoa_invert+0x84>
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <__ultoa_invert+0x48>
    1a06:	68 94       	set
    1a08:	3f 91       	pop	r19
    1a0a:	2a e0       	ldi	r18, 0x0A	; 10
    1a0c:	26 9f       	mul	r18, r22
    1a0e:	11 24       	eor	r1, r1
    1a10:	30 19       	sub	r19, r0
    1a12:	30 5d       	subi	r19, 0xD0	; 208
    1a14:	31 93       	st	Z+, r19
    1a16:	de f6       	brtc	.-74     	; 0x19ce <__ultoa_invert+0xe>
    1a18:	cf 01       	movw	r24, r30
    1a1a:	08 95       	ret
    1a1c:	46 2f       	mov	r20, r22
    1a1e:	47 70       	andi	r20, 0x07	; 7
    1a20:	40 5d       	subi	r20, 0xD0	; 208
    1a22:	41 93       	st	Z+, r20
    1a24:	b3 e0       	ldi	r27, 0x03	; 3
    1a26:	0f d0       	rcall	.+30     	; 0x1a46 <__ultoa_invert+0x86>
    1a28:	c9 f7       	brne	.-14     	; 0x1a1c <__ultoa_invert+0x5c>
    1a2a:	f6 cf       	rjmp	.-20     	; 0x1a18 <__ultoa_invert+0x58>
    1a2c:	46 2f       	mov	r20, r22
    1a2e:	4f 70       	andi	r20, 0x0F	; 15
    1a30:	40 5d       	subi	r20, 0xD0	; 208
    1a32:	4a 33       	cpi	r20, 0x3A	; 58
    1a34:	18 f0       	brcs	.+6      	; 0x1a3c <__ultoa_invert+0x7c>
    1a36:	49 5d       	subi	r20, 0xD9	; 217
    1a38:	31 fd       	sbrc	r19, 1
    1a3a:	40 52       	subi	r20, 0x20	; 32
    1a3c:	41 93       	st	Z+, r20
    1a3e:	02 d0       	rcall	.+4      	; 0x1a44 <__ultoa_invert+0x84>
    1a40:	a9 f7       	brne	.-22     	; 0x1a2c <__ultoa_invert+0x6c>
    1a42:	ea cf       	rjmp	.-44     	; 0x1a18 <__ultoa_invert+0x58>
    1a44:	b4 e0       	ldi	r27, 0x04	; 4
    1a46:	a6 95       	lsr	r26
    1a48:	97 95       	ror	r25
    1a4a:	87 95       	ror	r24
    1a4c:	77 95       	ror	r23
    1a4e:	67 95       	ror	r22
    1a50:	ba 95       	dec	r27
    1a52:	c9 f7       	brne	.-14     	; 0x1a46 <__ultoa_invert+0x86>
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	61 05       	cpc	r22, r1
    1a58:	71 05       	cpc	r23, r1
    1a5a:	08 95       	ret
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	0a 2e       	mov	r0, r26
    1a62:	06 94       	lsr	r0
    1a64:	57 95       	ror	r21
    1a66:	47 95       	ror	r20
    1a68:	37 95       	ror	r19
    1a6a:	27 95       	ror	r18
    1a6c:	ba 95       	dec	r27
    1a6e:	c9 f7       	brne	.-14     	; 0x1a62 <__ultoa_invert+0xa2>
    1a70:	62 0f       	add	r22, r18
    1a72:	73 1f       	adc	r23, r19
    1a74:	84 1f       	adc	r24, r20
    1a76:	95 1f       	adc	r25, r21
    1a78:	a0 1d       	adc	r26, r0
    1a7a:	08 95       	ret

00001a7c <__prologue_saves__>:
    1a7c:	2f 92       	push	r2
    1a7e:	3f 92       	push	r3
    1a80:	4f 92       	push	r4
    1a82:	5f 92       	push	r5
    1a84:	6f 92       	push	r6
    1a86:	7f 92       	push	r7
    1a88:	8f 92       	push	r8
    1a8a:	9f 92       	push	r9
    1a8c:	af 92       	push	r10
    1a8e:	bf 92       	push	r11
    1a90:	cf 92       	push	r12
    1a92:	df 92       	push	r13
    1a94:	ef 92       	push	r14
    1a96:	ff 92       	push	r15
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	ca 1b       	sub	r28, r26
    1aa6:	db 0b       	sbc	r29, r27
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	09 94       	ijmp

00001ab4 <__epilogue_restores__>:
    1ab4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ab6:	39 88       	ldd	r3, Y+17	; 0x11
    1ab8:	48 88       	ldd	r4, Y+16	; 0x10
    1aba:	5f 84       	ldd	r5, Y+15	; 0x0f
    1abc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1abe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ac0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ac2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ac4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ac6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ac8:	c8 84       	ldd	r12, Y+8	; 0x08
    1aca:	df 80       	ldd	r13, Y+7	; 0x07
    1acc:	ee 80       	ldd	r14, Y+6	; 0x06
    1ace:	fd 80       	ldd	r15, Y+5	; 0x05
    1ad0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ad4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ad6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ad8:	ce 0f       	add	r28, r30
    1ada:	d1 1d       	adc	r29, r1
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	ed 01       	movw	r28, r26
    1ae8:	08 95       	ret

00001aea <_exit>:
    1aea:	f8 94       	cli

00001aec <__stop_program>:
    1aec:	ff cf       	rjmp	.-2      	; 0x1aec <__stop_program>
