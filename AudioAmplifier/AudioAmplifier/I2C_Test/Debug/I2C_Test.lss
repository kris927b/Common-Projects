
I2C_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000968  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d0  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bf  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2cInit>:
#include <avr/io.h>
#include "i2cLib.h"

void i2cInit(){
    TWSR &= ~((1 << TWPS0) | (1 << TWPS1)); //prescaler set to 0
  80:	e9 eb       	ldi	r30, 0xB9	; 185
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8c 7f       	andi	r24, 0xFC	; 252
  88:	80 83       	st	Z, r24
    TWBR = 12; //setting the bit rate to 400kHz
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    TWCR |= (1 << TWEN); //i2c enable 
  90:	ec eb       	ldi	r30, 0xBC	; 188
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	84 60       	ori	r24, 0x04	; 4
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <i2cStart>:
}

void i2cStart(){
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); //setting interrupt pin, generating starting condition and enabling i2c
  9c:	84 ea       	ldi	r24, 0xA4	; 164
  9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT))); //waiting for the transmission of start condition to end
  a2:	ec eb       	ldi	r30, 0xBC	; 188
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 23       	and	r24, r24
  aa:	ec f7       	brge	.-6      	; 0xa6 <i2cStart+0xa>
}
  ac:	08 95       	ret

000000ae <i2cStop>:

void i2cStop(){
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); //setting interrupt pin, gen. stopping condition and enabling i2c 
  ae:	84 e9       	ldi	r24, 0x94	; 148
  b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b4:	08 95       	ret

000000b6 <i2cWrite>:
}

void i2cWrite(unsigned char data){
    TWDR = data; //putting data to data register
  b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = (1 << TWINT) | (1 << TWEN); //setting interrupt pin and enabling i2c
  ba:	84 e8       	ldi	r24, 0x84	; 132
  bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1 << TWINT)));
  c0:	ec eb       	ldi	r30, 0xBC	; 188
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 23       	and	r24, r24
  c8:	ec f7       	brge	.-6      	; 0xc4 <i2cWrite+0xe>
}
  ca:	08 95       	ret

000000cc <main>:
#include "std_lib.h"


int main(void)
{
	DDRD |= (1 << DDD3);
  cc:	53 9a       	sbi	0x0a, 3	; 10
	PORTD |= (1 << PORTD3);
  ce:	5b 9a       	sbi	0x0b, 3	; 11
	i2cInit();
  d0:	0e 94 40 00 	call	0x80	; 0x80 <i2cInit>
    /* Replace with your application code */
    i2cStart();
  d4:	0e 94 4e 00 	call	0x9c	; 0x9c <i2cStart>
	i2cWrite(ADDR);
  d8:	8c e7       	ldi	r24, 0x7C	; 124
  da:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x00);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x38);
  e4:	88 e3       	ldi	r24, 0x38	; 56
  e6:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x00);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x39);
  f0:	89 e3       	ldi	r24, 0x39	; 57
  f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x14);
  f6:	84 e1       	ldi	r24, 0x14	; 20
  f8:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x7F);
  fc:	8f e7       	ldi	r24, 0x7F	; 127
  fe:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x50);
 102:	80 e5       	ldi	r24, 0x50	; 80
 104:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x6C);
 108:	8c e6       	ldi	r24, 0x6C	; 108
 10a:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x0C);
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x01);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cStop();
 11a:	0e 94 57 00 	call	0xae	; 0xae <i2cStop>

	i2cStart();
 11e:	0e 94 4e 00 	call	0x9c	; 0x9c <i2cStart>
	i2cWrite(ADDR);
 122:	8c e7       	ldi	r24, 0x7C	; 124
 124:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x00);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x00);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cStop();
 134:	0e 94 57 00 	call	0xae	; 0xae <i2cStop>
	
	i2cStart();
 138:	0e 94 4e 00 	call	0x9c	; 0x9c <i2cStart>
	i2cWrite(ADDR);
 13c:	8c e7       	ldi	r24, 0x7C	; 124
 13e:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x00);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x80);
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cStop();
 14e:	0e 94 57 00 	call	0xae	; 0xae <i2cStop>

	i2cStart();
 152:	0e 94 4e 00 	call	0x9c	; 0x9c <i2cStart>
	i2cWrite(ADDR);
 156:	8c e7       	ldi	r24, 0x7C	; 124
 158:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite(0x40);
 15c:	80 e4       	ldi	r24, 0x40	; 64
 15e:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cWrite('H');
 162:	88 e4       	ldi	r24, 0x48	; 72
 164:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2cWrite>
	i2cStop();
 168:	0e 94 57 00 	call	0xae	; 0xae <i2cStop>
}
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
