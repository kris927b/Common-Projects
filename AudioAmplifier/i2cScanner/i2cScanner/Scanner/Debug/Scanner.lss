
Scanner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00000f4e  00000fe2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000166  008001a6  008001a6  00001088  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a6a9  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002037  00000000  00000000  0000bb99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000218f  00000000  00000000  0000dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af4  00000000  00000000  0000fd60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002336  00000000  00000000  00010854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003daa  00000000  00000000  00012b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  00016934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_16>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_18>
  4c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_19>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  60:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_24>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <__ctors_start>:
  ae:	87 02       	muls	r24, r23
  b0:	46 05       	cpc	r20, r6

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf ef       	ldi	r28, 0xFF	; 255
  b8:	d8 e0       	ldi	r29, 0x08	; 8
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	ee e4       	ldi	r30, 0x4E	; 78
  c6:	ff e0       	ldi	r31, 0x0F	; 15
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
  ca:	05 90       	lpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	a6 3a       	cpi	r26, 0xA6	; 166
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
  d4:	23 e0       	ldi	r18, 0x03	; 3
  d6:	a6 ea       	ldi	r26, 0xA6	; 166
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	ac 30       	cpi	r26, 0x0C	; 12
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>

000000e4 <__do_global_ctors>:
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	c9 e5       	ldi	r28, 0x59	; 89
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <__do_global_ctors+0x10>
  ec:	21 97       	sbiw	r28, 0x01	; 1
  ee:	fe 01       	movw	r30, r28
  f0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__tablejump2__>
  f4:	c7 35       	cpi	r28, 0x57	; 87
  f6:	d1 07       	cpc	r29, r17
  f8:	c9 f7       	brne	.-14     	; 0xec <__do_global_ctors+0x8>
  fa:	0e 94 b5 02 	call	0x56a	; 0x56a <main>
  fe:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <setup>:

 
 
void setup()
{
  Wire.begin();
 106:	8c e4       	ldi	r24, 0x4C	; 76
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	0e 94 1c 05 	call	0xa38	; 0xa38 <_ZN7TwoWire5beginEv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 10e:	26 e0       	ldi	r18, 0x06	; 6
 110:	40 e8       	ldi	r20, 0x80	; 128
 112:	55 e2       	ldi	r21, 0x25	; 37
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	86 ea       	ldi	r24, 0xA6	; 166
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN14HardwareSerial5beginEmh>
 
  Serial.begin(9600);
  while (!Serial);             // Leonardo: wait for serial monitor
  Serial.println("\nI2C Scanner");
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	71 e0       	ldi	r23, 0x01	; 1
 124:	86 ea       	ldi	r24, 0xA6	; 166
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0c 94 0a 03 	jmp	0x614	; 0x614 <_ZN5Print7printlnEPKc>

0000012c <loop>:
}
 
 
void loop()
{
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
  byte error, address;
  int nDevices;
 
  Serial.println("Scanning...");
 132:	6d e0       	ldi	r22, 0x0D	; 13
 134:	71 e0       	ldi	r23, 0x01	; 1
 136:	86 ea       	ldi	r24, 0xA6	; 166
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN5Print7printlnEPKc>
 
  nDevices = 0;
 13e:	00 e0       	ldi	r16, 0x00	; 0
 140:	10 e0       	ldi	r17, 0x00	; 0
  for(address = 1; address < 127; address++ )
 142:	c1 e0       	ldi	r28, 0x01	; 1
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
 144:	6c 2f       	mov	r22, r28
 146:	8c e4       	ldi	r24, 0x4C	; 76
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
 14e:	8c e4       	ldi	r24, 0x4C	; 76
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN7TwoWire15endTransmissionEv>
 
    if (error == 0)
 156:	81 11       	cpse	r24, r1
 158:	1e c0       	rjmp	.+60     	; 0x196 <loop+0x6a>
    {
      Serial.print("I2C device found at address 0x");
 15a:	69 e1       	ldi	r22, 0x19	; 25
 15c:	71 e0       	ldi	r23, 0x01	; 1
 15e:	86 ea       	ldi	r24, 0xA6	; 166
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 04 03 	call	0x608	; 0x608 <_ZN5Print5printEPKc>
      if (address<16)
 166:	c0 31       	cpi	r28, 0x10	; 16
 168:	30 f4       	brcc	.+12     	; 0x176 <loop+0x4a>
        Serial.print("0");
 16a:	68 e3       	ldi	r22, 0x38	; 56
 16c:	71 e0       	ldi	r23, 0x01	; 1
 16e:	86 ea       	ldi	r24, 0xA6	; 166
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 04 03 	call	0x608	; 0x608 <_ZN5Print5printEPKc>
      Serial.print(address,HEX);
 176:	40 e1       	ldi	r20, 0x10	; 16
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	6c 2f       	mov	r22, r28
 17c:	86 ea       	ldi	r24, 0xA6	; 166
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN5Print5printEhi>
      Serial.println("  !");
 184:	6a e3       	ldi	r22, 0x3A	; 58
 186:	71 e0       	ldi	r23, 0x01	; 1
 188:	86 ea       	ldi	r24, 0xA6	; 166
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN5Print7printlnEPKc>
 
      nDevices++;
 190:	0f 5f       	subi	r16, 0xFF	; 255
 192:	1f 4f       	sbci	r17, 0xFF	; 255
 194:	17 c0       	rjmp	.+46     	; 0x1c4 <loop+0x98>
    }
    else if (error==4)
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	a9 f4       	brne	.+42     	; 0x1c4 <loop+0x98>
    {
      Serial.print("Unknown error at address 0x");
 19a:	6e e3       	ldi	r22, 0x3E	; 62
 19c:	71 e0       	ldi	r23, 0x01	; 1
 19e:	86 ea       	ldi	r24, 0xA6	; 166
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 04 03 	call	0x608	; 0x608 <_ZN5Print5printEPKc>
      if (address<16)
 1a6:	c0 31       	cpi	r28, 0x10	; 16
 1a8:	30 f4       	brcc	.+12     	; 0x1b6 <loop+0x8a>
        Serial.print("0");
 1aa:	68 e3       	ldi	r22, 0x38	; 56
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	86 ea       	ldi	r24, 0xA6	; 166
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 04 03 	call	0x608	; 0x608 <_ZN5Print5printEPKc>
      Serial.println(address,HEX);
 1b6:	40 e1       	ldi	r20, 0x10	; 16
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	6c 2f       	mov	r22, r28
 1bc:	86 ea       	ldi	r24, 0xA6	; 166
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 84 03 	call	0x708	; 0x708 <_ZN5Print7printlnEhi>
  int nDevices;
 
  Serial.println("Scanning...");
 
  nDevices = 0;
  for(address = 1; address < 127; address++ )
 1c4:	cf 5f       	subi	r28, 0xFF	; 255
 1c6:	cf 37       	cpi	r28, 0x7F	; 127
 1c8:	09 f0       	breq	.+2      	; 0x1cc <loop+0xa0>
 1ca:	bc cf       	rjmp	.-136    	; 0x144 <loop+0x18>
      if (address<16)
        Serial.print("0");
      Serial.println(address,HEX);
    }    
  }
  if (nDevices == 0)
 1cc:	01 2b       	or	r16, r17
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <loop+0xaa>
    Serial.println("No I2C devices found\n");
 1d0:	6a e5       	ldi	r22, 0x5A	; 90
 1d2:	71 e0       	ldi	r23, 0x01	; 1
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <loop+0xae>
  else
    Serial.println("done\n");
 1d6:	60 e7       	ldi	r22, 0x70	; 112
 1d8:	71 e0       	ldi	r23, 0x01	; 1
 1da:	86 ea       	ldi	r24, 0xA6	; 166
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN5Print7printlnEPKc>
 
  delay(5000);           // wait 5 seconds for next scan
 1e2:	68 e8       	ldi	r22, 0x88	; 136
 1e4:	73 e1       	ldi	r23, 0x13	; 19
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
}
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
  if (nDevices == 0)
    Serial.println("No I2C devices found\n");
  else
    Serial.println("done\n");
 
  delay(5000);           // wait 5 seconds for next scan
 1f0:	0c 94 0a 04 	jmp	0x814	; 0x814 <delay>

000001f4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 1f4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 1f6:	91 8d       	ldd	r25, Z+25	; 0x19
 1f8:	22 8d       	ldd	r18, Z+26	; 0x1a
 1fa:	89 2f       	mov	r24, r25
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	80 5c       	subi	r24, 0xC0	; 192
 200:	9f 4f       	sbci	r25, 0xFF	; 255
 202:	82 1b       	sub	r24, r18
 204:	91 09       	sbc	r25, r1
}
 206:	8f 73       	andi	r24, 0x3F	; 63
 208:	99 27       	eor	r25, r25
 20a:	08 95       	ret

0000020c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 20c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 20e:	91 8d       	ldd	r25, Z+25	; 0x19
 210:	82 8d       	ldd	r24, Z+26	; 0x1a
 212:	98 17       	cp	r25, r24
 214:	31 f0       	breq	.+12     	; 0x222 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 216:	82 8d       	ldd	r24, Z+26	; 0x1a
 218:	e8 0f       	add	r30, r24
 21a:	f1 1d       	adc	r31, r1
 21c:	85 8d       	ldd	r24, Z+29	; 0x1d
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 226:	08 95       	ret

00000228 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 228:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 22a:	91 8d       	ldd	r25, Z+25	; 0x19
 22c:	82 8d       	ldd	r24, Z+26	; 0x1a
 22e:	98 17       	cp	r25, r24
 230:	61 f0       	breq	.+24     	; 0x24a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 232:	82 8d       	ldd	r24, Z+26	; 0x1a
 234:	df 01       	movw	r26, r30
 236:	a8 0f       	add	r26, r24
 238:	b1 1d       	adc	r27, r1
 23a:	5d 96       	adiw	r26, 0x1d	; 29
 23c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 23e:	92 8d       	ldd	r25, Z+26	; 0x1a
 240:	9f 5f       	subi	r25, 0xFF	; 255
 242:	9f 73       	andi	r25, 0x3F	; 63
 244:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 24e:	08 95       	ret

00000250 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 250:	8d e7       	ldi	r24, 0x7D	; 125
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	89 2b       	or	r24, r25
 256:	49 f0       	breq	.+18     	; 0x26a <_Z14serialEventRunv+0x1a>
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	89 2b       	or	r24, r25
 25e:	29 f0       	breq	.+10     	; 0x26a <_Z14serialEventRunv+0x1a>
 260:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z17Serial0_availablev>
 264:	81 11       	cpse	r24, r1
 266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 26a:	08 95       	ret

0000026c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 26c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 26e:	84 8d       	ldd	r24, Z+28	; 0x1c
 270:	df 01       	movw	r26, r30
 272:	a8 0f       	add	r26, r24
 274:	b1 1d       	adc	r27, r1
 276:	a3 5a       	subi	r26, 0xA3	; 163
 278:	bf 4f       	sbci	r27, 0xFF	; 255
 27a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 27c:	84 8d       	ldd	r24, Z+28	; 0x1c
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	8f 73       	andi	r24, 0x3F	; 63
 284:	99 27       	eor	r25, r25
 286:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 288:	a6 89       	ldd	r26, Z+22	; 0x16
 28a:	b7 89       	ldd	r27, Z+23	; 0x17
 28c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 28e:	a0 89       	ldd	r26, Z+16	; 0x10
 290:	b1 89       	ldd	r27, Z+17	; 0x11
 292:	8c 91       	ld	r24, X
 294:	80 64       	ori	r24, 0x40	; 64
 296:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 298:	93 8d       	ldd	r25, Z+27	; 0x1b
 29a:	84 8d       	ldd	r24, Z+28	; 0x1c
 29c:	98 13       	cpse	r25, r24
 29e:	06 c0       	rjmp	.+12     	; 0x2ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 2a0:	02 88       	ldd	r0, Z+18	; 0x12
 2a2:	f3 89       	ldd	r31, Z+19	; 0x13
 2a4:	e0 2d       	mov	r30, r0
 2a6:	80 81       	ld	r24, Z
 2a8:	8f 7d       	andi	r24, 0xDF	; 223
 2aa:	80 83       	st	Z, r24
 2ac:	08 95       	ret

000002ae <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 2b4:	88 8d       	ldd	r24, Y+24	; 0x18
 2b6:	88 23       	and	r24, r24
 2b8:	c9 f0       	breq	.+50     	; 0x2ec <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 2ba:	ea 89       	ldd	r30, Y+18	; 0x12
 2bc:	fb 89       	ldd	r31, Y+19	; 0x13
 2be:	80 81       	ld	r24, Z
 2c0:	85 fd       	sbrc	r24, 5
 2c2:	05 c0       	rjmp	.+10     	; 0x2ce <_ZN14HardwareSerial5flushEv+0x20>
 2c4:	a8 89       	ldd	r26, Y+16	; 0x10
 2c6:	b9 89       	ldd	r27, Y+17	; 0x11
 2c8:	8c 91       	ld	r24, X
 2ca:	86 fd       	sbrc	r24, 6
 2cc:	0f c0       	rjmp	.+30     	; 0x2ec <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	07 fc       	sbrc	r0, 7
 2d2:	f5 cf       	rjmp	.-22     	; 0x2be <_ZN14HardwareSerial5flushEv+0x10>
 2d4:	80 81       	ld	r24, Z
 2d6:	85 ff       	sbrs	r24, 5
 2d8:	f2 cf       	rjmp	.-28     	; 0x2be <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 2da:	a8 89       	ldd	r26, Y+16	; 0x10
 2dc:	b9 89       	ldd	r27, Y+17	; 0x11
 2de:	8c 91       	ld	r24, X
 2e0:	85 ff       	sbrs	r24, 5
 2e2:	ed cf       	rjmp	.-38     	; 0x2be <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 2e4:	ce 01       	movw	r24, r28
 2e6:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2ea:	e7 cf       	rjmp	.-50     	; 0x2ba <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	ec 01       	movw	r28, r24
  _written = true;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 304:	9b 8d       	ldd	r25, Y+27	; 0x1b
 306:	8c 8d       	ldd	r24, Y+28	; 0x1c
 308:	98 13       	cpse	r25, r24
 30a:	05 c0       	rjmp	.+10     	; 0x316 <_ZN14HardwareSerial5writeEh+0x24>
 30c:	e8 89       	ldd	r30, Y+16	; 0x10
 30e:	f9 89       	ldd	r31, Y+17	; 0x11
 310:	80 81       	ld	r24, Z
 312:	85 fd       	sbrc	r24, 5
 314:	24 c0       	rjmp	.+72     	; 0x35e <_ZN14HardwareSerial5writeEh+0x6c>
 316:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 318:	0b 8d       	ldd	r16, Y+27	; 0x1b
 31a:	10 e0       	ldi	r17, 0x00	; 0
 31c:	0f 5f       	subi	r16, 0xFF	; 255
 31e:	1f 4f       	sbci	r17, 0xFF	; 255
 320:	0f 73       	andi	r16, 0x3F	; 63
 322:	11 27       	eor	r17, r17
 324:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 326:	8c 8d       	ldd	r24, Y+28	; 0x1c
 328:	e8 12       	cpse	r14, r24
 32a:	0c c0       	rjmp	.+24     	; 0x344 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	07 fc       	sbrc	r0, 7
 330:	fa cf       	rjmp	.-12     	; 0x326 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 332:	e8 89       	ldd	r30, Y+16	; 0x10
 334:	f9 89       	ldd	r31, Y+17	; 0x11
 336:	80 81       	ld	r24, Z
 338:	85 ff       	sbrs	r24, 5
 33a:	f5 cf       	rjmp	.-22     	; 0x326 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 33c:	ce 01       	movw	r24, r28
 33e:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 342:	f1 cf       	rjmp	.-30     	; 0x326 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 344:	8b 8d       	ldd	r24, Y+27	; 0x1b
 346:	fe 01       	movw	r30, r28
 348:	e8 0f       	add	r30, r24
 34a:	f1 1d       	adc	r31, r1
 34c:	e3 5a       	subi	r30, 0xA3	; 163
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 352:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 354:	ea 89       	ldd	r30, Y+18	; 0x12
 356:	fb 89       	ldd	r31, Y+19	; 0x13
 358:	80 81       	ld	r24, Z
 35a:	80 62       	ori	r24, 0x20	; 32
 35c:	07 c0       	rjmp	.+14     	; 0x36c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 35e:	ee 89       	ldd	r30, Y+22	; 0x16
 360:	ff 89       	ldd	r31, Y+23	; 0x17
 362:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 364:	e8 89       	ldd	r30, Y+16	; 0x10
 366:	f9 89       	ldd	r31, Y+17	; 0x11
 368:	80 81       	ld	r24, Z
 36a:	80 64       	ori	r24, 0x40	; 64
 36c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	08 95       	ret

00000380 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 380:	cf 92       	push	r12
 382:	df 92       	push	r13
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	ec 01       	movw	r28, r24
 390:	6a 01       	movw	r12, r20
 392:	7b 01       	movw	r14, r22
 394:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 396:	e8 89       	ldd	r30, Y+16	; 0x10
 398:	f9 89       	ldd	r31, Y+17	; 0x11
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 39e:	41 15       	cp	r20, r1
 3a0:	51 4e       	sbci	r21, 0xE1	; 225
 3a2:	61 05       	cpc	r22, r1
 3a4:	71 05       	cpc	r23, r1
 3a6:	b1 f0       	breq	.+44     	; 0x3d4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	79 e0       	ldi	r23, 0x09	; 9
 3ac:	8d e3       	ldi	r24, 0x3D	; 61
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	a7 01       	movw	r20, r14
 3b2:	96 01       	movw	r18, r12
 3b4:	0e 94 7d 07 	call	0xefa	; 0xefa <__udivmodsi4>
 3b8:	da 01       	movw	r26, r20
 3ba:	c9 01       	movw	r24, r18
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	a1 09       	sbc	r26, r1
 3c0:	b1 09       	sbc	r27, r1
 3c2:	b6 95       	lsr	r27
 3c4:	a7 95       	ror	r26
 3c6:	97 95       	ror	r25
 3c8:	87 95       	ror	r24
 3ca:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 3cc:	41 15       	cp	r20, r1
 3ce:	80 e1       	ldi	r24, 0x10	; 16
 3d0:	58 07       	cpc	r21, r24
 3d2:	a8 f0       	brcs	.+42     	; 0x3fe <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 3d4:	e8 89       	ldd	r30, Y+16	; 0x10
 3d6:	f9 89       	ldd	r31, Y+17	; 0x11
 3d8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 3da:	60 e8       	ldi	r22, 0x80	; 128
 3dc:	74 e8       	ldi	r23, 0x84	; 132
 3de:	8e e1       	ldi	r24, 0x1E	; 30
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	a7 01       	movw	r20, r14
 3e4:	96 01       	movw	r18, r12
 3e6:	0e 94 7d 07 	call	0xefa	; 0xefa <__udivmodsi4>
 3ea:	ba 01       	movw	r22, r20
 3ec:	a9 01       	movw	r20, r18
 3ee:	41 50       	subi	r20, 0x01	; 1
 3f0:	51 09       	sbc	r21, r1
 3f2:	61 09       	sbc	r22, r1
 3f4:	71 09       	sbc	r23, r1
 3f6:	76 95       	lsr	r23
 3f8:	67 95       	ror	r22
 3fa:	57 95       	ror	r21
 3fc:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 3fe:	ec 85       	ldd	r30, Y+12	; 0x0c
 400:	fd 85       	ldd	r31, Y+13	; 0x0d
 402:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 404:	ee 85       	ldd	r30, Y+14	; 0x0e
 406:	ff 85       	ldd	r31, Y+15	; 0x0f
 408:	40 83       	st	Z, r20

  _written = false;
 40a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 40c:	ec 89       	ldd	r30, Y+20	; 0x14
 40e:	fd 89       	ldd	r31, Y+21	; 0x15
 410:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 412:	ea 89       	ldd	r30, Y+18	; 0x12
 414:	fb 89       	ldd	r31, Y+19	; 0x13
 416:	80 81       	ld	r24, Z
 418:	80 61       	ori	r24, 0x10	; 16
 41a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 41c:	ea 89       	ldd	r30, Y+18	; 0x12
 41e:	fb 89       	ldd	r31, Y+19	; 0x13
 420:	80 81       	ld	r24, Z
 422:	88 60       	ori	r24, 0x08	; 8
 424:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 426:	ea 89       	ldd	r30, Y+18	; 0x12
 428:	fb 89       	ldd	r31, Y+19	; 0x13
 42a:	80 81       	ld	r24, Z
 42c:	80 68       	ori	r24, 0x80	; 128
 42e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 430:	ea 89       	ldd	r30, Y+18	; 0x12
 432:	fb 89       	ldd	r31, Y+19	; 0x13
 434:	80 81       	ld	r24, Z
 436:	8f 7d       	andi	r24, 0xDF	; 223
 438:	80 83       	st	Z, r24
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	df 90       	pop	r13
 446:	cf 90       	pop	r12
 448:	08 95       	ret

0000044a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	2f 93       	push	r18
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 45e:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <__data_end+0x10>
 462:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <__data_end+0x11>
 466:	80 81       	ld	r24, Z
 468:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <__data_end+0x16>
 46c:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <__data_end+0x17>
 470:	82 fd       	sbrc	r24, 2
 472:	12 c0       	rjmp	.+36     	; 0x498 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 474:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 476:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <__data_end+0x19>
 47a:	8f 5f       	subi	r24, 0xFF	; 255
 47c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 47e:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <__data_end+0x1a>
 482:	82 17       	cp	r24, r18
 484:	51 f0       	breq	.+20     	; 0x49a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 486:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <__data_end+0x19>
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	ea 55       	subi	r30, 0x5A	; 90
 48e:	fe 4f       	sbci	r31, 0xFE	; 254
 490:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 492:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <__data_end+0x19>
 496:	01 c0       	rjmp	.+2      	; 0x49a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 498:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	2f 91       	pop	r18
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 4d0:	86 ea       	ldi	r24, 0xA6	; 166
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 4fa:	86 ea       	ldi	r24, 0xA6	; 166
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN14HardwareSerial9availableEv>
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	89 2b       	or	r24, r25
 506:	09 f4       	brne	.+2      	; 0x50a <_Z17Serial0_availablev+0x10>
 508:	20 e0       	ldi	r18, 0x00	; 0
}
 50a:	82 2f       	mov	r24, r18
 50c:	08 95       	ret

0000050e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 50e:	e6 ea       	ldi	r30, 0xA6	; 166
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	13 82       	std	Z+3, r1	; 0x03
 514:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 516:	88 ee       	ldi	r24, 0xE8	; 232
 518:	93 e0       	ldi	r25, 0x03	; 3
 51a:	a0 e0       	ldi	r26, 0x00	; 0
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	84 83       	std	Z+4, r24	; 0x04
 520:	95 83       	std	Z+5, r25	; 0x05
 522:	a6 83       	std	Z+6, r26	; 0x06
 524:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 526:	8a e7       	ldi	r24, 0x7A	; 122
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	91 83       	std	Z+1, r25	; 0x01
 52c:	80 83       	st	Z, r24
 52e:	85 ec       	ldi	r24, 0xC5	; 197
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	95 87       	std	Z+13, r25	; 0x0d
 534:	84 87       	std	Z+12, r24	; 0x0c
 536:	84 ec       	ldi	r24, 0xC4	; 196
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	97 87       	std	Z+15, r25	; 0x0f
 53c:	86 87       	std	Z+14, r24	; 0x0e
 53e:	80 ec       	ldi	r24, 0xC0	; 192
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	91 8b       	std	Z+17, r25	; 0x11
 544:	80 8b       	std	Z+16, r24	; 0x10
 546:	81 ec       	ldi	r24, 0xC1	; 193
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	93 8b       	std	Z+19, r25	; 0x13
 54c:	82 8b       	std	Z+18, r24	; 0x12
 54e:	82 ec       	ldi	r24, 0xC2	; 194
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	95 8b       	std	Z+21, r25	; 0x15
 554:	84 8b       	std	Z+20, r24	; 0x14
 556:	86 ec       	ldi	r24, 0xC6	; 198
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	97 8b       	std	Z+23, r25	; 0x17
 55c:	86 8b       	std	Z+22, r24	; 0x16
 55e:	11 8e       	std	Z+25, r1	; 0x19
 560:	12 8e       	std	Z+26, r1	; 0x1a
 562:	13 8e       	std	Z+27, r1	; 0x1b
 564:	14 8e       	std	Z+28, r1	; 0x1c
 566:	08 95       	ret

00000568 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 568:	08 95       	ret

0000056a <main>:

int main(void)
{
	init();
 56a:	0e 94 46 04 	call	0x88c	; 0x88c <init>

	initVariant();
 56e:	0e 94 b4 02 	call	0x568	; 0x568 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 572:	0e 94 83 00 	call	0x106	; 0x106 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 576:	c8 e2       	ldi	r28, 0x28	; 40
 578:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 57a:	0e 94 96 00 	call	0x12c	; 0x12c <loop>
		if (serialEventRun) serialEventRun();
 57e:	20 97       	sbiw	r28, 0x00	; 0
 580:	e1 f3       	breq	.-8      	; 0x57a <main+0x10>
 582:	0e 94 28 01 	call	0x250	; 0x250 <_Z14serialEventRunv>
 586:	f9 cf       	rjmp	.-14     	; 0x57a <main+0x10>

00000588 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 588:	cf 92       	push	r12
 58a:	df 92       	push	r13
 58c:	ef 92       	push	r14
 58e:	ff 92       	push	r15
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	6c 01       	movw	r12, r24
 59a:	7a 01       	movw	r14, r20
 59c:	8b 01       	movw	r16, r22
 59e:	c0 e0       	ldi	r28, 0x00	; 0
 5a0:	d0 e0       	ldi	r29, 0x00	; 0
 5a2:	ce 15       	cp	r28, r14
 5a4:	df 05       	cpc	r29, r15
 5a6:	89 f0       	breq	.+34     	; 0x5ca <_ZN5Print5writeEPKhj+0x42>
 5a8:	d8 01       	movw	r26, r16
 5aa:	6d 91       	ld	r22, X+
 5ac:	8d 01       	movw	r16, r26
 5ae:	d6 01       	movw	r26, r12
 5b0:	ed 91       	ld	r30, X+
 5b2:	fc 91       	ld	r31, X
 5b4:	01 90       	ld	r0, Z+
 5b6:	f0 81       	ld	r31, Z
 5b8:	e0 2d       	mov	r30, r0
 5ba:	c6 01       	movw	r24, r12
 5bc:	09 95       	icall
 5be:	89 2b       	or	r24, r25
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <_ZN5Print5writeEPKhj+0x3e>
 5c2:	7e 01       	movw	r14, r28
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <_ZN5Print5writeEPKhj+0x42>
 5c6:	21 96       	adiw	r28, 0x01	; 1
 5c8:	ec cf       	rjmp	.-40     	; 0x5a2 <_ZN5Print5writeEPKhj+0x1a>
 5ca:	c7 01       	movw	r24, r14
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	df 90       	pop	r13
 5da:	cf 90       	pop	r12
 5dc:	08 95       	ret

000005de <_ZN5Print5writeEPKc>:
 5de:	61 15       	cp	r22, r1
 5e0:	71 05       	cpc	r23, r1
 5e2:	79 f0       	breq	.+30     	; 0x602 <_ZN5Print5writeEPKc+0x24>
 5e4:	fb 01       	movw	r30, r22
 5e6:	01 90       	ld	r0, Z+
 5e8:	00 20       	and	r0, r0
 5ea:	e9 f7       	brne	.-6      	; 0x5e6 <_ZN5Print5writeEPKc+0x8>
 5ec:	31 97       	sbiw	r30, 0x01	; 1
 5ee:	af 01       	movw	r20, r30
 5f0:	46 1b       	sub	r20, r22
 5f2:	57 0b       	sbc	r21, r23
 5f4:	dc 01       	movw	r26, r24
 5f6:	ed 91       	ld	r30, X+
 5f8:	fc 91       	ld	r31, X
 5fa:	02 80       	ldd	r0, Z+2	; 0x02
 5fc:	f3 81       	ldd	r31, Z+3	; 0x03
 5fe:	e0 2d       	mov	r30, r0
 600:	09 94       	ijmp
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	08 95       	ret

00000608 <_ZN5Print5printEPKc>:
 608:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_ZN5Print5writeEPKc>

0000060c <_ZN5Print7printlnEv>:
 60c:	66 e8       	ldi	r22, 0x86	; 134
 60e:	71 e0       	ldi	r23, 0x01	; 1
 610:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_ZN5Print5writeEPKc>

00000614 <_ZN5Print7printlnEPKc>:
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	ec 01       	movw	r28, r24
 61e:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZN5Print5writeEPKc>
 622:	8c 01       	movw	r16, r24
 624:	ce 01       	movw	r24, r28
 626:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN5Print7printlnEv>
 62a:	80 0f       	add	r24, r16
 62c:	91 1f       	adc	r25, r17
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	08 95       	ret

00000638 <_ZN5Print11printNumberEmh>:
 638:	8f 92       	push	r8
 63a:	9f 92       	push	r9
 63c:	af 92       	push	r10
 63e:	bf 92       	push	r11
 640:	cf 92       	push	r12
 642:	df 92       	push	r13
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
 654:	a1 97       	sbiw	r28, 0x21	; 33
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	7c 01       	movw	r14, r24
 662:	d4 2e       	mov	r13, r20
 664:	c5 2e       	mov	r12, r21
 666:	db 01       	movw	r26, r22
 668:	19 a2       	std	Y+33, r1	; 0x21
 66a:	22 30       	cpi	r18, 0x02	; 2
 66c:	08 f4       	brcc	.+2      	; 0x670 <_ZN5Print11printNumberEmh+0x38>
 66e:	2a e0       	ldi	r18, 0x0A	; 10
 670:	8e 01       	movw	r16, r28
 672:	0f 5d       	subi	r16, 0xDF	; 223
 674:	1f 4f       	sbci	r17, 0xFF	; 255
 676:	82 2e       	mov	r8, r18
 678:	91 2c       	mov	r9, r1
 67a:	a1 2c       	mov	r10, r1
 67c:	b1 2c       	mov	r11, r1
 67e:	6d 2d       	mov	r22, r13
 680:	7c 2d       	mov	r23, r12
 682:	cd 01       	movw	r24, r26
 684:	a5 01       	movw	r20, r10
 686:	94 01       	movw	r18, r8
 688:	0e 94 7d 07 	call	0xefa	; 0xefa <__udivmodsi4>
 68c:	d2 2e       	mov	r13, r18
 68e:	c3 2e       	mov	r12, r19
 690:	da 01       	movw	r26, r20
 692:	01 50       	subi	r16, 0x01	; 1
 694:	11 09       	sbc	r17, r1
 696:	6a 30       	cpi	r22, 0x0A	; 10
 698:	71 05       	cpc	r23, r1
 69a:	81 05       	cpc	r24, r1
 69c:	91 05       	cpc	r25, r1
 69e:	10 f4       	brcc	.+4      	; 0x6a4 <_ZN5Print11printNumberEmh+0x6c>
 6a0:	60 5d       	subi	r22, 0xD0	; 208
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <_ZN5Print11printNumberEmh+0x6e>
 6a4:	69 5c       	subi	r22, 0xC9	; 201
 6a6:	f8 01       	movw	r30, r16
 6a8:	60 83       	st	Z, r22
 6aa:	23 2b       	or	r18, r19
 6ac:	24 2b       	or	r18, r20
 6ae:	25 2b       	or	r18, r21
 6b0:	31 f7       	brne	.-52     	; 0x67e <_ZN5Print11printNumberEmh+0x46>
 6b2:	b8 01       	movw	r22, r16
 6b4:	c7 01       	movw	r24, r14
 6b6:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZN5Print5writeEPKc>
 6ba:	a1 96       	adiw	r28, 0x21	; 33
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	f8 94       	cli
 6c0:	de bf       	out	0x3e, r29	; 62
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	cd bf       	out	0x3d, r28	; 61
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	df 90       	pop	r13
 6d4:	cf 90       	pop	r12
 6d6:	bf 90       	pop	r11
 6d8:	af 90       	pop	r10
 6da:	9f 90       	pop	r9
 6dc:	8f 90       	pop	r8
 6de:	08 95       	ret

000006e0 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 6e0:	21 15       	cp	r18, r1
 6e2:	31 05       	cpc	r19, r1
 6e4:	41 f4       	brne	.+16     	; 0x6f6 <_ZN5Print5printEmi+0x16>
 6e6:	dc 01       	movw	r26, r24
 6e8:	ed 91       	ld	r30, X+
 6ea:	fc 91       	ld	r31, X
 6ec:	01 90       	ld	r0, Z+
 6ee:	f0 81       	ld	r31, Z
 6f0:	e0 2d       	mov	r30, r0
 6f2:	64 2f       	mov	r22, r20
 6f4:	09 94       	ijmp
  else return printNumber(n, base);
 6f6:	0c 94 1c 03 	jmp	0x638	; 0x638 <_ZN5Print11printNumberEmh>

000006fa <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
 6fa:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
 6fc:	46 2f       	mov	r20, r22
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <_ZN5Print5printEmi>

00000708 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 708:	0f 93       	push	r16
 70a:	1f 93       	push	r17
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	ec 01       	movw	r28, r24
 712:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 714:	46 2f       	mov	r20, r22
 716:	50 e0       	ldi	r21, 0x00	; 0
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_ZN5Print5printEmi>
 720:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 722:	ce 01       	movw	r24, r28
 724:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN5Print7printlnEv>
  return n;
}
 728:	80 0f       	add	r24, r16
 72a:	91 1f       	adc	r25, r17
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	08 95       	ret

00000736 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 736:	1f 92       	push	r1
 738:	0f 92       	push	r0
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	0f 92       	push	r0
 73e:	11 24       	eor	r1, r1
 740:	2f 93       	push	r18
 742:	3f 93       	push	r19
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
 748:	af 93       	push	r26
 74a:	bf 93       	push	r27
 74c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <timer0_millis>
 750:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <timer0_millis+0x1>
 754:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <timer0_millis+0x2>
 758:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <timer0_millis+0x3>
 75c:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <timer0_fract>
 760:	23 e0       	ldi	r18, 0x03	; 3
 762:	23 0f       	add	r18, r19
 764:	2d 37       	cpi	r18, 0x7D	; 125
 766:	20 f4       	brcc	.+8      	; 0x770 <__vector_16+0x3a>
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	a1 1d       	adc	r26, r1
 76c:	b1 1d       	adc	r27, r1
 76e:	05 c0       	rjmp	.+10     	; 0x77a <__vector_16+0x44>
 770:	26 e8       	ldi	r18, 0x86	; 134
 772:	23 0f       	add	r18, r19
 774:	02 96       	adiw	r24, 0x02	; 2
 776:	a1 1d       	adc	r26, r1
 778:	b1 1d       	adc	r27, r1
 77a:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <timer0_fract>
 77e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <timer0_millis>
 782:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <timer0_millis+0x1>
 786:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <timer0_millis+0x2>
 78a:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <timer0_millis+0x3>
 78e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <timer0_overflow_count>
 792:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <timer0_overflow_count+0x1>
 796:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <timer0_overflow_count+0x2>
 79a:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <timer0_overflow_count+0x3>
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	a1 1d       	adc	r26, r1
 7a2:	b1 1d       	adc	r27, r1
 7a4:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <timer0_overflow_count>
 7a8:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <timer0_overflow_count+0x1>
 7ac:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <timer0_overflow_count+0x2>
 7b0:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <timer0_overflow_count+0x3>
 7b4:	bf 91       	pop	r27
 7b6:	af 91       	pop	r26
 7b8:	9f 91       	pop	r25
 7ba:	8f 91       	pop	r24
 7bc:	3f 91       	pop	r19
 7be:	2f 91       	pop	r18
 7c0:	0f 90       	pop	r0
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	0f 90       	pop	r0
 7c6:	1f 90       	pop	r1
 7c8:	18 95       	reti

000007ca <micros>:
 7ca:	3f b7       	in	r19, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <timer0_overflow_count>
 7d2:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <timer0_overflow_count+0x1>
 7d6:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <timer0_overflow_count+0x2>
 7da:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <timer0_overflow_count+0x3>
 7de:	26 b5       	in	r18, 0x26	; 38
 7e0:	a8 9b       	sbis	0x15, 0	; 21
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <micros+0x24>
 7e4:	2f 3f       	cpi	r18, 0xFF	; 255
 7e6:	19 f0       	breq	.+6      	; 0x7ee <micros+0x24>
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	a1 1d       	adc	r26, r1
 7ec:	b1 1d       	adc	r27, r1
 7ee:	3f bf       	out	0x3f, r19	; 63
 7f0:	ba 2f       	mov	r27, r26
 7f2:	a9 2f       	mov	r26, r25
 7f4:	98 2f       	mov	r25, r24
 7f6:	88 27       	eor	r24, r24
 7f8:	82 0f       	add	r24, r18
 7fa:	91 1d       	adc	r25, r1
 7fc:	a1 1d       	adc	r26, r1
 7fe:	b1 1d       	adc	r27, r1
 800:	bc 01       	movw	r22, r24
 802:	cd 01       	movw	r24, r26
 804:	42 e0       	ldi	r20, 0x02	; 2
 806:	66 0f       	add	r22, r22
 808:	77 1f       	adc	r23, r23
 80a:	88 1f       	adc	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	4a 95       	dec	r20
 810:	d1 f7       	brne	.-12     	; 0x806 <micros+0x3c>
 812:	08 95       	ret

00000814 <delay>:
 814:	8f 92       	push	r8
 816:	9f 92       	push	r9
 818:	af 92       	push	r10
 81a:	bf 92       	push	r11
 81c:	cf 92       	push	r12
 81e:	df 92       	push	r13
 820:	ef 92       	push	r14
 822:	ff 92       	push	r15
 824:	6b 01       	movw	r12, r22
 826:	7c 01       	movw	r14, r24
 828:	0e 94 e5 03 	call	0x7ca	; 0x7ca <micros>
 82c:	4b 01       	movw	r8, r22
 82e:	5c 01       	movw	r10, r24
 830:	c1 14       	cp	r12, r1
 832:	d1 04       	cpc	r13, r1
 834:	e1 04       	cpc	r14, r1
 836:	f1 04       	cpc	r15, r1
 838:	01 f1       	breq	.+64     	; 0x87a <delay+0x66>
 83a:	0e 94 4a 05 	call	0xa94	; 0xa94 <yield>
 83e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <micros>
 842:	dc 01       	movw	r26, r24
 844:	cb 01       	movw	r24, r22
 846:	88 19       	sub	r24, r8
 848:	99 09       	sbc	r25, r9
 84a:	aa 09       	sbc	r26, r10
 84c:	bb 09       	sbc	r27, r11
 84e:	88 3e       	cpi	r24, 0xE8	; 232
 850:	93 40       	sbci	r25, 0x03	; 3
 852:	a1 05       	cpc	r26, r1
 854:	b1 05       	cpc	r27, r1
 856:	60 f3       	brcs	.-40     	; 0x830 <delay+0x1c>
 858:	21 e0       	ldi	r18, 0x01	; 1
 85a:	c2 1a       	sub	r12, r18
 85c:	d1 08       	sbc	r13, r1
 85e:	e1 08       	sbc	r14, r1
 860:	f1 08       	sbc	r15, r1
 862:	88 ee       	ldi	r24, 0xE8	; 232
 864:	88 0e       	add	r8, r24
 866:	83 e0       	ldi	r24, 0x03	; 3
 868:	98 1e       	adc	r9, r24
 86a:	a1 1c       	adc	r10, r1
 86c:	b1 1c       	adc	r11, r1
 86e:	c1 14       	cp	r12, r1
 870:	d1 04       	cpc	r13, r1
 872:	e1 04       	cpc	r14, r1
 874:	f1 04       	cpc	r15, r1
 876:	19 f7       	brne	.-58     	; 0x83e <delay+0x2a>
 878:	db cf       	rjmp	.-74     	; 0x830 <delay+0x1c>
 87a:	ff 90       	pop	r15
 87c:	ef 90       	pop	r14
 87e:	df 90       	pop	r13
 880:	cf 90       	pop	r12
 882:	bf 90       	pop	r11
 884:	af 90       	pop	r10
 886:	9f 90       	pop	r9
 888:	8f 90       	pop	r8
 88a:	08 95       	ret

0000088c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 88c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 88e:	84 b5       	in	r24, 0x24	; 36
 890:	82 60       	ori	r24, 0x02	; 2
 892:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 894:	84 b5       	in	r24, 0x24	; 36
 896:	81 60       	ori	r24, 0x01	; 1
 898:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 89a:	85 b5       	in	r24, 0x25	; 37
 89c:	82 60       	ori	r24, 0x02	; 2
 89e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 8a0:	85 b5       	in	r24, 0x25	; 37
 8a2:	81 60       	ori	r24, 0x01	; 1
 8a4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 8a6:	ee e6       	ldi	r30, 0x6E	; 110
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	80 81       	ld	r24, Z
 8ac:	81 60       	ori	r24, 0x01	; 1
 8ae:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8b0:	e1 e8       	ldi	r30, 0x81	; 129
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8b6:	80 81       	ld	r24, Z
 8b8:	82 60       	ori	r24, 0x02	; 2
 8ba:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8bc:	80 81       	ld	r24, Z
 8be:	81 60       	ori	r24, 0x01	; 1
 8c0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 8c2:	e0 e8       	ldi	r30, 0x80	; 128
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	81 60       	ori	r24, 0x01	; 1
 8ca:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 8cc:	e1 eb       	ldi	r30, 0xB1	; 177
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	84 60       	ori	r24, 0x04	; 4
 8d4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 8d6:	e0 eb       	ldi	r30, 0xB0	; 176
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	81 60       	ori	r24, 0x01	; 1
 8de:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 8e0:	ea e7       	ldi	r30, 0x7A	; 122
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	84 60       	ori	r24, 0x04	; 4
 8e8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 8ea:	80 81       	ld	r24, Z
 8ec:	82 60       	ori	r24, 0x02	; 2
 8ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 8f0:	80 81       	ld	r24, Z
 8f2:	81 60       	ori	r24, 0x01	; 1
 8f4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 8f6:	80 81       	ld	r24, Z
 8f8:	80 68       	ori	r24, 0x80	; 128
 8fa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 8fc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 900:	08 95       	ret

00000902 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
 902:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <_ZN7TwoWire14rxBufferLengthE>
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <_ZN7TwoWire13rxBufferIndexE>
 90c:	82 1b       	sub	r24, r18
 90e:	91 09       	sbc	r25, r1
 910:	08 95       	ret

00000912 <_ZN7TwoWire4readEv>:
 912:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <_ZN7TwoWire13rxBufferIndexE>
 916:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <_ZN7TwoWire14rxBufferLengthE>
 91a:	98 17       	cp	r25, r24
 91c:	50 f4       	brcc	.+20     	; 0x932 <_ZN7TwoWire4readEv+0x20>
 91e:	e9 2f       	mov	r30, r25
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	e2 58       	subi	r30, 0x82	; 130
 924:	fd 4f       	sbci	r31, 0xFD	; 253
 926:	20 81       	ld	r18, Z
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	9f 5f       	subi	r25, 0xFF	; 255
 92c:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <_ZN7TwoWire13rxBufferIndexE>
 930:	02 c0       	rjmp	.+4      	; 0x936 <_ZN7TwoWire4readEv+0x24>
 932:	2f ef       	ldi	r18, 0xFF	; 255
 934:	3f ef       	ldi	r19, 0xFF	; 255
 936:	c9 01       	movw	r24, r18
 938:	08 95       	ret

0000093a <_ZN7TwoWire4peekEv>:
 93a:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <_ZN7TwoWire13rxBufferIndexE>
 93e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <_ZN7TwoWire14rxBufferLengthE>
 942:	e8 17       	cp	r30, r24
 944:	30 f4       	brcc	.+12     	; 0x952 <_ZN7TwoWire4peekEv+0x18>
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	e2 58       	subi	r30, 0x82	; 130
 94a:	fd 4f       	sbci	r31, 0xFD	; 253
 94c:	80 81       	ld	r24, Z
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	08 95       	ret
 952:	8f ef       	ldi	r24, 0xFF	; 255
 954:	9f ef       	ldi	r25, 0xFF	; 255
 956:	08 95       	ret

00000958 <_ZN7TwoWire5flushEv>:
 958:	08 95       	ret

0000095a <_ZN7TwoWire5writeEPKhj>:
 95a:	cf 92       	push	r12
 95c:	df 92       	push	r13
 95e:	ef 92       	push	r14
 960:	ff 92       	push	r15
 962:	0f 93       	push	r16
 964:	1f 93       	push	r17
 966:	cf 93       	push	r28
 968:	df 93       	push	r29
 96a:	7c 01       	movw	r14, r24
 96c:	26 2f       	mov	r18, r22
 96e:	97 2f       	mov	r25, r23
 970:	8a 01       	movw	r16, r20
 972:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN7TwoWire12transmittingE>
 976:	88 23       	and	r24, r24
 978:	91 f0       	breq	.+36     	; 0x99e <_ZN7TwoWire5writeEPKhj+0x44>
 97a:	c6 2f       	mov	r28, r22
 97c:	d7 2f       	mov	r29, r23
 97e:	6e 01       	movw	r12, r28
 980:	c4 0e       	add	r12, r20
 982:	d5 1e       	adc	r13, r21
 984:	cc 15       	cp	r28, r12
 986:	dd 05       	cpc	r29, r13
 988:	71 f0       	breq	.+28     	; 0x9a6 <_ZN7TwoWire5writeEPKhj+0x4c>
 98a:	69 91       	ld	r22, Y+
 98c:	d7 01       	movw	r26, r14
 98e:	ed 91       	ld	r30, X+
 990:	fc 91       	ld	r31, X
 992:	01 90       	ld	r0, Z+
 994:	f0 81       	ld	r31, Z
 996:	e0 2d       	mov	r30, r0
 998:	c7 01       	movw	r24, r14
 99a:	09 95       	icall
 99c:	f3 cf       	rjmp	.-26     	; 0x984 <_ZN7TwoWire5writeEPKhj+0x2a>
 99e:	64 2f       	mov	r22, r20
 9a0:	82 2f       	mov	r24, r18
 9a2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_transmit>
 9a6:	c8 01       	movw	r24, r16
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	1f 91       	pop	r17
 9ae:	0f 91       	pop	r16
 9b0:	ff 90       	pop	r15
 9b2:	ef 90       	pop	r14
 9b4:	df 90       	pop	r13
 9b6:	cf 90       	pop	r12
 9b8:	08 95       	ret

000009ba <_ZN7TwoWire5writeEh>:
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	1f 92       	push	r1
 9c0:	cd b7       	in	r28, 0x3d	; 61
 9c2:	de b7       	in	r29, 0x3e	; 62
 9c4:	69 83       	std	Y+1, r22	; 0x01
 9c6:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <_ZN7TwoWire12transmittingE>
 9ca:	22 23       	and	r18, r18
 9cc:	d1 f0       	breq	.+52     	; 0xa02 <_ZN7TwoWire5writeEh+0x48>
 9ce:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <_ZN7TwoWire14txBufferLengthE>
 9d2:	20 32       	cpi	r18, 0x20	; 32
 9d4:	40 f0       	brcs	.+16     	; 0x9e6 <_ZN7TwoWire5writeEh+0x2c>
 9d6:	21 e0       	ldi	r18, 0x01	; 1
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	fc 01       	movw	r30, r24
 9dc:	33 83       	std	Z+3, r19	; 0x03
 9de:	22 83       	std	Z+2, r18	; 0x02
 9e0:	80 e0       	ldi	r24, 0x00	; 0
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	15 c0       	rjmp	.+42     	; 0xa10 <_ZN7TwoWire5writeEh+0x56>
 9e6:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <_ZN7TwoWire13txBufferIndexE>
 9ea:	e8 2f       	mov	r30, r24
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	e5 5a       	subi	r30, 0xA5	; 165
 9f0:	fd 4f       	sbci	r31, 0xFD	; 253
 9f2:	99 81       	ldd	r25, Y+1	; 0x01
 9f4:	90 83       	st	Z, r25
 9f6:	8f 5f       	subi	r24, 0xFF	; 255
 9f8:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <_ZN7TwoWire13txBufferIndexE>
 9fc:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <_ZN7TwoWire14txBufferLengthE>
 a00:	05 c0       	rjmp	.+10     	; 0xa0c <_ZN7TwoWire5writeEh+0x52>
 a02:	61 e0       	ldi	r22, 0x01	; 1
 a04:	ce 01       	movw	r24, r28
 a06:	01 96       	adiw	r24, 0x01	; 1
 a08:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_transmit>
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0f 90       	pop	r0
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	08 95       	ret

00000a18 <_ZN7TwoWireC1Ev>:
 a18:	fc 01       	movw	r30, r24
 a1a:	13 82       	std	Z+3, r1	; 0x03
 a1c:	12 82       	std	Z+2, r1	; 0x02
 a1e:	88 ee       	ldi	r24, 0xE8	; 232
 a20:	93 e0       	ldi	r25, 0x03	; 3
 a22:	a0 e0       	ldi	r26, 0x00	; 0
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	84 83       	std	Z+4, r24	; 0x04
 a28:	95 83       	std	Z+5, r25	; 0x05
 a2a:	a6 83       	std	Z+6, r26	; 0x06
 a2c:	b7 83       	std	Z+7, r27	; 0x07
 a2e:	89 e9       	ldi	r24, 0x99	; 153
 a30:	91 e0       	ldi	r25, 0x01	; 1
 a32:	91 83       	std	Z+1, r25	; 0x01
 a34:	80 83       	st	Z, r24
 a36:	08 95       	ret

00000a38 <_ZN7TwoWire5beginEv>:
 a38:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <_ZN7TwoWire13rxBufferIndexE>
 a3c:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <_ZN7TwoWire14rxBufferLengthE>
 a40:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <_ZN7TwoWire13txBufferIndexE>
 a44:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <_ZN7TwoWire14txBufferLengthE>
 a48:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <twi_init>

00000a4c <_ZN7TwoWire17beginTransmissionEh>:
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <_ZN7TwoWire12transmittingE>
 a52:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <_ZN7TwoWire9txAddressE>
 a56:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <_ZN7TwoWire13txBufferIndexE>
 a5a:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <_ZN7TwoWire14txBufferLengthE>
 a5e:	08 95       	ret

00000a60 <_ZN7TwoWire15endTransmissionEh>:
 a60:	0f 93       	push	r16
 a62:	06 2f       	mov	r16, r22
 a64:	21 e0       	ldi	r18, 0x01	; 1
 a66:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <_ZN7TwoWire14txBufferLengthE>
 a6a:	6b e5       	ldi	r22, 0x5B	; 91
 a6c:	72 e0       	ldi	r23, 0x02	; 2
 a6e:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <_ZN7TwoWire9txAddressE>
 a72:	0e 94 69 05 	call	0xad2	; 0xad2 <twi_writeTo>
 a76:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <_ZN7TwoWire13txBufferIndexE>
 a7a:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <_ZN7TwoWire14txBufferLengthE>
 a7e:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZN7TwoWire12transmittingE>
 a82:	0f 91       	pop	r16
 a84:	08 95       	ret

00000a86 <_ZN7TwoWire15endTransmissionEv>:
 a86:	61 e0       	ldi	r22, 0x01	; 1
 a88:	0c 94 30 05 	jmp	0xa60	; 0xa60 <_ZN7TwoWire15endTransmissionEh>

00000a8c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
 a8c:	8c e4       	ldi	r24, 0x4C	; 76
 a8e:	92 e0       	ldi	r25, 0x02	; 2
 a90:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <_ZN7TwoWireC1Ev>

00000a94 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 a94:	08 95       	ret

00000a96 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 a96:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <twi_state>
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <twi_sendStop>
 aa0:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <twi_inRepStart>
 aa4:	61 e0       	ldi	r22, 0x01	; 1
 aa6:	82 e1       	ldi	r24, 0x12	; 18
 aa8:	0e 94 4d 07 	call	0xe9a	; 0xe9a <digitalWrite>
 aac:	61 e0       	ldi	r22, 0x01	; 1
 aae:	83 e1       	ldi	r24, 0x13	; 19
 ab0:	0e 94 4d 07 	call	0xe9a	; 0xe9a <digitalWrite>
 ab4:	e9 eb       	ldi	r30, 0xB9	; 185
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	80 81       	ld	r24, Z
 aba:	8e 7f       	andi	r24, 0xFE	; 254
 abc:	80 83       	st	Z, r24
 abe:	80 81       	ld	r24, Z
 ac0:	8d 7f       	andi	r24, 0xFD	; 253
 ac2:	80 83       	st	Z, r24
 ac4:	88 e4       	ldi	r24, 0x48	; 72
 ac6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 aca:	85 e4       	ldi	r24, 0x45	; 69
 acc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 ad0:	08 95       	ret

00000ad2 <twi_writeTo>:
 ad2:	0f 93       	push	r16
 ad4:	41 32       	cpi	r20, 0x21	; 33
 ad6:	08 f0       	brcs	.+2      	; 0xada <twi_writeTo+0x8>
 ad8:	4a c0       	rjmp	.+148    	; 0xb6e <twi_writeTo+0x9c>
 ada:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <twi_state>
 ade:	91 11       	cpse	r25, r1
 ae0:	fc cf       	rjmp	.-8      	; 0xada <twi_writeTo+0x8>
 ae2:	32 e0       	ldi	r19, 0x02	; 2
 ae4:	30 93 0b 03 	sts	0x030B, r19	; 0x80030b <twi_state>
 ae8:	00 93 09 03 	sts	0x0309, r16	; 0x800309 <twi_sendStop>
 aec:	3f ef       	ldi	r19, 0xFF	; 255
 aee:	30 93 9e 02 	sts	0x029E, r19	; 0x80029e <twi_error>
 af2:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi_masterBufferIndex>
 af6:	40 93 e2 02 	sts	0x02E2, r20	; 0x8002e2 <twi_masterBufferLength>
 afa:	fb 01       	movw	r30, r22
 afc:	64 ee       	ldi	r22, 0xE4	; 228
 afe:	72 e0       	ldi	r23, 0x02	; 2
 b00:	db 01       	movw	r26, r22
 b02:	3a 2f       	mov	r19, r26
 b04:	36 1b       	sub	r19, r22
 b06:	34 17       	cp	r19, r20
 b08:	18 f4       	brcc	.+6      	; 0xb10 <twi_writeTo+0x3e>
 b0a:	31 91       	ld	r19, Z+
 b0c:	3d 93       	st	X+, r19
 b0e:	f9 cf       	rjmp	.-14     	; 0xb02 <twi_writeTo+0x30>
 b10:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <twi_slarw>
 b14:	30 91 0a 03 	lds	r19, 0x030A	; 0x80030a <twi_slarw>
 b18:	88 0f       	add	r24, r24
 b1a:	83 2b       	or	r24, r19
 b1c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <twi_slarw>
 b20:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <twi_inRepStart>
 b24:	81 30       	cpi	r24, 0x01	; 1
 b26:	61 f4       	brne	.+24     	; 0xb40 <twi_writeTo+0x6e>
 b28:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <twi_inRepStart>
 b2c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_slarw>
 b30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 b34:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 b38:	83 fd       	sbrc	r24, 3
 b3a:	f8 cf       	rjmp	.-16     	; 0xb2c <twi_writeTo+0x5a>
 b3c:	85 ec       	ldi	r24, 0xC5	; 197
 b3e:	01 c0       	rjmp	.+2      	; 0xb42 <twi_writeTo+0x70>
 b40:	85 ee       	ldi	r24, 0xE5	; 229
 b42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 b46:	22 23       	and	r18, r18
 b48:	21 f0       	breq	.+8      	; 0xb52 <twi_writeTo+0x80>
 b4a:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <twi_state>
 b4e:	82 30       	cpi	r24, 0x02	; 2
 b50:	d1 f3       	breq	.-12     	; 0xb46 <twi_writeTo+0x74>
 b52:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <twi_error>
 b56:	8f 3f       	cpi	r24, 0xFF	; 255
 b58:	79 f0       	breq	.+30     	; 0xb78 <twi_writeTo+0xa6>
 b5a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <twi_error>
 b5e:	80 32       	cpi	r24, 0x20	; 32
 b60:	41 f0       	breq	.+16     	; 0xb72 <twi_writeTo+0xa0>
 b62:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <twi_error>
 b66:	80 33       	cpi	r24, 0x30	; 48
 b68:	31 f0       	breq	.+12     	; 0xb76 <twi_writeTo+0xa4>
 b6a:	94 e0       	ldi	r25, 0x04	; 4
 b6c:	05 c0       	rjmp	.+10     	; 0xb78 <twi_writeTo+0xa6>
 b6e:	91 e0       	ldi	r25, 0x01	; 1
 b70:	03 c0       	rjmp	.+6      	; 0xb78 <twi_writeTo+0xa6>
 b72:	92 e0       	ldi	r25, 0x02	; 2
 b74:	01 c0       	rjmp	.+2      	; 0xb78 <twi_writeTo+0xa6>
 b76:	93 e0       	ldi	r25, 0x03	; 3
 b78:	89 2f       	mov	r24, r25
 b7a:	0f 91       	pop	r16
 b7c:	08 95       	ret

00000b7e <twi_transmit>:
 b7e:	40 91 c0 02 	lds	r20, 0x02C0	; 0x8002c0 <twi_txBufferLength>
 b82:	26 2f       	mov	r18, r22
 b84:	30 e0       	ldi	r19, 0x00	; 0
 b86:	24 0f       	add	r18, r20
 b88:	31 1d       	adc	r19, r1
 b8a:	21 32       	cpi	r18, 0x21	; 33
 b8c:	31 05       	cpc	r19, r1
 b8e:	dc f4       	brge	.+54     	; 0xbc6 <twi_transmit+0x48>
 b90:	20 91 0b 03 	lds	r18, 0x030B	; 0x80030b <twi_state>
 b94:	24 30       	cpi	r18, 0x04	; 4
 b96:	c9 f4       	brne	.+50     	; 0xbca <twi_transmit+0x4c>
 b98:	fc 01       	movw	r30, r24
 b9a:	80 e0       	ldi	r24, 0x00	; 0
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	86 17       	cp	r24, r22
 ba0:	58 f4       	brcc	.+22     	; 0xbb8 <twi_transmit+0x3a>
 ba2:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <twi_txBufferLength>
 ba6:	21 91       	ld	r18, Z+
 ba8:	dc 01       	movw	r26, r24
 baa:	ae 53       	subi	r26, 0x3E	; 62
 bac:	bd 4f       	sbci	r27, 0xFD	; 253
 bae:	a3 0f       	add	r26, r19
 bb0:	b1 1d       	adc	r27, r1
 bb2:	2c 93       	st	X, r18
 bb4:	01 96       	adiw	r24, 0x01	; 1
 bb6:	f3 cf       	rjmp	.-26     	; 0xb9e <twi_transmit+0x20>
 bb8:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <twi_txBufferLength>
 bbc:	68 0f       	add	r22, r24
 bbe:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <twi_txBufferLength>
 bc2:	80 e0       	ldi	r24, 0x00	; 0
 bc4:	08 95       	ret
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	08 95       	ret
 bca:	82 e0       	ldi	r24, 0x02	; 2
 bcc:	08 95       	ret

00000bce <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 bce:	85 ed       	ldi	r24, 0xD5	; 213
 bd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 bd4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 bd8:	84 fd       	sbrc	r24, 4
 bda:	fc cf       	rjmp	.-8      	; 0xbd4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 bdc:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <twi_state>
 be0:	08 95       	ret

00000be2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 be2:	85 ec       	ldi	r24, 0xC5	; 197
 be4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
 be8:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <twi_state>
 bec:	08 95       	ret

00000bee <__vector_24>:
}

ISR(TWI_vect)
{
 bee:	1f 92       	push	r1
 bf0:	0f 92       	push	r0
 bf2:	0f b6       	in	r0, 0x3f	; 63
 bf4:	0f 92       	push	r0
 bf6:	11 24       	eor	r1, r1
 bf8:	2f 93       	push	r18
 bfa:	3f 93       	push	r19
 bfc:	4f 93       	push	r20
 bfe:	5f 93       	push	r21
 c00:	6f 93       	push	r22
 c02:	7f 93       	push	r23
 c04:	8f 93       	push	r24
 c06:	9f 93       	push	r25
 c08:	af 93       	push	r26
 c0a:	bf 93       	push	r27
 c0c:	ef 93       	push	r30
 c0e:	ff 93       	push	r31
  switch(TW_STATUS){
 c10:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 c14:	88 7f       	andi	r24, 0xF8	; 248
 c16:	80 36       	cpi	r24, 0x60	; 96
 c18:	09 f4       	brne	.+2      	; 0xc1c <__vector_24+0x2e>
 c1a:	9e c0       	rjmp	.+316    	; 0xd58 <__vector_24+0x16a>
 c1c:	78 f5       	brcc	.+94     	; 0xc7c <__vector_24+0x8e>
 c1e:	88 32       	cpi	r24, 0x28	; 40
 c20:	09 f4       	brne	.+2      	; 0xc24 <__vector_24+0x36>
 c22:	5d c0       	rjmp	.+186    	; 0xcde <__vector_24+0xf0>
 c24:	90 f4       	brcc	.+36     	; 0xc4a <__vector_24+0x5c>
 c26:	80 31       	cpi	r24, 0x10	; 16
 c28:	09 f4       	brne	.+2      	; 0xc2c <__vector_24+0x3e>
 c2a:	56 c0       	rjmp	.+172    	; 0xcd8 <__vector_24+0xea>
 c2c:	38 f4       	brcc	.+14     	; 0xc3c <__vector_24+0x4e>
 c2e:	88 23       	and	r24, r24
 c30:	09 f4       	brne	.+2      	; 0xc34 <__vector_24+0x46>
 c32:	f5 c0       	rjmp	.+490    	; 0xe1e <__vector_24+0x230>
 c34:	88 30       	cpi	r24, 0x08	; 8
 c36:	09 f4       	brne	.+2      	; 0xc3a <__vector_24+0x4c>
 c38:	4f c0       	rjmp	.+158    	; 0xcd8 <__vector_24+0xea>
 c3a:	f5 c0       	rjmp	.+490    	; 0xe26 <__vector_24+0x238>
 c3c:	88 31       	cpi	r24, 0x18	; 24
 c3e:	09 f4       	brne	.+2      	; 0xc42 <__vector_24+0x54>
 c40:	4e c0       	rjmp	.+156    	; 0xcde <__vector_24+0xf0>
 c42:	80 32       	cpi	r24, 0x20	; 32
 c44:	09 f4       	brne	.+2      	; 0xc48 <__vector_24+0x5a>
 c46:	5f c0       	rjmp	.+190    	; 0xd06 <__vector_24+0x118>
 c48:	ee c0       	rjmp	.+476    	; 0xe26 <__vector_24+0x238>
 c4a:	80 34       	cpi	r24, 0x40	; 64
 c4c:	09 f4       	brne	.+2      	; 0xc50 <__vector_24+0x62>
 c4e:	6a c0       	rjmp	.+212    	; 0xd24 <__vector_24+0x136>
 c50:	58 f4       	brcc	.+22     	; 0xc68 <__vector_24+0x7a>
 c52:	80 33       	cpi	r24, 0x30	; 48
 c54:	09 f4       	brne	.+2      	; 0xc58 <__vector_24+0x6a>
 c56:	57 c0       	rjmp	.+174    	; 0xd06 <__vector_24+0x118>
 c58:	88 33       	cpi	r24, 0x38	; 56
 c5a:	09 f0       	breq	.+2      	; 0xc5e <__vector_24+0x70>
 c5c:	e4 c0       	rjmp	.+456    	; 0xe26 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 c5e:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi_error>
      twi_releaseBus();
 c62:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <twi_releaseBus>
      break;
 c66:	df c0       	rjmp	.+446    	; 0xe26 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
 c68:	80 35       	cpi	r24, 0x50	; 80
 c6a:	09 f4       	brne	.+2      	; 0xc6e <__vector_24+0x80>
 c6c:	4f c0       	rjmp	.+158    	; 0xd0c <__vector_24+0x11e>
 c6e:	88 35       	cpi	r24, 0x58	; 88
 c70:	09 f4       	brne	.+2      	; 0xc74 <__vector_24+0x86>
 c72:	5d c0       	rjmp	.+186    	; 0xd2e <__vector_24+0x140>
 c74:	88 34       	cpi	r24, 0x48	; 72
 c76:	09 f0       	breq	.+2      	; 0xc7a <__vector_24+0x8c>
 c78:	d6 c0       	rjmp	.+428    	; 0xe26 <__vector_24+0x238>
 c7a:	d3 c0       	rjmp	.+422    	; 0xe22 <__vector_24+0x234>
 c7c:	88 39       	cpi	r24, 0x98	; 152
 c7e:	09 f4       	brne	.+2      	; 0xc82 <__vector_24+0x94>
 c80:	c4 c0       	rjmp	.+392    	; 0xe0a <__vector_24+0x21c>
 c82:	a8 f4       	brcc	.+42     	; 0xcae <__vector_24+0xc0>
 c84:	88 37       	cpi	r24, 0x78	; 120
 c86:	09 f4       	brne	.+2      	; 0xc8a <__vector_24+0x9c>
 c88:	67 c0       	rjmp	.+206    	; 0xd58 <__vector_24+0x16a>
 c8a:	38 f4       	brcc	.+14     	; 0xc9a <__vector_24+0xac>
 c8c:	88 36       	cpi	r24, 0x68	; 104
 c8e:	09 f4       	brne	.+2      	; 0xc92 <__vector_24+0xa4>
 c90:	63 c0       	rjmp	.+198    	; 0xd58 <__vector_24+0x16a>
 c92:	80 37       	cpi	r24, 0x70	; 112
 c94:	09 f4       	brne	.+2      	; 0xc98 <__vector_24+0xaa>
 c96:	60 c0       	rjmp	.+192    	; 0xd58 <__vector_24+0x16a>
 c98:	c6 c0       	rjmp	.+396    	; 0xe26 <__vector_24+0x238>
 c9a:	88 38       	cpi	r24, 0x88	; 136
 c9c:	09 f4       	brne	.+2      	; 0xca0 <__vector_24+0xb2>
 c9e:	b5 c0       	rjmp	.+362    	; 0xe0a <__vector_24+0x21c>
 ca0:	80 39       	cpi	r24, 0x90	; 144
 ca2:	09 f4       	brne	.+2      	; 0xca6 <__vector_24+0xb8>
 ca4:	5f c0       	rjmp	.+190    	; 0xd64 <__vector_24+0x176>
 ca6:	80 38       	cpi	r24, 0x80	; 128
 ca8:	09 f0       	breq	.+2      	; 0xcac <__vector_24+0xbe>
 caa:	bd c0       	rjmp	.+378    	; 0xe26 <__vector_24+0x238>
 cac:	5b c0       	rjmp	.+182    	; 0xd64 <__vector_24+0x176>
 cae:	80 3b       	cpi	r24, 0xB0	; 176
 cb0:	09 f4       	brne	.+2      	; 0xcb4 <__vector_24+0xc6>
 cb2:	83 c0       	rjmp	.+262    	; 0xdba <__vector_24+0x1cc>
 cb4:	38 f4       	brcc	.+14     	; 0xcc4 <__vector_24+0xd6>
 cb6:	80 3a       	cpi	r24, 0xA0	; 160
 cb8:	09 f4       	brne	.+2      	; 0xcbc <__vector_24+0xce>
 cba:	66 c0       	rjmp	.+204    	; 0xd88 <__vector_24+0x19a>
 cbc:	88 3a       	cpi	r24, 0xA8	; 168
 cbe:	09 f4       	brne	.+2      	; 0xcc2 <__vector_24+0xd4>
 cc0:	7c c0       	rjmp	.+248    	; 0xdba <__vector_24+0x1cc>
 cc2:	b1 c0       	rjmp	.+354    	; 0xe26 <__vector_24+0x238>
 cc4:	80 3c       	cpi	r24, 0xC0	; 192
 cc6:	09 f4       	brne	.+2      	; 0xcca <__vector_24+0xdc>
 cc8:	a4 c0       	rjmp	.+328    	; 0xe12 <__vector_24+0x224>
 cca:	88 3c       	cpi	r24, 0xC8	; 200
 ccc:	09 f4       	brne	.+2      	; 0xcd0 <__vector_24+0xe2>
 cce:	a1 c0       	rjmp	.+322    	; 0xe12 <__vector_24+0x224>
 cd0:	88 3b       	cpi	r24, 0xB8	; 184
 cd2:	09 f4       	brne	.+2      	; 0xcd6 <__vector_24+0xe8>
 cd4:	87 c0       	rjmp	.+270    	; 0xde4 <__vector_24+0x1f6>
 cd6:	a7 c0       	rjmp	.+334    	; 0xe26 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 cd8:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_slarw>
 cdc:	10 c0       	rjmp	.+32     	; 0xcfe <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 cde:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
 ce2:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi_masterBufferLength>
 ce6:	98 17       	cp	r25, r24
 ce8:	70 f5       	brcc	.+92     	; 0xd46 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 cea:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
 cee:	81 e0       	ldi	r24, 0x01	; 1
 cf0:	8e 0f       	add	r24, r30
 cf2:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_masterBufferIndex>
 cf6:	f0 e0       	ldi	r31, 0x00	; 0
 cf8:	ec 51       	subi	r30, 0x1C	; 28
 cfa:	fd 4f       	sbci	r31, 0xFD	; 253
 cfc:	80 81       	ld	r24, Z
 cfe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 d02:	85 ec       	ldi	r24, 0xC5	; 197
 d04:	83 c0       	rjmp	.+262    	; 0xe0c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 d06:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi_error>
 d0a:	8b c0       	rjmp	.+278    	; 0xe22 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 d0c:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
 d10:	81 e0       	ldi	r24, 0x01	; 1
 d12:	8e 0f       	add	r24, r30
 d14:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_masterBufferIndex>
 d18:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 d1c:	f0 e0       	ldi	r31, 0x00	; 0
 d1e:	ec 51       	subi	r30, 0x1C	; 28
 d20:	fd 4f       	sbci	r31, 0xFD	; 253
 d22:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 d24:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
 d28:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi_masterBufferLength>
 d2c:	6b c0       	rjmp	.+214    	; 0xe04 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 d2e:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
 d32:	81 e0       	ldi	r24, 0x01	; 1
 d34:	8e 0f       	add	r24, r30
 d36:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_masterBufferIndex>
 d3a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 d3e:	f0 e0       	ldi	r31, 0x00	; 0
 d40:	ec 51       	subi	r30, 0x1C	; 28
 d42:	fd 4f       	sbci	r31, 0xFD	; 253
 d44:	80 83       	st	Z, r24
	if (twi_sendStop)
 d46:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <twi_sendStop>
 d4a:	81 11       	cpse	r24, r1
 d4c:	6a c0       	rjmp	.+212    	; 0xe22 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
 d4e:	81 e0       	ldi	r24, 0x01	; 1
 d50:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 d54:	84 ea       	ldi	r24, 0xA4	; 164
 d56:	5e c0       	rjmp	.+188    	; 0xe14 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 d58:	83 e0       	ldi	r24, 0x03	; 3
 d5a:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 d5e:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi_rxBufferIndex>
 d62:	cf cf       	rjmp	.-98     	; 0xd02 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 d64:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_rxBufferIndex>
 d68:	80 32       	cpi	r24, 0x20	; 32
 d6a:	08 f0       	brcs	.+2      	; 0xd6e <__vector_24+0x180>
 d6c:	4e c0       	rjmp	.+156    	; 0xe0a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 d6e:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <twi_rxBufferIndex>
 d72:	81 e0       	ldi	r24, 0x01	; 1
 d74:	8e 0f       	add	r24, r30
 d76:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <twi_rxBufferIndex>
 d7a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 d7e:	f0 e0       	ldi	r31, 0x00	; 0
 d80:	e0 56       	subi	r30, 0x60	; 96
 d82:	fd 4f       	sbci	r31, 0xFD	; 253
 d84:	80 83       	st	Z, r24
 d86:	bd cf       	rjmp	.-134    	; 0xd02 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
 d88:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 d8c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_rxBufferIndex>
 d90:	80 32       	cpi	r24, 0x20	; 32
 d92:	30 f4       	brcc	.+12     	; 0xda0 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 d94:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <twi_rxBufferIndex>
 d98:	f0 e0       	ldi	r31, 0x00	; 0
 d9a:	e0 56       	subi	r30, 0x60	; 96
 d9c:	fd 4f       	sbci	r31, 0xFD	; 253
 d9e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 da0:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <twi_rxBufferIndex>
 da4:	70 e0       	ldi	r23, 0x00	; 0
 da6:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <twi_onSlaveReceive>
 daa:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <twi_onSlaveReceive+0x1>
 dae:	80 ea       	ldi	r24, 0xA0	; 160
 db0:	92 e0       	ldi	r25, 0x02	; 2
 db2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 db4:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi_rxBufferIndex>
      break;
 db8:	36 c0       	rjmp	.+108    	; 0xe26 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 dba:	84 e0       	ldi	r24, 0x04	; 4
 dbc:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 dc0:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 dc4:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 dc8:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <twi_onSlaveTransmit>
 dcc:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <twi_onSlaveTransmit+0x1>
 dd0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 dd2:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <twi_txBufferLength>
 dd6:	81 11       	cpse	r24, r1
 dd8:	05 c0       	rjmp	.+10     	; 0xde4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
 dda:	81 e0       	ldi	r24, 0x01	; 1
 ddc:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 de0:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 de4:	e0 91 c1 02 	lds	r30, 0x02C1	; 0x8002c1 <twi_txBufferIndex>
 de8:	81 e0       	ldi	r24, 0x01	; 1
 dea:	8e 0f       	add	r24, r30
 dec:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <twi_txBufferIndex>
 df0:	f0 e0       	ldi	r31, 0x00	; 0
 df2:	ee 53       	subi	r30, 0x3E	; 62
 df4:	fd 4f       	sbci	r31, 0xFD	; 253
 df6:	80 81       	ld	r24, Z
 df8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 dfc:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <twi_txBufferIndex>
 e00:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <twi_txBufferLength>
 e04:	98 17       	cp	r25, r24
 e06:	08 f4       	brcc	.+2      	; 0xe0a <__vector_24+0x21c>
 e08:	7c cf       	rjmp	.-264    	; 0xd02 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 e0a:	85 e8       	ldi	r24, 0x85	; 133
 e0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 e10:	0a c0       	rjmp	.+20     	; 0xe26 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 e12:	85 ec       	ldi	r24, 0xC5	; 197
 e14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
 e18:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <twi_state>
      break;
 e1c:	04 c0       	rjmp	.+8      	; 0xe26 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 e1e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi_error>
      twi_stop();
 e22:	0e 94 e7 05 	call	0xbce	; 0xbce <twi_stop>
      break;
  }
}
 e26:	ff 91       	pop	r31
 e28:	ef 91       	pop	r30
 e2a:	bf 91       	pop	r27
 e2c:	af 91       	pop	r26
 e2e:	9f 91       	pop	r25
 e30:	8f 91       	pop	r24
 e32:	7f 91       	pop	r23
 e34:	6f 91       	pop	r22
 e36:	5f 91       	pop	r21
 e38:	4f 91       	pop	r20
 e3a:	3f 91       	pop	r19
 e3c:	2f 91       	pop	r18
 e3e:	0f 90       	pop	r0
 e40:	0f be       	out	0x3f, r0	; 63
 e42:	0f 90       	pop	r0
 e44:	1f 90       	pop	r1
 e46:	18 95       	reti

00000e48 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
 e48:	83 30       	cpi	r24, 0x03	; 3
 e4a:	81 f0       	breq	.+32     	; 0xe6c <turnOffPWM+0x24>
 e4c:	28 f4       	brcc	.+10     	; 0xe58 <turnOffPWM+0x10>
 e4e:	81 30       	cpi	r24, 0x01	; 1
 e50:	99 f0       	breq	.+38     	; 0xe78 <turnOffPWM+0x30>
 e52:	82 30       	cpi	r24, 0x02	; 2
 e54:	a1 f0       	breq	.+40     	; 0xe7e <turnOffPWM+0x36>
 e56:	08 95       	ret
 e58:	87 30       	cpi	r24, 0x07	; 7
 e5a:	a9 f0       	breq	.+42     	; 0xe86 <turnOffPWM+0x3e>
 e5c:	88 30       	cpi	r24, 0x08	; 8
 e5e:	b9 f0       	breq	.+46     	; 0xe8e <turnOffPWM+0x46>
 e60:	84 30       	cpi	r24, 0x04	; 4
 e62:	d1 f4       	brne	.+52     	; 0xe98 <turnOffPWM+0x50>
 e64:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 e68:	8f 7d       	andi	r24, 0xDF	; 223
 e6a:	03 c0       	rjmp	.+6      	; 0xe72 <turnOffPWM+0x2a>
 e6c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 e70:	8f 77       	andi	r24, 0x7F	; 127
 e72:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 e76:	08 95       	ret
 e78:	84 b5       	in	r24, 0x24	; 36
 e7a:	8f 77       	andi	r24, 0x7F	; 127
 e7c:	02 c0       	rjmp	.+4      	; 0xe82 <turnOffPWM+0x3a>
 e7e:	84 b5       	in	r24, 0x24	; 36
 e80:	8f 7d       	andi	r24, 0xDF	; 223
 e82:	84 bd       	out	0x24, r24	; 36
 e84:	08 95       	ret
 e86:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 e8a:	8f 77       	andi	r24, 0x7F	; 127
 e8c:	03 c0       	rjmp	.+6      	; 0xe94 <turnOffPWM+0x4c>
 e8e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 e92:	8f 7d       	andi	r24, 0xDF	; 223
 e94:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 e98:	08 95       	ret

00000e9a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 e9a:	1f 93       	push	r17
 e9c:	cf 93       	push	r28
 e9e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 ea0:	28 2f       	mov	r18, r24
 ea2:	30 e0       	ldi	r19, 0x00	; 0
 ea4:	f9 01       	movw	r30, r18
 ea6:	e8 59       	subi	r30, 0x98	; 152
 ea8:	ff 4f       	sbci	r31, 0xFF	; 255
 eaa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 eac:	f9 01       	movw	r30, r18
 eae:	e4 58       	subi	r30, 0x84	; 132
 eb0:	ff 4f       	sbci	r31, 0xFF	; 255
 eb2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 eb4:	f9 01       	movw	r30, r18
 eb6:	e0 57       	subi	r30, 0x70	; 112
 eb8:	ff 4f       	sbci	r31, 0xFF	; 255
 eba:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 ebc:	cc 23       	and	r28, r28
 ebe:	c9 f0       	breq	.+50     	; 0xef2 <digitalWrite+0x58>
 ec0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 ec2:	81 11       	cpse	r24, r1
 ec4:	0e 94 24 07 	call	0xe48	; 0xe48 <turnOffPWM>

	out = portOutputRegister(port);
 ec8:	ec 2f       	mov	r30, r28
 eca:	f0 e0       	ldi	r31, 0x00	; 0
 ecc:	ee 0f       	add	r30, r30
 ece:	ff 1f       	adc	r31, r31
 ed0:	ec 55       	subi	r30, 0x5C	; 92
 ed2:	ff 4f       	sbci	r31, 0xFF	; 255
 ed4:	a5 91       	lpm	r26, Z+
 ed6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 ed8:	8f b7       	in	r24, 0x3f	; 63
	cli();
 eda:	f8 94       	cli

	if (val == LOW) {
 edc:	11 11       	cpse	r17, r1
 ede:	05 c0       	rjmp	.+10     	; 0xeea <digitalWrite+0x50>
		*out &= ~bit;
 ee0:	9c 91       	ld	r25, X
 ee2:	ed 2f       	mov	r30, r29
 ee4:	e0 95       	com	r30
 ee6:	e9 23       	and	r30, r25
 ee8:	02 c0       	rjmp	.+4      	; 0xeee <digitalWrite+0x54>
	} else {
		*out |= bit;
 eea:	ec 91       	ld	r30, X
 eec:	ed 2b       	or	r30, r29
 eee:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 ef0:	8f bf       	out	0x3f, r24	; 63
}
 ef2:	df 91       	pop	r29
 ef4:	cf 91       	pop	r28
 ef6:	1f 91       	pop	r17
 ef8:	08 95       	ret

00000efa <__udivmodsi4>:
 efa:	a1 e2       	ldi	r26, 0x21	; 33
 efc:	1a 2e       	mov	r1, r26
 efe:	aa 1b       	sub	r26, r26
 f00:	bb 1b       	sub	r27, r27
 f02:	fd 01       	movw	r30, r26
 f04:	0d c0       	rjmp	.+26     	; 0xf20 <__udivmodsi4_ep>

00000f06 <__udivmodsi4_loop>:
 f06:	aa 1f       	adc	r26, r26
 f08:	bb 1f       	adc	r27, r27
 f0a:	ee 1f       	adc	r30, r30
 f0c:	ff 1f       	adc	r31, r31
 f0e:	a2 17       	cp	r26, r18
 f10:	b3 07       	cpc	r27, r19
 f12:	e4 07       	cpc	r30, r20
 f14:	f5 07       	cpc	r31, r21
 f16:	20 f0       	brcs	.+8      	; 0xf20 <__udivmodsi4_ep>
 f18:	a2 1b       	sub	r26, r18
 f1a:	b3 0b       	sbc	r27, r19
 f1c:	e4 0b       	sbc	r30, r20
 f1e:	f5 0b       	sbc	r31, r21

00000f20 <__udivmodsi4_ep>:
 f20:	66 1f       	adc	r22, r22
 f22:	77 1f       	adc	r23, r23
 f24:	88 1f       	adc	r24, r24
 f26:	99 1f       	adc	r25, r25
 f28:	1a 94       	dec	r1
 f2a:	69 f7       	brne	.-38     	; 0xf06 <__udivmodsi4_loop>
 f2c:	60 95       	com	r22
 f2e:	70 95       	com	r23
 f30:	80 95       	com	r24
 f32:	90 95       	com	r25
 f34:	9b 01       	movw	r18, r22
 f36:	ac 01       	movw	r20, r24
 f38:	bd 01       	movw	r22, r26
 f3a:	cf 01       	movw	r24, r30
 f3c:	08 95       	ret

00000f3e <__tablejump2__>:
 f3e:	ee 0f       	add	r30, r30
 f40:	ff 1f       	adc	r31, r31
 f42:	05 90       	lpm	r0, Z+
 f44:	f4 91       	lpm	r31, Z
 f46:	e0 2d       	mov	r30, r0
 f48:	09 94       	ijmp

00000f4a <_exit>:
 f4a:	f8 94       	cli

00000f4c <__stop_program>:
 f4c:	ff cf       	rjmp	.-2      	; 0xf4c <__stop_program>
