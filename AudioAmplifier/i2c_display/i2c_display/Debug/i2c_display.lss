
i2c_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000366  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000366  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b8  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b2  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000074b  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d8  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e1  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002631  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  8e:	0c 94 b1 01 	jmp	0x362	; 0x362 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2cInit>:
#include <avr/io.h>
#include "i2cLib.h"

void i2cInit(){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
    TWSR &= ~((1 << TWPS0) | (1 << TWPS1)); //prescaler set to 0
  9e:	89 eb       	ldi	r24, 0xB9	; 185
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	29 eb       	ldi	r18, 0xB9	; 185
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	2c 7f       	andi	r18, 0xFC	; 252
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
    TWBR = 12; //setting the bit rate to 400kHz
  b0:	88 eb       	ldi	r24, 0xB8	; 184
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2c e0       	ldi	r18, 0x0C	; 12
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
    TWCR |= (1 << TWEN); //i2c enable 
  ba:	8c eb       	ldi	r24, 0xBC	; 188
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2c eb       	ldi	r18, 0xBC	; 188
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	24 60       	ori	r18, 0x04	; 4
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <i2cStart>:

void i2cStart(){
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); //setting interrupt pin, generating starting condition and enabling i2c
  da:	8c eb       	ldi	r24, 0xBC	; 188
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	24 ea       	ldi	r18, 0xA4	; 164
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
    while (!(TWCR & (1 << TWINT))); //waiting for the transmission of start condition to end
  e4:	00 00       	nop
  e6:	8c eb       	ldi	r24, 0xBC	; 188
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 23       	and	r24, r24
  f0:	d4 f7       	brge	.-12     	; 0xe6 <i2cStart+0x14>
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <i2cStop>:

void i2cStop(){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); //setting interrupt pin, gen. stopping condition and enabling i2c 
 100:	8c eb       	ldi	r24, 0xBC	; 188
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	24 e9       	ldi	r18, 0x94	; 148
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <i2cWrite>:

void i2cWrite(unsigned char data){
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data; //putting data to data register
 11c:	8b eb       	ldi	r24, 0xBB	; 187
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	29 81       	ldd	r18, Y+1	; 0x01
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
    TWCR = (1 << TWINT) | (1 << TWEN); //setting interrupt pin and enabling i2c
 126:	8c eb       	ldi	r24, 0xBC	; 188
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	24 e8       	ldi	r18, 0x84	; 132
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
	while(!(TWCR & (1 << TWINT)));
 130:	00 00       	nop
 132:	8c eb       	ldi	r24, 0xBC	; 188
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	d4 f7       	brge	.-12     	; 0x132 <i2cWrite+0x22>
}
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <sendCmd>:
#include "LCD_lib.h"


void sendCmd(char data){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	1f 92       	push	r1
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
 152:	0e 94 69 00 	call	0xd2	; 0xd2 <i2cStart>
    i2cWrite(SLA_W);
 156:	8c e7       	ldi	r24, 0x7C	; 124
 158:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(data);
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cStop();
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cStop>
}
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <sendData>:

void sendData(char data){
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	1f 92       	push	r1
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
 180:	0e 94 69 00 	call	0xd2	; 0xd2 <i2cStart>
    i2cWrite(SLA_W);
 184:	8c e7       	ldi	r24, 0x7C	; 124
 186:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x40);
 18a:	80 e4       	ldi	r24, 0x40	; 64
 18c:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(data);
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cStop();
 196:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cStop>
}
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <initDisp>:

void initDisp(){
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
    i2cStart();
 1aa:	0e 94 69 00 	call	0xd2	; 0xd2 <i2cStart>
    i2cWrite(SLA_W);
 1ae:	8c e7       	ldi	r24, 0x7C	; 124
 1b0:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);//cmd
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x38);//8 bit bus, 2 line disp mode, normal mode
 1ba:	88 e3       	ldi	r24, 0x38	; 56
 1bc:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x39);//8 bit bus, 2 line disp mode, extended mode
 1c6:	89 e3       	ldi	r24, 0x39	; 57
 1c8:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x14);//internal OSC freq
 1cc:	84 e1       	ldi	r24, 0x14	; 20
 1ce:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x7F);//contrast setting (Highest)
 1d2:	8f e7       	ldi	r24, 0x7F	; 127
 1d4:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x50);//set ICON address
 1d8:	80 e5       	ldi	r24, 0x50	; 80
 1da:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x6C);//follower controll
 1de:	8c e6       	ldi	r24, 0x6C	; 108
 1e0:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x0C);//display ON
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x01);//clear disp;ay
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cStop();
 1f0:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cStop>
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:

#define LCD_L1		0x80
#define LCD_L2		0xC0

int main(void)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	00 d0       	rcall	.+0      	; 0x200 <main+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <main+0x8>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
    DDRD |= (1 << DDD3);
 206:	8a e2       	ldi	r24, 0x2A	; 42
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	2a e2       	ldi	r18, 0x2A	; 42
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	f9 01       	movw	r30, r18
 210:	20 81       	ld	r18, Z
 212:	28 60       	ori	r18, 0x08	; 8
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
    PORTD |= (1 << PORTD3);
 218:	8b e2       	ldi	r24, 0x2B	; 43
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	2b e2       	ldi	r18, 0x2B	; 43
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	20 81       	ld	r18, Z
 224:	28 60       	ori	r18, 0x08	; 8
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
    i2cInit();
 22a:	0e 94 4b 00 	call	0x96	; 0x96 <i2cInit>
    initDisp();
 22e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <initDisp>
    sendCmd(0x01);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
    char *str = "Hejd\x86, Farzad"; // \x8F
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	9c 83       	std	Y+4, r25	; 0x04
 23e:	8b 83       	std	Y+3, r24	; 0x03
    while (1) 
    {   
        for (uint8_t i = 0x00; i <= 0x0F; i++){
 240:	19 82       	std	Y+1, r1	; 0x01
 242:	15 c0       	rjmp	.+42     	; 0x26e <main+0x74>
            sendCmd(0x00);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
            sendCmd(0x80 | i);
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
            sendData(str[i]);
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	2b 81       	ldd	r18, Y+3	; 0x03
 25a:	3c 81       	ldd	r19, Y+4	; 0x04
 25c:	82 0f       	add	r24, r18
 25e:	93 1f       	adc	r25, r19
 260:	fc 01       	movw	r30, r24
 262:	80 81       	ld	r24, Z
 264:	0e 94 ba 00 	call	0x174	; 0x174 <sendData>
    initDisp();
    sendCmd(0x01);
    char *str = "Hejd\x86, Farzad"; // \x8F
    while (1) 
    {   
        for (uint8_t i = 0x00; i <= 0x0F; i++){
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	80 31       	cpi	r24, 0x10	; 16
 272:	40 f3       	brcs	.-48     	; 0x244 <main+0x4a>
            sendCmd(0x00);
            sendCmd(0x80 | i);
            sendData(str[i]);
        }
        for (uint8_t i = 0x40; i <= 0x4F; i++){
 274:	80 e4       	ldi	r24, 0x40	; 64
 276:	8a 83       	std	Y+2, r24	; 0x02
 278:	17 c0       	rjmp	.+46     	; 0x2a8 <main+0xae>
            sendCmd(0x00);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
            sendCmd(0x80 | i);
 280:	8a 81       	ldd	r24, Y+2	; 0x02
 282:	80 68       	ori	r24, 0x80	; 128
 284:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
            sendData(str[i-0x40]);
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	88 2f       	mov	r24, r24
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	80 54       	subi	r24, 0x40	; 64
 290:	91 09       	sbc	r25, r1
 292:	2b 81       	ldd	r18, Y+3	; 0x03
 294:	3c 81       	ldd	r19, Y+4	; 0x04
 296:	82 0f       	add	r24, r18
 298:	93 1f       	adc	r25, r19
 29a:	fc 01       	movw	r30, r24
 29c:	80 81       	ld	r24, Z
 29e:	0e 94 ba 00 	call	0x174	; 0x174 <sendData>
        for (uint8_t i = 0x00; i <= 0x0F; i++){
            sendCmd(0x00);
            sendCmd(0x80 | i);
            sendData(str[i]);
        }
        for (uint8_t i = 0x40; i <= 0x4F; i++){
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	8a 83       	std	Y+2, r24	; 0x02
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	80 35       	cpi	r24, 0x50	; 80
 2ac:	30 f3       	brcs	.-52     	; 0x27a <main+0x80>
            sendData(str[i-0x40]);
        }
//         sendCmd(0x00);
//         sendCmd(0x80);
//         sendData('H');
        delay(500);
 2ae:	64 ef       	ldi	r22, 0xF4	; 244
 2b0:	71 e0       	ldi	r23, 0x01	; 1
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <delay>
    }
 2ba:	c2 cf       	rjmp	.-124    	; 0x240 <main+0x46>

000002bc <delay>:
	}

}

/* Delay function by Farzad */
void delay(uint32_t ms) {
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	28 97       	sbiw	r28, 0x08	; 8
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
 2d0:	6d 83       	std	Y+5, r22	; 0x05
 2d2:	7e 83       	std	Y+6, r23	; 0x06
 2d4:	8f 83       	std	Y+7, r24	; 0x07
 2d6:	98 87       	std	Y+8, r25	; 0x08
	uint32_t i = ms * 471;
 2d8:	2d 81       	ldd	r18, Y+5	; 0x05
 2da:	3e 81       	ldd	r19, Y+6	; 0x06
 2dc:	4f 81       	ldd	r20, Y+7	; 0x07
 2de:	58 85       	ldd	r21, Y+8	; 0x08
 2e0:	87 ed       	ldi	r24, 0xD7	; 215
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	dc 01       	movw	r26, r24
 2e6:	0e 94 97 01 	call	0x32e	; 0x32e <__muluhisi3>
 2ea:	dc 01       	movw	r26, r24
 2ec:	cb 01       	movw	r24, r22
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	9a 83       	std	Y+2, r25	; 0x02
 2f2:	ab 83       	std	Y+3, r26	; 0x03
 2f4:	bc 83       	std	Y+4, r27	; 0x04
	while(--i > 0);
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	ab 81       	ldd	r26, Y+3	; 0x03
 2fc:	bc 81       	ldd	r27, Y+4	; 0x04
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	a1 09       	sbc	r26, r1
 302:	b1 09       	sbc	r27, r1
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	ab 83       	std	Y+3, r26	; 0x03
 30a:	bc 83       	std	Y+4, r27	; 0x04
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	9a 81       	ldd	r25, Y+2	; 0x02
 310:	ab 81       	ldd	r26, Y+3	; 0x03
 312:	bc 81       	ldd	r27, Y+4	; 0x04
 314:	89 2b       	or	r24, r25
 316:	8a 2b       	or	r24, r26
 318:	8b 2b       	or	r24, r27
 31a:	69 f7       	brne	.-38     	; 0x2f6 <delay+0x3a>
 31c:	28 96       	adiw	r28, 0x08	; 8
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <__muluhisi3>:
 32e:	0e 94 a2 01 	call	0x344	; 0x344 <__umulhisi3>
 332:	a5 9f       	mul	r26, r21
 334:	90 0d       	add	r25, r0
 336:	b4 9f       	mul	r27, r20
 338:	90 0d       	add	r25, r0
 33a:	a4 9f       	mul	r26, r20
 33c:	80 0d       	add	r24, r0
 33e:	91 1d       	adc	r25, r1
 340:	11 24       	eor	r1, r1
 342:	08 95       	ret

00000344 <__umulhisi3>:
 344:	a2 9f       	mul	r26, r18
 346:	b0 01       	movw	r22, r0
 348:	b3 9f       	mul	r27, r19
 34a:	c0 01       	movw	r24, r0
 34c:	a3 9f       	mul	r26, r19
 34e:	70 0d       	add	r23, r0
 350:	81 1d       	adc	r24, r1
 352:	11 24       	eor	r1, r1
 354:	91 1d       	adc	r25, r1
 356:	b2 9f       	mul	r27, r18
 358:	70 0d       	add	r23, r0
 35a:	81 1d       	adc	r24, r1
 35c:	11 24       	eor	r1, r1
 35e:	91 1d       	adc	r25, r1
 360:	08 95       	ret

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
