
i2c_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000500  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000500  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af4  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f4  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000853  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  000021fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046f  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036f  00000000  00000000  0000285b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002bca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  8e:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2cInit>:
#include <avr/io.h>
#include "i2cLib.h"

void i2cInit(){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
    TWSR &= ~((1 << TWPS0) | (1 << TWPS1)); //prescaler set to 0
  9e:	89 eb       	ldi	r24, 0xB9	; 185
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	29 eb       	ldi	r18, 0xB9	; 185
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	2c 7f       	andi	r18, 0xFC	; 252
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
    TWBR = 12; //setting the bit rate to 400kHz
  b0:	88 eb       	ldi	r24, 0xB8	; 184
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2c e0       	ldi	r18, 0x0C	; 12
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
    TWCR |= (1 << TWEN); //i2c enable 
  ba:	8c eb       	ldi	r24, 0xBC	; 188
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2c eb       	ldi	r18, 0xBC	; 188
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	24 60       	ori	r18, 0x04	; 4
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <i2cStart>:

void i2cStart(){
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); //setting interrupt pin, generating starting condition and enabling i2c
  da:	8c eb       	ldi	r24, 0xBC	; 188
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	24 ea       	ldi	r18, 0xA4	; 164
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
    while (!(TWCR & (1 << TWINT))); //waiting for the transmission of start condition to end
  e4:	00 00       	nop
  e6:	8c eb       	ldi	r24, 0xBC	; 188
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 23       	and	r24, r24
  f0:	d4 f7       	brge	.-12     	; 0xe6 <i2cStart+0x14>
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <i2cStop>:

void i2cStop(){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); //setting interrupt pin, gen. stopping condition and enabling i2c 
 100:	8c eb       	ldi	r24, 0xBC	; 188
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	24 e9       	ldi	r18, 0x94	; 148
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <i2cWrite>:

void i2cWrite(unsigned char data){
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data; //putting data to data register
 11c:	8b eb       	ldi	r24, 0xBB	; 187
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	29 81       	ldd	r18, Y+1	; 0x01
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
    TWCR = (1 << TWINT) | (1 << TWEN); //setting interrupt pin and enabling i2c
 126:	8c eb       	ldi	r24, 0xBC	; 188
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	24 e8       	ldi	r18, 0x84	; 132
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
	while(!(TWCR & (1 << TWINT)));
 130:	00 00       	nop
 132:	8c eb       	ldi	r24, 0xBC	; 188
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	d4 f7       	brge	.-12     	; 0x132 <i2cWrite+0x22>
}
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <sendCmd>:
#include <avr/io.h>
#include <string.h>
#include "LCD_lib.h"


void sendCmd(char data){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	1f 92       	push	r1
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
 152:	0e 94 69 00 	call	0xd2	; 0xd2 <i2cStart>
    i2cWrite(SLA_W);
 156:	8c e7       	ldi	r24, 0x7C	; 124
 158:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(data);
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cStop();
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cStop>
}
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <sendData>:

void sendData(char data){
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	1f 92       	push	r1
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	89 83       	std	Y+1, r24	; 0x01
    i2cStart();
 180:	0e 94 69 00 	call	0xd2	; 0xd2 <i2cStart>
    i2cWrite(SLA_W);
 184:	8c e7       	ldi	r24, 0x7C	; 124
 186:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x40);
 18a:	80 e4       	ldi	r24, 0x40	; 64
 18c:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(data);
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cStop();
 196:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cStop>
}
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <initDisp>:

void initDisp(){
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << DDD3);
 1aa:	8a e2       	ldi	r24, 0x2A	; 42
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	2a e2       	ldi	r18, 0x2A	; 42
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	20 81       	ld	r18, Z
 1b6:	28 60       	ori	r18, 0x08	; 8
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
	PORTD |= (1 << PORTD3);
 1bc:	8b e2       	ldi	r24, 0x2B	; 43
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	2b e2       	ldi	r18, 0x2B	; 43
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	28 60       	ori	r18, 0x08	; 8
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
    i2cStart();
 1ce:	0e 94 69 00 	call	0xd2	; 0xd2 <i2cStart>
    i2cWrite(SLA_W);
 1d2:	8c e7       	ldi	r24, 0x7C	; 124
 1d4:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);//cmd
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x38);//8 bit bus, 2 line disp mode, normal mode
 1de:	88 e3       	ldi	r24, 0x38	; 56
 1e0:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x00);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x39);//8 bit bus, 2 line disp mode, extended mode
 1ea:	89 e3       	ldi	r24, 0x39	; 57
 1ec:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x14);//internal OSC freq
 1f0:	84 e1       	ldi	r24, 0x14	; 20
 1f2:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x7F);//contrast setting (Highest)
 1f6:	8f e7       	ldi	r24, 0x7F	; 127
 1f8:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x50);//set ICON address
 1fc:	80 e5       	ldi	r24, 0x50	; 80
 1fe:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x6C);//follower control
 202:	8c e6       	ldi	r24, 0x6C	; 108
 204:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x0C);//display ON
 208:	8c e0       	ldi	r24, 0x0C	; 12
 20a:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cWrite(0x01);//clear disp;ay
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 88 00 	call	0x110	; 0x110 <i2cWrite>
    i2cStop();
 214:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cStop>
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <write_first_line>:

void write_first_line(char *data, uint8_t menu) {
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	6a 97       	sbiw	r28, 0x1a	; 26
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	99 8f       	std	Y+25, r25	; 0x19
 234:	88 8f       	std	Y+24, r24	; 0x18
 236:	6a 8f       	std	Y+26, r22	; 0x1a
	uint16_t len = strlen(data);
 238:	88 8d       	ldd	r24, Y+24	; 0x18
 23a:	99 8d       	ldd	r25, Y+25	; 0x19
 23c:	0e 94 75 02 	call	0x4ea	; 0x4ea <strlen>
 240:	9a 83       	std	Y+2, r25	; 0x02
 242:	89 83       	std	Y+1, r24	; 0x01
	char str[16] = {32};
 244:	20 e1       	ldi	r18, 0x10	; 16
 246:	ce 01       	movw	r24, r28
 248:	08 96       	adiw	r24, 0x08	; 8
 24a:	fc 01       	movw	r30, r24
 24c:	32 2f       	mov	r19, r18
 24e:	11 92       	st	Z+, r1
 250:	3a 95       	dec	r19
 252:	e9 f7       	brne	.-6      	; 0x24e <write_first_line+0x30>
 254:	80 e2       	ldi	r24, 0x20	; 32
 256:	88 87       	std	Y+8, r24	; 0x08
	uint16_t i = 0;
 258:	1c 82       	std	Y+4, r1	; 0x04
 25a:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t j = 0;
 25c:	1e 82       	std	Y+6, r1	; 0x06
 25e:	1d 82       	std	Y+5, r1	; 0x05

	if(menu) {
 260:	8a 8d       	ldd	r24, Y+26	; 0x1a
 262:	88 23       	and	r24, r24
 264:	59 f0       	breq	.+22     	; 0x27c <write_first_line+0x5e>
		str[0] = '\x7E';
 266:	8e e7       	ldi	r24, 0x7E	; 126
 268:	88 87       	std	Y+8, r24	; 0x08
		i = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 83       	std	Y+4, r25	; 0x04
 270:	8b 83       	std	Y+3, r24	; 0x03
		len++;
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	9a 81       	ldd	r25, Y+2	; 0x02
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	9a 83       	std	Y+2, r25	; 0x02
 27a:	89 83       	std	Y+1, r24	; 0x01
	}
	for(i; i < len; i++) {
 27c:	1b c0       	rjmp	.+54     	; 0x2b4 <write_first_line+0x96>
		str[i] = data[j];
 27e:	28 8d       	ldd	r18, Y+24	; 0x18
 280:	39 8d       	ldd	r19, Y+25	; 0x19
 282:	8d 81       	ldd	r24, Y+5	; 0x05
 284:	9e 81       	ldd	r25, Y+6	; 0x06
 286:	82 0f       	add	r24, r18
 288:	93 1f       	adc	r25, r19
 28a:	fc 01       	movw	r30, r24
 28c:	40 81       	ld	r20, Z
 28e:	9e 01       	movw	r18, r28
 290:	28 5f       	subi	r18, 0xF8	; 248
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	8b 81       	ldd	r24, Y+3	; 0x03
 296:	9c 81       	ldd	r25, Y+4	; 0x04
 298:	82 0f       	add	r24, r18
 29a:	93 1f       	adc	r25, r19
 29c:	fc 01       	movw	r30, r24
 29e:	40 83       	st	Z, r20
		j++;
 2a0:	8d 81       	ldd	r24, Y+5	; 0x05
 2a2:	9e 81       	ldd	r25, Y+6	; 0x06
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	9e 83       	std	Y+6, r25	; 0x06
 2a8:	8d 83       	std	Y+5, r24	; 0x05
	if(menu) {
		str[0] = '\x7E';
		i = 1;
		len++;
	}
	for(i; i < len; i++) {
 2aa:	8b 81       	ldd	r24, Y+3	; 0x03
 2ac:	9c 81       	ldd	r25, Y+4	; 0x04
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	9c 83       	std	Y+4, r25	; 0x04
 2b2:	8b 83       	std	Y+3, r24	; 0x03
 2b4:	2b 81       	ldd	r18, Y+3	; 0x03
 2b6:	3c 81       	ldd	r19, Y+4	; 0x04
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	9a 81       	ldd	r25, Y+2	; 0x02
 2bc:	28 17       	cp	r18, r24
 2be:	39 07       	cpc	r19, r25
 2c0:	f0 f2       	brcs	.-68     	; 0x27e <write_first_line+0x60>
		str[i] = data[j];
		j++;
	}

	for (uint8_t i = 0x00; i <= 0x0F; i++){ //0x00-0x27 first line
 2c2:	1f 82       	std	Y+7, r1	; 0x07
 2c4:	16 c0       	rjmp	.+44     	; 0x2f2 <write_first_line+0xd4>
		sendCmd(0x00);
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
		sendCmd(0x80 | i);
 2cc:	8f 81       	ldd	r24, Y+7	; 0x07
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
		sendData(str[i]);
 2d4:	8f 81       	ldd	r24, Y+7	; 0x07
 2d6:	88 2f       	mov	r24, r24
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	9e 01       	movw	r18, r28
 2dc:	28 5f       	subi	r18, 0xF8	; 248
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	82 0f       	add	r24, r18
 2e2:	93 1f       	adc	r25, r19
 2e4:	fc 01       	movw	r30, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	0e 94 ba 00 	call	0x174	; 0x174 <sendData>
	for(i; i < len; i++) {
		str[i] = data[j];
		j++;
	}

	for (uint8_t i = 0x00; i <= 0x0F; i++){ //0x00-0x27 first line
 2ec:	8f 81       	ldd	r24, Y+7	; 0x07
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
 2f0:	8f 83       	std	Y+7, r24	; 0x07
 2f2:	8f 81       	ldd	r24, Y+7	; 0x07
 2f4:	80 31       	cpi	r24, 0x10	; 16
 2f6:	38 f3       	brcs	.-50     	; 0x2c6 <write_first_line+0xa8>
		sendCmd(0x00);
		sendCmd(0x80 | i);
		sendData(str[i]);
	}
}
 2f8:	6a 96       	adiw	r28, 0x1a	; 26
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <write_second_line>:

void write_second_line(char *data, uint8_t menu) {
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	6a 97       	sbiw	r28, 0x1a	; 26
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
 31e:	99 8f       	std	Y+25, r25	; 0x19
 320:	88 8f       	std	Y+24, r24	; 0x18
 322:	6a 8f       	std	Y+26, r22	; 0x1a
	uint16_t len = strlen(data);
 324:	88 8d       	ldd	r24, Y+24	; 0x18
 326:	99 8d       	ldd	r25, Y+25	; 0x19
 328:	0e 94 75 02 	call	0x4ea	; 0x4ea <strlen>
 32c:	9a 83       	std	Y+2, r25	; 0x02
 32e:	89 83       	std	Y+1, r24	; 0x01
	char str[16] = {32};
 330:	20 e1       	ldi	r18, 0x10	; 16
 332:	ce 01       	movw	r24, r28
 334:	08 96       	adiw	r24, 0x08	; 8
 336:	fc 01       	movw	r30, r24
 338:	32 2f       	mov	r19, r18
 33a:	11 92       	st	Z+, r1
 33c:	3a 95       	dec	r19
 33e:	e9 f7       	brne	.-6      	; 0x33a <write_second_line+0x30>
 340:	80 e2       	ldi	r24, 0x20	; 32
 342:	88 87       	std	Y+8, r24	; 0x08
	uint16_t i = 0;
 344:	1c 82       	std	Y+4, r1	; 0x04
 346:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t j = 0;
 348:	1e 82       	std	Y+6, r1	; 0x06
 34a:	1d 82       	std	Y+5, r1	; 0x05

	if(menu) {
 34c:	8a 8d       	ldd	r24, Y+26	; 0x1a
 34e:	88 23       	and	r24, r24
 350:	49 f0       	breq	.+18     	; 0x364 <write_second_line+0x5a>
		i = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	9c 83       	std	Y+4, r25	; 0x04
 358:	8b 83       	std	Y+3, r24	; 0x03
		len++;
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	9a 81       	ldd	r25, Y+2	; 0x02
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	9a 83       	std	Y+2, r25	; 0x02
 362:	89 83       	std	Y+1, r24	; 0x01
	}
	for(i; i < len; i++) {
 364:	1b c0       	rjmp	.+54     	; 0x39c <write_second_line+0x92>
		str[i] = data[j];
 366:	28 8d       	ldd	r18, Y+24	; 0x18
 368:	39 8d       	ldd	r19, Y+25	; 0x19
 36a:	8d 81       	ldd	r24, Y+5	; 0x05
 36c:	9e 81       	ldd	r25, Y+6	; 0x06
 36e:	82 0f       	add	r24, r18
 370:	93 1f       	adc	r25, r19
 372:	fc 01       	movw	r30, r24
 374:	40 81       	ld	r20, Z
 376:	9e 01       	movw	r18, r28
 378:	28 5f       	subi	r18, 0xF8	; 248
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	9c 81       	ldd	r25, Y+4	; 0x04
 380:	82 0f       	add	r24, r18
 382:	93 1f       	adc	r25, r19
 384:	fc 01       	movw	r30, r24
 386:	40 83       	st	Z, r20
		j++;
 388:	8d 81       	ldd	r24, Y+5	; 0x05
 38a:	9e 81       	ldd	r25, Y+6	; 0x06
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	9e 83       	std	Y+6, r25	; 0x06
 390:	8d 83       	std	Y+5, r24	; 0x05

	if(menu) {
		i = 1;
		len++;
	}
	for(i; i < len; i++) {
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	9c 81       	ldd	r25, Y+4	; 0x04
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	9c 83       	std	Y+4, r25	; 0x04
 39a:	8b 83       	std	Y+3, r24	; 0x03
 39c:	2b 81       	ldd	r18, Y+3	; 0x03
 39e:	3c 81       	ldd	r19, Y+4	; 0x04
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	9a 81       	ldd	r25, Y+2	; 0x02
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	f0 f2       	brcs	.-68     	; 0x366 <write_second_line+0x5c>
		str[i] = data[j];
		j++;
	}


	for (uint8_t i = 0x40; i <= 0x4F; i++){ //0x40-0x67 second line
 3aa:	80 e4       	ldi	r24, 0x40	; 64
 3ac:	8f 83       	std	Y+7, r24	; 0x07
 3ae:	18 c0       	rjmp	.+48     	; 0x3e0 <write_second_line+0xd6>
		sendCmd(0x00);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
		sendCmd(0x80 | i);
 3b6:	8f 81       	ldd	r24, Y+7	; 0x07
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
		sendData(str[i-0x40]);
 3be:	8f 81       	ldd	r24, Y+7	; 0x07
 3c0:	88 2f       	mov	r24, r24
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	80 54       	subi	r24, 0x40	; 64
 3c6:	91 09       	sbc	r25, r1
 3c8:	9e 01       	movw	r18, r28
 3ca:	28 5f       	subi	r18, 0xF8	; 248
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	82 0f       	add	r24, r18
 3d0:	93 1f       	adc	r25, r19
 3d2:	fc 01       	movw	r30, r24
 3d4:	80 81       	ld	r24, Z
 3d6:	0e 94 ba 00 	call	0x174	; 0x174 <sendData>
		str[i] = data[j];
		j++;
	}


	for (uint8_t i = 0x40; i <= 0x4F; i++){ //0x40-0x67 second line
 3da:	8f 81       	ldd	r24, Y+7	; 0x07
 3dc:	8f 5f       	subi	r24, 0xFF	; 255
 3de:	8f 83       	std	Y+7, r24	; 0x07
 3e0:	8f 81       	ldd	r24, Y+7	; 0x07
 3e2:	80 35       	cpi	r24, 0x50	; 80
 3e4:	28 f3       	brcs	.-54     	; 0x3b0 <write_second_line+0xa6>
		sendCmd(0x00);
		sendCmd(0x80 | i);
		sendData(str[i-0x40]);
	}
 3e6:	6a 96       	adiw	r28, 0x1a	; 26
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <main>:

#define LCD_L1		0x80
#define LCD_L2		0xC0

int main(void)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <main+0x6>
 3fe:	00 d0       	rcall	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
    i2cInit();
 404:	0e 94 4b 00 	call	0x96	; 0x96 <i2cInit>
    initDisp();
 408:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <initDisp>
    sendCmd(0x01);
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 a3 00 	call	0x146	; 0x146 <sendCmd>
    char *str_1 = "1.Equalizer"; // \x8F
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	9a 83       	std	Y+2, r25	; 0x02
 418:	89 83       	std	Y+1, r24	; 0x01
	char *str_2 = "2.Reset";
 41a:	8c e0       	ldi	r24, 0x0C	; 12
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	9c 83       	std	Y+4, r25	; 0x04
 420:	8b 83       	std	Y+3, r24	; 0x03
    while (1) 
    {   
        write_first_line(str_1, 1);
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	9a 81       	ldd	r25, Y+2	; 0x02
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	0e 94 0f 01 	call	0x21e	; 0x21e <write_first_line>
		write_second_line(str_2, 1);
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	9c 81       	ldd	r25, Y+4	; 0x04
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	0e 94 85 01 	call	0x30a	; 0x30a <write_second_line>

        delay(500);
 436:	64 ef       	ldi	r22, 0xF4	; 244
 438:	71 e0       	ldi	r23, 0x01	; 1
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 22 02 	call	0x444	; 0x444 <delay>
    }
 442:	ef cf       	rjmp	.-34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

00000444 <delay>:
	}

}

/* Delay function by Farzad */
void delay(uint32_t ms) {
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
 44c:	28 97       	sbiw	r28, 0x08	; 8
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	6d 83       	std	Y+5, r22	; 0x05
 45a:	7e 83       	std	Y+6, r23	; 0x06
 45c:	8f 83       	std	Y+7, r24	; 0x07
 45e:	98 87       	std	Y+8, r25	; 0x08
	uint32_t i = ms * 471;
 460:	2d 81       	ldd	r18, Y+5	; 0x05
 462:	3e 81       	ldd	r19, Y+6	; 0x06
 464:	4f 81       	ldd	r20, Y+7	; 0x07
 466:	58 85       	ldd	r21, Y+8	; 0x08
 468:	87 ed       	ldi	r24, 0xD7	; 215
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	dc 01       	movw	r26, r24
 46e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__muluhisi3>
 472:	dc 01       	movw	r26, r24
 474:	cb 01       	movw	r24, r22
 476:	89 83       	std	Y+1, r24	; 0x01
 478:	9a 83       	std	Y+2, r25	; 0x02
 47a:	ab 83       	std	Y+3, r26	; 0x03
 47c:	bc 83       	std	Y+4, r27	; 0x04
	while(--i > 0);
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	ab 81       	ldd	r26, Y+3	; 0x03
 484:	bc 81       	ldd	r27, Y+4	; 0x04
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	a1 09       	sbc	r26, r1
 48a:	b1 09       	sbc	r27, r1
 48c:	89 83       	std	Y+1, r24	; 0x01
 48e:	9a 83       	std	Y+2, r25	; 0x02
 490:	ab 83       	std	Y+3, r26	; 0x03
 492:	bc 83       	std	Y+4, r27	; 0x04
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	9a 81       	ldd	r25, Y+2	; 0x02
 498:	ab 81       	ldd	r26, Y+3	; 0x03
 49a:	bc 81       	ldd	r27, Y+4	; 0x04
 49c:	89 2b       	or	r24, r25
 49e:	8a 2b       	or	r24, r26
 4a0:	8b 2b       	or	r24, r27
 4a2:	69 f7       	brne	.-38     	; 0x47e <delay+0x3a>
 4a4:	28 96       	adiw	r28, 0x08	; 8
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	de bf       	out	0x3e, r29	; 62
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	cd bf       	out	0x3d, r28	; 61
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <__muluhisi3>:
 4b6:	0e 94 66 02 	call	0x4cc	; 0x4cc <__umulhisi3>
 4ba:	a5 9f       	mul	r26, r21
 4bc:	90 0d       	add	r25, r0
 4be:	b4 9f       	mul	r27, r20
 4c0:	90 0d       	add	r25, r0
 4c2:	a4 9f       	mul	r26, r20
 4c4:	80 0d       	add	r24, r0
 4c6:	91 1d       	adc	r25, r1
 4c8:	11 24       	eor	r1, r1
 4ca:	08 95       	ret

000004cc <__umulhisi3>:
 4cc:	a2 9f       	mul	r26, r18
 4ce:	b0 01       	movw	r22, r0
 4d0:	b3 9f       	mul	r27, r19
 4d2:	c0 01       	movw	r24, r0
 4d4:	a3 9f       	mul	r26, r19
 4d6:	70 0d       	add	r23, r0
 4d8:	81 1d       	adc	r24, r1
 4da:	11 24       	eor	r1, r1
 4dc:	91 1d       	adc	r25, r1
 4de:	b2 9f       	mul	r27, r18
 4e0:	70 0d       	add	r23, r0
 4e2:	81 1d       	adc	r24, r1
 4e4:	11 24       	eor	r1, r1
 4e6:	91 1d       	adc	r25, r1
 4e8:	08 95       	ret

000004ea <strlen>:
 4ea:	fc 01       	movw	r30, r24
 4ec:	01 90       	ld	r0, Z+
 4ee:	00 20       	and	r0, r0
 4f0:	e9 f7       	brne	.-6      	; 0x4ec <strlen+0x2>
 4f2:	80 95       	com	r24
 4f4:	90 95       	com	r25
 4f6:	8e 0f       	add	r24, r30
 4f8:	9f 1f       	adc	r25, r31
 4fa:	08 95       	ret

000004fc <_exit>:
 4fc:	f8 94       	cli

000004fe <__stop_program>:
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <__stop_program>
