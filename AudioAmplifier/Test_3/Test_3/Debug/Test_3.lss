
Test_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006eb  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000641  00000000  00000000  00000a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d8  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

void delay(uint32_t ms);

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
    /* Set the MOSI & SCK as Output lines */
    DDRB |= (1 << PINB3) | (1 << PINB5) | (1 << PINB0) | (1 << PINB2);
  8c:	84 e2       	ldi	r24, 0x24	; 36
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	24 e2       	ldi	r18, 0x24	; 36
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	20 81       	ld	r18, Z
  98:	2d 62       	ori	r18, 0x2D	; 45
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
    //DDRB &= ~(1 << PINB4);
    //DDRD |= (1 << PIND0);
    /* Set the SCK pin to low */
    //PORTB &= ~(1 << PINB5);
    PORTB |= (1 << PINB0) | (1 << PINB2);
  9e:	85 e2       	ldi	r24, 0x25	; 37
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	25 e2       	ldi	r18, 0x25	; 37
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	25 60       	ori	r18, 0x05	; 5
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
    //PORTD &= ~(1 << PIND0);
    /* Enable SPI */
    SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPR1);
  b0:	8c e4       	ldi	r24, 0x4C	; 76
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2c e4       	ldi	r18, 0x4C	; 76
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	20 81       	ld	r18, Z
  bc:	23 65       	ori	r18, 0x53	; 83
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
    while (1) {
		for(int i = 0; i < 255; i += 4) {
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	19 82       	std	Y+1, r1	; 0x01
  c6:	34 c0       	rjmp	.+104    	; 0x130 <main+0xb0>
			PORTB &= ~(1 << PINB0);
  c8:	85 e2       	ldi	r24, 0x25	; 37
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	25 e2       	ldi	r18, 0x25	; 37
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	2e 7f       	andi	r18, 0xFE	; 254
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
			SPDR = 0b00000000;
  da:	8e e4       	ldi	r24, 0x4E	; 78
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	10 82       	st	Z, r1
			while(!(SPSR & (1 << SPIF)));
  e2:	00 00       	nop
  e4:	8d e4       	ldi	r24, 0x4D	; 77
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	d4 f7       	brge	.-12     	; 0xe4 <main+0x64>
			SPDR = i;
  f0:	8e e4       	ldi	r24, 0x4E	; 78
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	29 81       	ldd	r18, Y+1	; 0x01
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
			while(!(SPSR & (1 << SPIF)));
  fa:	00 00       	nop
  fc:	8d e4       	ldi	r24, 0x4D	; 77
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	80 81       	ld	r24, Z
 104:	88 23       	and	r24, r24
 106:	d4 f7       	brge	.-12     	; 0xfc <main+0x7c>
			PORTB |= (1 << PINB0);
 108:	85 e2       	ldi	r24, 0x25	; 37
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	25 e2       	ldi	r18, 0x25	; 37
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	f9 01       	movw	r30, r18
 112:	20 81       	ld	r18, Z
 114:	21 60       	ori	r18, 0x01	; 1
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
			delay(1);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay>
    PORTB |= (1 << PINB0) | (1 << PINB2);
    //PORTD &= ~(1 << PIND0);
    /* Enable SPI */
    SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPR1);
    while (1) {
		for(int i = 0; i < 255; i += 4) {
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	04 96       	adiw	r24, 0x04	; 4
 12c:	9a 83       	std	Y+2, r25	; 0x02
 12e:	89 83       	std	Y+1, r24	; 0x01
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	9a 81       	ldd	r25, Y+2	; 0x02
 134:	8f 3f       	cpi	r24, 0xFF	; 255
 136:	91 05       	cpc	r25, r1
 138:	3c f2       	brlt	.-114    	; 0xc8 <main+0x48>
			while(!(SPSR & (1 << SPIF)));
			PORTB |= (1 << PINB0);
			delay(1);
		}

		for(int i = 255; i > 0; i -= 4) {
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	9c 83       	std	Y+4, r25	; 0x04
 140:	8b 83       	std	Y+3, r24	; 0x03
 142:	34 c0       	rjmp	.+104    	; 0x1ac <main+0x12c>
			PORTB &= ~(1 << PINB0);
 144:	85 e2       	ldi	r24, 0x25	; 37
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	25 e2       	ldi	r18, 0x25	; 37
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2e 7f       	andi	r18, 0xFE	; 254
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
			SPDR = 0b00000000;
 156:	8e e4       	ldi	r24, 0x4E	; 78
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	10 82       	st	Z, r1
			while(!(SPSR & (1 << SPIF)));
 15e:	00 00       	nop
 160:	8d e4       	ldi	r24, 0x4D	; 77
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	d4 f7       	brge	.-12     	; 0x160 <main+0xe0>
			SPDR = i;
 16c:	8e e4       	ldi	r24, 0x4E	; 78
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	2b 81       	ldd	r18, Y+3	; 0x03
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
			while(!(SPSR & (1 << SPIF)));
 176:	00 00       	nop
 178:	8d e4       	ldi	r24, 0x4D	; 77
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	d4 f7       	brge	.-12     	; 0x178 <main+0xf8>
			PORTB |= (1 << PINB0);
 184:	85 e2       	ldi	r24, 0x25	; 37
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	25 e2       	ldi	r18, 0x25	; 37
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	f9 01       	movw	r30, r18
 18e:	20 81       	ld	r18, Z
 190:	21 60       	ori	r18, 0x01	; 1
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
			delay(1);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay>
			while(!(SPSR & (1 << SPIF)));
			PORTB |= (1 << PINB0);
			delay(1);
		}

		for(int i = 255; i > 0; i -= 4) {
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	9c 81       	ldd	r25, Y+4	; 0x04
 1a6:	04 97       	sbiw	r24, 0x04	; 4
 1a8:	9c 83       	std	Y+4, r25	; 0x04
 1aa:	8b 83       	std	Y+3, r24	; 0x03
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	9c 81       	ldd	r25, Y+4	; 0x04
 1b0:	18 16       	cp	r1, r24
 1b2:	19 06       	cpc	r1, r25
 1b4:	3c f2       	brlt	.-114    	; 0x144 <main+0xc4>
			SPDR = i;
			while(!(SPSR & (1 << SPIF)));
			PORTB |= (1 << PINB0);
			delay(1);
		}
    }
 1b6:	85 cf       	rjmp	.-246    	; 0xc2 <main+0x42>

000001b8 <delay>:
}

void delay(uint32_t ms) {
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	28 97       	sbiw	r28, 0x08	; 8
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
 1cc:	6d 83       	std	Y+5, r22	; 0x05
 1ce:	7e 83       	std	Y+6, r23	; 0x06
 1d0:	8f 83       	std	Y+7, r24	; 0x07
 1d2:	98 87       	std	Y+8, r25	; 0x08
	uint32_t i = ms * 471;
 1d4:	2d 81       	ldd	r18, Y+5	; 0x05
 1d6:	3e 81       	ldd	r19, Y+6	; 0x06
 1d8:	4f 81       	ldd	r20, Y+7	; 0x07
 1da:	58 85       	ldd	r21, Y+8	; 0x08
 1dc:	87 ed       	ldi	r24, 0xD7	; 215
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	dc 01       	movw	r26, r24
 1e2:	0e 94 15 01 	call	0x22a	; 0x22a <__muluhisi3>
 1e6:	dc 01       	movw	r26, r24
 1e8:	cb 01       	movw	r24, r22
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	ab 83       	std	Y+3, r26	; 0x03
 1f0:	bc 83       	std	Y+4, r27	; 0x04
	while(--i > 0);
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	ab 81       	ldd	r26, Y+3	; 0x03
 1f8:	bc 81       	ldd	r27, Y+4	; 0x04
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	a1 09       	sbc	r26, r1
 1fe:	b1 09       	sbc	r27, r1
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	ab 83       	std	Y+3, r26	; 0x03
 206:	bc 83       	std	Y+4, r27	; 0x04
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	ab 81       	ldd	r26, Y+3	; 0x03
 20e:	bc 81       	ldd	r27, Y+4	; 0x04
 210:	89 2b       	or	r24, r25
 212:	8a 2b       	or	r24, r26
 214:	8b 2b       	or	r24, r27
 216:	69 f7       	brne	.-38     	; 0x1f2 <delay+0x3a>
 218:	28 96       	adiw	r28, 0x08	; 8
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <__muluhisi3>:
 22a:	0e 94 20 01 	call	0x240	; 0x240 <__umulhisi3>
 22e:	a5 9f       	mul	r26, r21
 230:	90 0d       	add	r25, r0
 232:	b4 9f       	mul	r27, r20
 234:	90 0d       	add	r25, r0
 236:	a4 9f       	mul	r26, r20
 238:	80 0d       	add	r24, r0
 23a:	91 1d       	adc	r25, r1
 23c:	11 24       	eor	r1, r1
 23e:	08 95       	ret

00000240 <__umulhisi3>:
 240:	a2 9f       	mul	r26, r18
 242:	b0 01       	movw	r22, r0
 244:	b3 9f       	mul	r27, r19
 246:	c0 01       	movw	r24, r0
 248:	a3 9f       	mul	r26, r19
 24a:	70 0d       	add	r23, r0
 24c:	81 1d       	adc	r24, r1
 24e:	11 24       	eor	r1, r1
 250:	91 1d       	adc	r25, r1
 252:	b2 9f       	mul	r27, r18
 254:	70 0d       	add	r23, r0
 256:	81 1d       	adc	r24, r1
 258:	11 24       	eor	r1, r1
 25a:	91 1d       	adc	r25, r1
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
